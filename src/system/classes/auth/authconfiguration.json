{
  "id": "Auth.authconfiguration",
  "type": "class",
  "name": "AuthConfiguration",
  "namespace": "Auth",
  "startToken": {
    "type": "declaration.entity.name.class",
    "text": "AuthConfiguration",
    "textToLower": "authconfiguration",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "declaration.entity.name.class_AuthConfiguration_-1:0"
  },
  "accessModifier": {
    "type": "keyword.modifier.access",
    "text": "global",
    "textToLower": "global",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "keyword.modifier.access_global_-1:0"
  },
  "sharingModifier": {
    "type": "keyword.modifier.sharing",
    "text": "without sharing",
    "textToLower": "without sharing",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "keyword.modifier.sharing_without sharing_-1:0"
  },
  "description": "Contains methods for configuring settings for users to log in to a Salesforce org using their authentication provider credentials instead of their Salesforce credentials. The authentication provider can be any authentication provider that supports the OpenID Connect protocol, such as Google, Facebook, or Twitter. Users log in to either a community subdomain of the force.com domain (https://subdomain.force.com) or a Salesforce subdomain created with My Domain (https://subdomain.my.salesforce.com).",
  "documentation": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_class_Auth_AuthConfiguration.htm",
  "classes": {},
  "interfaces": {},
  "enums": {},
  "variables": {},
  "methods": {
    "getallowinternaluserloginenabled()": {
      "id": "Auth.authconfiguration.getallowinternaluserloginenabled",
      "type": "method",
      "name": "getAllowInternalUserLoginEnabled",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getAllowInternalUserLoginEnabled",
        "textToLower": "getallowinternaluserloginenabled",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getAllowInternalUserLoginEnabled_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void getAllowInternalUserLoginEnabled()",
      "simplifiedSignature": "getAllowInternalUserLoginEnabled()",
      "datatype": {
        "id": "Auth.authconfiguration.getallowinternaluserloginenabled.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Indicates whether the community allows internal users to log in using the community login page. To enable, admins configure the setting Allow internal users to log in directly to the community on the Login &amp; Registration page in Community Workspaces. Itâ€™s disabled by default.",
      "variables": {}
    },
    "getauthconfig()": {
      "id": "Auth.authconfiguration.getauthconfig",
      "type": "method",
      "name": "getAuthConfig",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getAuthConfig",
        "textToLower": "getauthconfig",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getAuthConfig_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public AuthConfig getAuthConfig()",
      "simplifiedSignature": "getAuthConfig()",
      "datatype": {
        "id": "Auth.authconfiguration.getauthconfig.AuthConfig",
        "type": "datatype",
        "name": "AuthConfig"
      },
      "description": "Returns the AuthConfig sObject, which represents the authentication options for a community or Salesforce My Domain subdomain.",
      "variables": {}
    },
    "getauthconfigproviders()": {
      "id": "Auth.authconfiguration.getauthconfigproviders",
      "type": "method",
      "name": "getAuthConfigProviders",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getAuthConfigProviders",
        "textToLower": "getauthconfigproviders",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getAuthConfigProviders_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public List<AuthConfigProviders> getAuthConfigProviders()",
      "simplifiedSignature": "getAuthConfigProviders()",
      "datatype": {
        "id": "Auth.authconfiguration.getauthconfigproviders.List<AuthConfigProviders>",
        "type": "datatype",
        "name": "List<AuthConfigProviders>"
      },
      "description": "Returns the list of authentication providers configured for a community or Salesforce My Domain subdomain.",
      "variables": {}
    },
    "getauthproviders()": {
      "id": "Auth.authconfiguration.getauthproviders",
      "type": "method",
      "name": "getAuthProviders",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getAuthProviders",
        "textToLower": "getauthproviders",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getAuthProviders_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public List<AuthProvider> getAuthProviders()",
      "simplifiedSignature": "getAuthProviders()",
      "datatype": {
        "id": "Auth.authconfiguration.getauthproviders.List<AuthProvider>",
        "type": "datatype",
        "name": "List<AuthProvider>"
      },
      "description": "Returns the list of authentication providers available for a community or Salesforce My Domain subdomain.",
      "variables": {}
    },
    "getauthproviderssourl(string,string,string)": {
      "id": "Auth.authconfiguration.getauthproviderssourl",
      "type": "method",
      "name": "getAuthProviderSsoUrl",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getAuthProviderSsoUrl",
        "textToLower": "getauthproviderssourl",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getAuthProviderSsoUrl_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static String getAuthProviderSsoUrl(String communityUrl, String startUrl, String developerName)",
      "simplifiedSignature": "getAuthProviderSsoUrl(String,String,String)",
      "datatype": {
        "id": "Auth.authconfiguration.getauthproviderssourl.String",
        "type": "datatype",
        "name": "String"
      },
      "description": "Returns the single sign-on URL for a community or Salesforce My Domain subdomain.",
      "variables": {
        "communityUrl": {
          "id": "Auth.authconfiguration.getauthproviderssourl.communityurl",
          "type": "var",
          "name": "communityUrl",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "communityUrl",
            "textToLower": "communityurl",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_communityUrl_-1:0"
          },
          "signature": "String communityUrl",
          "datatype": {
            "id": "Auth.authconfiguration.getauthproviderssourl.string",
            "type": "datatype",
            "name": "String"
          }
        },
        "startUrl": {
          "id": "Auth.authconfiguration.getauthproviderssourl.starturl",
          "type": "var",
          "name": "startUrl",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "startUrl",
            "textToLower": "starturl",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_startUrl_-1:0"
          },
          "signature": "String startUrl",
          "datatype": {
            "id": "Auth.authconfiguration.getauthproviderssourl.string",
            "type": "datatype",
            "name": "String"
          }
        },
        "developerName": {
          "id": "Auth.authconfiguration.getauthproviderssourl.developername",
          "type": "var",
          "name": "developerName",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "developerName",
            "textToLower": "developername",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_developerName_-1:0"
          },
          "signature": "String developerName",
          "datatype": {
            "id": "Auth.authconfiguration.getauthproviderssourl.string",
            "type": "datatype",
            "name": "String"
          }
        }
      }
    },
    "getbackgroundcolor()": {
      "id": "Auth.authconfiguration.getbackgroundcolor",
      "type": "method",
      "name": "getBackgroundColor",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getBackgroundColor",
        "textToLower": "getbackgroundcolor",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getBackgroundColor_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public String getBackgroundColor()",
      "simplifiedSignature": "getBackgroundColor()",
      "datatype": {
        "id": "Auth.authconfiguration.getbackgroundcolor.String",
        "type": "datatype",
        "name": "String"
      },
      "description": "Returns the color for the background of the login page for a community.",
      "variables": {}
    },
    "getcertificateloginenabled(string)": {
      "id": "Auth.authconfiguration.getcertificateloginenabled",
      "type": "method",
      "name": "getCertificateLoginEnabled",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getCertificateLoginEnabled",
        "textToLower": "getcertificateloginenabled",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getCertificateLoginEnabled_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public Boolean getCertificateLoginEnabled(String domainUrl)",
      "simplifiedSignature": "getCertificateLoginEnabled(String)",
      "datatype": {
        "id": "Auth.authconfiguration.getcertificateloginenabled.Boolean",
        "type": "datatype",
        "name": "Boolean"
      },
      "description": "Returns true if certificate-based authentication is enabled for the My Domain URL.",
      "variables": {
        "domainUrl": {
          "id": "Auth.authconfiguration.getcertificateloginenabled.domainurl",
          "type": "var",
          "name": "domainUrl",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "domainUrl",
            "textToLower": "domainurl",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_domainUrl_-1:0"
          },
          "signature": "String domainUrl",
          "datatype": {
            "id": "Auth.authconfiguration.getcertificateloginenabled.string",
            "type": "datatype",
            "name": "String"
          }
        }
      }
    },
    "getcertificateloginurl(string,string)": {
      "id": "Auth.authconfiguration.getcertificateloginurl",
      "type": "method",
      "name": "getCertificateLoginUrl",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getCertificateLoginUrl",
        "textToLower": "getcertificateloginurl",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getCertificateLoginUrl_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static String getCertificateLoginUrl(String domainUrl, String startUrl)",
      "simplifiedSignature": "getCertificateLoginUrl(String,String)",
      "datatype": {
        "id": "Auth.authconfiguration.getcertificateloginurl.String",
        "type": "datatype",
        "name": "String"
      },
      "description": "Returns the certificate-based authentication endpoint for the My Domain URL if the org has certificate-based authentication enabled.",
      "variables": {
        "domainUrl": {
          "id": "Auth.authconfiguration.getcertificateloginurl.domainurl",
          "type": "var",
          "name": "domainUrl",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "domainUrl",
            "textToLower": "domainurl",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_domainUrl_-1:0"
          },
          "signature": "String domainUrl",
          "datatype": {
            "id": "Auth.authconfiguration.getcertificateloginurl.string",
            "type": "datatype",
            "name": "String"
          }
        },
        "startUrl": {
          "id": "Auth.authconfiguration.getcertificateloginurl.starturl",
          "type": "var",
          "name": "startUrl",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "startUrl",
            "textToLower": "starturl",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_startUrl_-1:0"
          },
          "signature": "String startUrl",
          "datatype": {
            "id": "Auth.authconfiguration.getcertificateloginurl.string",
            "type": "datatype",
            "name": "String"
          }
        }
      }
    },
    "getdefaultprofileforregistration()": {
      "id": "Auth.authconfiguration.getdefaultprofileforregistration",
      "type": "method",
      "name": "getDefaultProfileForRegistration",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getDefaultProfileForRegistration",
        "textToLower": "getdefaultprofileforregistration",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getDefaultProfileForRegistration_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public String getDefaultProfileForRegistration()",
      "simplifiedSignature": "getDefaultProfileForRegistration()",
      "datatype": {
        "id": "Auth.authconfiguration.getdefaultprofileforregistration.String",
        "type": "datatype",
        "name": "String"
      },
      "description": "Returns the profile ID assigned to new community users.",
      "variables": {}
    },
    "getfootertext()": {
      "id": "Auth.authconfiguration.getfootertext",
      "type": "method",
      "name": "getFooterText",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getFooterText",
        "textToLower": "getfootertext",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getFooterText_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public String getFooterText()",
      "simplifiedSignature": "getFooterText()",
      "datatype": {
        "id": "Auth.authconfiguration.getfootertext.String",
        "type": "datatype",
        "name": "String"
      },
      "description": "Returns the text at the bottom of the login page for a community.",
      "variables": {}
    },
    "getforgotpasswordurl()": {
      "id": "Auth.authconfiguration.getforgotpasswordurl",
      "type": "method",
      "name": "getForgotPasswordUrl",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getForgotPasswordUrl",
        "textToLower": "getforgotpasswordurl",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getForgotPasswordUrl_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public String getForgotPasswordUrl()",
      "simplifiedSignature": "getForgotPasswordUrl()",
      "datatype": {
        "id": "Auth.authconfiguration.getforgotpasswordurl.String",
        "type": "datatype",
        "name": "String"
      },
      "description": "Returns the URL for the standard or custom Forgot Password page that is specified for a community or portal by the administrator.",
      "variables": {}
    },
    "getlogourl()": {
      "id": "Auth.authconfiguration.getlogourl",
      "type": "method",
      "name": "getLogoUrl",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getLogoUrl",
        "textToLower": "getlogourl",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getLogoUrl_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public String getLogoUrl()",
      "simplifiedSignature": "getLogoUrl()",
      "datatype": {
        "id": "Auth.authconfiguration.getlogourl.String",
        "type": "datatype",
        "name": "String"
      },
      "description": "Returns the location of the icon image at the bottom of the login page for a community.",
      "variables": {}
    },
    "getrightframeurl()": {
      "id": "Auth.authconfiguration.getrightframeurl",
      "type": "method",
      "name": "getRightFrameUrl",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getRightFrameUrl",
        "textToLower": "getrightframeurl",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getRightFrameUrl_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public String getRightFrameUrl()",
      "simplifiedSignature": "getRightFrameUrl()",
      "datatype": {
        "id": "Auth.authconfiguration.getrightframeurl.String",
        "type": "datatype",
        "name": "String"
      },
      "description": "Returns the URL for the right-frame content to display on the right side of the community login page. The admin supplies the URL.",
      "variables": {}
    },
    "getsamlproviders()": {
      "id": "Auth.authconfiguration.getsamlproviders",
      "type": "method",
      "name": "getSamlProviders",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getSamlProviders",
        "textToLower": "getsamlproviders",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getSamlProviders_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public List<SamlSsoConfig> getSamlProviders()",
      "simplifiedSignature": "getSamlProviders()",
      "datatype": {
        "id": "Auth.authconfiguration.getsamlproviders.List<SamlSsoConfig>",
        "type": "datatype",
        "name": "List<SamlSsoConfig>"
      },
      "description": "Returns the list of SAML-based authentication providers available for a community or Salesforce My Domain subdomain.",
      "variables": {}
    },
    "getsamlssourl(string,string,string)": {
      "id": "Auth.authconfiguration.getsamlssourl",
      "type": "method",
      "name": "getSamlSsoUrl",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getSamlSsoUrl",
        "textToLower": "getsamlssourl",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getSamlSsoUrl_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static String getSamlSsoUrl(String communityUrl, String startURL, String samlId)",
      "simplifiedSignature": "getSamlSsoUrl(String,String,String)",
      "datatype": {
        "id": "Auth.authconfiguration.getsamlssourl.String",
        "type": "datatype",
        "name": "String"
      },
      "description": "Returns the single sign-on URL for a community or Salesforce My Domain subdomain.",
      "variables": {
        "communityUrl": {
          "id": "Auth.authconfiguration.getsamlssourl.communityurl",
          "type": "var",
          "name": "communityUrl",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "communityUrl",
            "textToLower": "communityurl",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_communityUrl_-1:0"
          },
          "signature": "String communityUrl",
          "datatype": {
            "id": "Auth.authconfiguration.getsamlssourl.string",
            "type": "datatype",
            "name": "String"
          }
        },
        "startURL": {
          "id": "Auth.authconfiguration.getsamlssourl.starturl",
          "type": "var",
          "name": "startURL",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "startURL",
            "textToLower": "starturl",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_startURL_-1:0"
          },
          "signature": "String startURL",
          "datatype": {
            "id": "Auth.authconfiguration.getsamlssourl.string",
            "type": "datatype",
            "name": "String"
          }
        },
        "samlId": {
          "id": "Auth.authconfiguration.getsamlssourl.samlid",
          "type": "var",
          "name": "samlId",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "samlId",
            "textToLower": "samlid",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_samlId_-1:0"
          },
          "signature": "String samlId",
          "datatype": {
            "id": "Auth.authconfiguration.getsamlssourl.string",
            "type": "datatype",
            "name": "String"
          }
        }
      }
    },
    "getselfregistrationenabled()": {
      "id": "Auth.authconfiguration.getselfregistrationenabled",
      "type": "method",
      "name": "getSelfRegistrationEnabled",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getSelfRegistrationEnabled",
        "textToLower": "getselfregistrationenabled",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getSelfRegistrationEnabled_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public Boolean getSelfRegistrationEnabled()",
      "simplifiedSignature": "getSelfRegistrationEnabled()",
      "datatype": {
        "id": "Auth.authconfiguration.getselfregistrationenabled.Boolean",
        "type": "datatype",
        "name": "Boolean"
      },
      "description": "Indicates whether the current community allows new users to create their own account by filling out a registration form.",
      "variables": {}
    },
    "getselfregistrationurl()": {
      "id": "Auth.authconfiguration.getselfregistrationurl",
      "type": "method",
      "name": "getSelfRegistrationUrl",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getSelfRegistrationUrl",
        "textToLower": "getselfregistrationurl",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getSelfRegistrationUrl_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public String getSelfRegistrationUrl()",
      "simplifiedSignature": "getSelfRegistrationUrl()",
      "datatype": {
        "id": "Auth.authconfiguration.getselfregistrationurl.String",
        "type": "datatype",
        "name": "String"
      },
      "description": "Returns the location of the self-registration page for new users to sign up for an account with a community.",
      "variables": {}
    },
    "getstarturl()": {
      "id": "Auth.authconfiguration.getstarturl",
      "type": "method",
      "name": "getStartUrl",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getStartUrl",
        "textToLower": "getstarturl",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getStartUrl_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public String getStartUrl()",
      "simplifiedSignature": "getStartUrl()",
      "datatype": {
        "id": "Auth.authconfiguration.getstarturl.String",
        "type": "datatype",
        "name": "String"
      },
      "description": "Returns the start page of a community or Salesforce My Domain subdomain. This URL is the first page that users see when they log in.",
      "variables": {}
    },
    "getusernamepasswordenabled()": {
      "id": "Auth.authconfiguration.getusernamepasswordenabled",
      "type": "method",
      "name": "getUsernamePasswordEnabled",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getUsernamePasswordEnabled",
        "textToLower": "getusernamepasswordenabled",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getUsernamePasswordEnabled_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public Boolean getUsernamePasswordEnabled()",
      "simplifiedSignature": "getUsernamePasswordEnabled()",
      "datatype": {
        "id": "Auth.authconfiguration.getusernamepasswordenabled.Boolean",
        "type": "datatype",
        "name": "Boolean"
      },
      "description": "Indicates whether the current community is set to display a login form asking for a username and password. You can configure the community not to request a username and password if it is for unauthenticated users or users logging in with a third-party authentication provider.",
      "variables": {}
    },
    "iscommunityusingsiteascontainer()": {
      "id": "Auth.authconfiguration.iscommunityusingsiteascontainer",
      "type": "method",
      "name": "isCommunityUsingSiteAsContainer",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "isCommunityUsingSiteAsContainer",
        "textToLower": "iscommunityusingsiteascontainer",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_isCommunityUsingSiteAsContainer_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public Boolean isCommunityUsingSiteAsContainer()",
      "simplifiedSignature": "isCommunityUsingSiteAsContainer()",
      "datatype": {
        "id": "Auth.authconfiguration.iscommunityusingsiteascontainer.Boolean",
        "type": "datatype",
        "name": "Boolean"
      },
      "description": "Returns true if the community uses Site.com pages; otherwise, returns false.",
      "variables": {}
    }
  },
  "constructors": {
    "authconfiguration(string,string)": {
      "id": "Auth.authconfiguration.authconfiguration",
      "type": "constructor",
      "name": "AuthConfiguration",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "AuthConfiguration",
        "textToLower": "authconfiguration",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_AuthConfiguration_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public AuthConfiguration(String communityOrCustomUrl, String startUrl)",
      "simplifiedSignature": "AuthConfiguration(String,String)",
      "datatype": {
        "id": "Auth.authconfiguration.authconfiguration.constructor",
        "type": "datatype",
        "name": "AuthConfiguration"
      },
      "description": "Creates an instance of the AuthConfiguration class using the specified URL for a community or a My Domain subdomain and the start URL for authenticated users.",
      "variables": {
        "communityOrCustomUrl": {
          "id": "Auth.authconfiguration.authconfiguration.communityorcustomurl",
          "type": "var",
          "name": "communityOrCustomUrl",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "communityOrCustomUrl",
            "textToLower": "communityorcustomurl",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_communityOrCustomUrl_-1:0"
          },
          "signature": "String communityOrCustomUrl",
          "datatype": {
            "id": "Auth.authconfiguration.authconfiguration.string",
            "type": "datatype",
            "name": "String"
          }
        },
        "startUrl": {
          "id": "Auth.authconfiguration.authconfiguration.starturl",
          "type": "var",
          "name": "startUrl",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "startUrl",
            "textToLower": "starturl",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_startUrl_-1:0"
          },
          "signature": "String startUrl",
          "datatype": {
            "id": "Auth.authconfiguration.authconfiguration.string",
            "type": "datatype",
            "name": "String"
          }
        }
      }
    },
    "authconfiguration(id,string)": {
      "id": "Auth.authconfiguration.authconfiguration",
      "type": "constructor",
      "name": "AuthConfiguration",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "AuthConfiguration",
        "textToLower": "authconfiguration",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_AuthConfiguration_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public AuthConfiguration(Id networkId, String startUrl)",
      "simplifiedSignature": "AuthConfiguration(Id,String)",
      "datatype": {
        "id": "Auth.authconfiguration.authconfiguration.constructor",
        "type": "datatype",
        "name": "AuthConfiguration"
      },
      "description": "Creates an instance of the AuthConfiguration class using the specified community ID and authenticated-user starting URL.",
      "variables": {
        "networkId": {
          "id": "Auth.authconfiguration.authconfiguration.networkid",
          "type": "var",
          "name": "networkId",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "networkId",
            "textToLower": "networkid",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_networkId_-1:0"
          },
          "signature": "Id networkId",
          "datatype": {
            "id": "Auth.authconfiguration.authconfiguration.id",
            "type": "datatype",
            "name": "Id"
          }
        },
        "startUrl": {
          "id": "Auth.authconfiguration.authconfiguration.starturl",
          "type": "var",
          "name": "startUrl",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "startUrl",
            "textToLower": "starturl",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_startUrl_-1:0"
          },
          "signature": "String startUrl",
          "datatype": {
            "id": "Auth.authconfiguration.authconfiguration.string",
            "type": "datatype",
            "name": "String"
          }
        }
      }
    }
  },
  "extendsType": "",
  "implementTypes": [],
  "implements": {}
}