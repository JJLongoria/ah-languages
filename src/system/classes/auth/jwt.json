{
  "id": "Auth.jwt",
  "type": "class",
  "name": "JWT",
  "namespace": "Auth",
  "startToken": {
    "type": "declaration.entity.name.class",
    "text": "JWT",
    "textToLower": "jwt",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "declaration.entity.name.class_JWT_-1:0"
  },
  "accessModifier": {
    "type": "keyword.modifier.access",
    "text": "global",
    "textToLower": "global",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "keyword.modifier.access_global_-1:0"
  },
  "sharingModifier": {
    "type": "keyword.modifier.sharing",
    "text": "without sharing",
    "textToLower": "without sharing",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "keyword.modifier.sharing_without sharing_-1:0"
  },
  "description": "Generates the JSON Claims Set in a JSON Web Token (JWT). The resulting Base64-encoded payload can be passed as an argument to create an instance of the Auth.JWS class.",
  "documentation": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_class_Auth_JWT.htm",
  "classes": {},
  "interfaces": {},
  "enums": {},
  "variables": {},
  "methods": {
    "clone()": {
      "id": "Auth.jwt.clone",
      "type": "method",
      "name": "clone",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "clone",
        "textToLower": "clone",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_clone_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public JWT clone()",
      "simplifiedSignature": "clone()",
      "datatype": {
        "id": "Auth.jwt.clone.JWT",
        "type": "datatype",
        "name": "JWT"
      },
      "description": "Makes a duplicate copy of the JWT object.",
      "variables": {}
    },
    "getadditionalclaims()": {
      "id": "Auth.jwt.getadditionalclaims",
      "type": "method",
      "name": "getAdditionalClaims",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getAdditionalClaims",
        "textToLower": "getadditionalclaims",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getAdditionalClaims_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public Map<String, ANY> getAdditionalClaims()",
      "simplifiedSignature": "getAdditionalClaims()",
      "datatype": {
        "id": "Auth.jwt.getadditionalclaims.Map<String, ANY>",
        "type": "datatype",
        "name": "Map<String, ANY>"
      },
      "description": "Returns a map of additional claims in the JWT, where the key string contains the name of the claim, and the value contains the value of the claim.",
      "variables": {}
    },
    "getaud()": {
      "id": "Auth.jwt.getaud",
      "type": "method",
      "name": "getAud",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getAud",
        "textToLower": "getaud",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getAud_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public String getAud()",
      "simplifiedSignature": "getAud()",
      "datatype": {
        "id": "Auth.jwt.getaud.String",
        "type": "datatype",
        "name": "String"
      },
      "description": "Returns the audience claim that identifies the intended recipients of the JWT.",
      "variables": {}
    },
    "getiss()": {
      "id": "Auth.jwt.getiss",
      "type": "method",
      "name": "getIss",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getIss",
        "textToLower": "getiss",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getIss_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public String getIss()",
      "simplifiedSignature": "getIss()",
      "datatype": {
        "id": "Auth.jwt.getiss.String",
        "type": "datatype",
        "name": "String"
      },
      "description": "Returns the issuer claim that identifies the issuer of the JWT.",
      "variables": {}
    },
    "getnbfclockskew()": {
      "id": "Auth.jwt.getnbfclockskew",
      "type": "method",
      "name": "getNbfClockSkew",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getNbfClockSkew",
        "textToLower": "getnbfclockskew",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getNbfClockSkew_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public Integer getNbfClockSkew()",
      "simplifiedSignature": "getNbfClockSkew()",
      "datatype": {
        "id": "Auth.jwt.getnbfclockskew.Integer",
        "type": "datatype",
        "name": "Integer"
      },
      "description": "Returns the not before claim that identifies the time before which the JWT must not be accepted for processing, while allowing some leeway for clock skew.",
      "variables": {}
    },
    "getsub()": {
      "id": "Auth.jwt.getsub",
      "type": "method",
      "name": "getSub",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getSub",
        "textToLower": "getsub",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getSub_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public String getSub()",
      "simplifiedSignature": "getSub()",
      "datatype": {
        "id": "Auth.jwt.getsub.String",
        "type": "datatype",
        "name": "String"
      },
      "description": "Returns the subject claim that identifies the current user of the JWT.",
      "variables": {}
    },
    "getvaliditylength()": {
      "id": "Auth.jwt.getvaliditylength",
      "type": "method",
      "name": "getValidityLength",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getValidityLength",
        "textToLower": "getvaliditylength",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getValidityLength_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public Integer getValidityLength()",
      "simplifiedSignature": "getValidityLength()",
      "datatype": {
        "id": "Auth.jwt.getvaliditylength.Integer",
        "type": "datatype",
        "name": "Integer"
      },
      "description": "Returns the length of time that the JWT is valid, which affects the expiration claim.",
      "variables": {}
    },
    "setadditionalclaims(map,any>)": {
      "id": "Auth.jwt.setadditionalclaims",
      "type": "method",
      "name": "setAdditionalClaims",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setAdditionalClaims",
        "textToLower": "setadditionalclaims",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setAdditionalClaims_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setAdditionalClaims(Map <String, ANY> additionalClaims)",
      "simplifiedSignature": "setAdditionalClaims(Map,ANY>)",
      "datatype": {
        "id": "Auth.jwt.setadditionalclaims.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Sets the additional claims in the JWT. Returned by the getAdditionalClaims() method.",
      "variables": {
        "<String": {
          "id": "Auth.jwt.setadditionalclaims.<string",
          "type": "var",
          "name": "<String",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "<String",
            "textToLower": "<string",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_<String_-1:0"
          },
          "signature": "Map <String",
          "datatype": {
            "id": "Auth.jwt.setadditionalclaims.map",
            "type": "datatype",
            "name": "Map"
          }
        },
        "additionalClaims": {
          "id": "Auth.jwt.setadditionalclaims.additionalclaims",
          "type": "var",
          "name": "additionalClaims",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "additionalClaims",
            "textToLower": "additionalclaims",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_additionalClaims_-1:0"
          },
          "signature": "ANY> additionalClaims",
          "datatype": {
            "id": "Auth.jwt.setadditionalclaims.any>",
            "type": "datatype",
            "name": "ANY>"
          }
        }
      }
    },
    "setaud(string)": {
      "id": "Auth.jwt.setaud",
      "type": "method",
      "name": "setAud",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setAud",
        "textToLower": "setaud",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setAud_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setAud(String aud)",
      "simplifiedSignature": "setAud(String)",
      "datatype": {
        "id": "Auth.jwt.setaud.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Sets the audience claim in the JWT. Returned by the getAud() method.",
      "variables": {
        "aud": {
          "id": "Auth.jwt.setaud.aud",
          "type": "var",
          "name": "aud",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "aud",
            "textToLower": "aud",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_aud_-1:0"
          },
          "signature": "String aud",
          "datatype": {
            "id": "Auth.jwt.setaud.string",
            "type": "datatype",
            "name": "String"
          }
        }
      }
    },
    "setiss(string)": {
      "id": "Auth.jwt.setiss",
      "type": "method",
      "name": "setIss",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setIss",
        "textToLower": "setiss",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setIss_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setIss(String iss)",
      "simplifiedSignature": "setIss(String)",
      "datatype": {
        "id": "Auth.jwt.setiss.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Sets the issuer claim in the JWT. Returned by the getIss() method.",
      "variables": {
        "iss": {
          "id": "Auth.jwt.setiss.iss",
          "type": "var",
          "name": "iss",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "iss",
            "textToLower": "iss",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_iss_-1:0"
          },
          "signature": "String iss",
          "datatype": {
            "id": "Auth.jwt.setiss.string",
            "type": "datatype",
            "name": "String"
          }
        }
      }
    },
    "setnbfclockskew(integer)": {
      "id": "Auth.jwt.setnbfclockskew",
      "type": "method",
      "name": "setNbfClockSkew",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setNbfClockSkew",
        "textToLower": "setnbfclockskew",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setNbfClockSkew_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setNbfClockSkew(Integer nbfClockSkew)",
      "simplifiedSignature": "setNbfClockSkew(Integer)",
      "datatype": {
        "id": "Auth.jwt.setnbfclockskew.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Sets the not before claim in the JWT. Returned by the getNbfClockSkew() method.",
      "variables": {
        "nbfClockSkew": {
          "id": "Auth.jwt.setnbfclockskew.nbfclockskew",
          "type": "var",
          "name": "nbfClockSkew",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "nbfClockSkew",
            "textToLower": "nbfclockskew",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_nbfClockSkew_-1:0"
          },
          "signature": "Integer nbfClockSkew",
          "datatype": {
            "id": "Auth.jwt.setnbfclockskew.integer",
            "type": "datatype",
            "name": "Integer"
          }
        }
      }
    },
    "setsub(string)": {
      "id": "Auth.jwt.setsub",
      "type": "method",
      "name": "setSub",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setSub",
        "textToLower": "setsub",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setSub_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setSub(String sub)",
      "simplifiedSignature": "setSub(String)",
      "datatype": {
        "id": "Auth.jwt.setsub.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Sets the subject claim in the JWT. Returned by the getSub() method.",
      "variables": {
        "sub": {
          "id": "Auth.jwt.setsub.sub",
          "type": "var",
          "name": "sub",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "sub",
            "textToLower": "sub",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_sub_-1:0"
          },
          "signature": "String sub",
          "datatype": {
            "id": "Auth.jwt.setsub.string",
            "type": "datatype",
            "name": "String"
          }
        }
      }
    },
    "setvaliditylength(integer)": {
      "id": "Auth.jwt.setvaliditylength",
      "type": "method",
      "name": "setValidityLength",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setValidityLength",
        "textToLower": "setvaliditylength",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setValidityLength_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setValidityLength(Integer validityLength)",
      "simplifiedSignature": "setValidityLength(Integer)",
      "datatype": {
        "id": "Auth.jwt.setvaliditylength.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Sets the length of time that the JWT is valid, which affects the expiration claim. Returned by the getValidityLength() method.",
      "variables": {
        "validityLength": {
          "id": "Auth.jwt.setvaliditylength.validitylength",
          "type": "var",
          "name": "validityLength",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "validityLength",
            "textToLower": "validitylength",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_validityLength_-1:0"
          },
          "signature": "Integer validityLength",
          "datatype": {
            "id": "Auth.jwt.setvaliditylength.integer",
            "type": "datatype",
            "name": "Integer"
          }
        }
      }
    },
    "tojsonstring()": {
      "id": "Auth.jwt.tojsonstring",
      "type": "method",
      "name": "toJSONString",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "toJSONString",
        "textToLower": "tojsonstring",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_toJSONString_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public String toJSONString()",
      "simplifiedSignature": "toJSONString()",
      "datatype": {
        "id": "Auth.jwt.tojsonstring.String",
        "type": "datatype",
        "name": "String"
      },
      "description": "Generates the JSON object representation of the Claims Set as an encoded JWT payload.",
      "variables": {}
    }
  },
  "constructors": {},
  "extendsType": "",
  "implementTypes": [],
  "implements": {}
}