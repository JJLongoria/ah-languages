{
  "id": "Auth.sessionmanagement",
  "nodeType": "class",
  "name": "SessionManagement",
  "namespace": "Auth",
  "startToken": {
    "type": "declaration.entity.name.class",
    "text": "SessionManagement",
    "textToLower": "sessionmanagement",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "declaration.entity.name.class_SessionManagement_-1:0"
  },
  "order": 0,
  "memberOrder": 0,
  "accessModifier": {
    "type": "keyword.modifier.access",
    "text": "global",
    "textToLower": "global",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "keyword.modifier.access_global_-1:0"
  },
  "sharingModifier": {
    "type": "keyword.modifier.sharing",
    "text": "without sharing",
    "textToLower": "without sharing",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "keyword.modifier.sharing_without sharing_-1:0"
  },
  "description": "Contains methods for verifying users’ identity, creating custom login flows, customizing security levels, and defining trusted IP ranges for a current session.",
  "documentation": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_class_Auth_SessionManagement.htm",
  "classes": {},
  "interfaces": {},
  "enums": {},
  "variables": {},
  "methods": {
    "finishlogindiscovery(auth.logindiscoverymethod,id)": {
      "id": "Auth.sessionmanagement.method.finishlogindiscovery(auth.logindiscoverymethod,id)",
      "nodeType": "method",
      "name": "finishLoginDiscovery",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "finishLoginDiscovery",
        "textToLower": "finishlogindiscovery",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_finishLoginDiscovery_-1:0"
      },
      "parentId": "Auth.sessionmanagement",
      "order": 1,
      "memberOrder": 1,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 7
          },
          "end": {
            "line": 0,
            "character": 13
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_static_0:7"
      },
      "signature": "public static System.PageReference finishLoginDiscovery(Auth.LoginDiscoveryMethod method, Id userId)",
      "overrideSignature": "public static override System.PageReference finishLoginDiscovery(Auth.LoginDiscoveryMethod method, Id userId)",
      "simplifiedSignature": "finishLoginDiscovery(Auth.LoginDiscoveryMethod,Id)",
      "datatype": {
        "id": "Auth.sessionmanagement.finishlogindiscovery.datatype.System.PageReference",
        "nodeType": "datatype",
        "name": "System.PageReference",
        "startToken": {
          "type": "datatype.support.class",
          "text": "System",
          "textToLower": "system",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 14
            },
            "end": {
              "line": 0,
              "character": 20
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_System_0:14"
        },
        "parentId": "Auth.sessionmanagement.finishlogindiscovery",
        "order": 0,
        "memberOrder": 0,
        "type": "System.PageReference"
      },
      "description": "Finishes the My Domain Login Discovery login process.",
      "parentName": "SessionManagement",
      "variables": {},
      "params": {
        "method": {
          "id": "Auth.sessionmanagement.method.finishlogindiscovery(auth.logindiscoverymethod,id).varParam.method",
          "nodeType": "variable",
          "name": "method",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "method",
            "textToLower": "method",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 82
              },
              "end": {
                "line": 0,
                "character": 88
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_method_0:82"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "method",
            "textToLower": "method",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 82
              },
              "end": {
                "line": 0,
                "character": 88
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_method_0:82"
          },
          "parentId": "Auth.sessionmanagement.method.finishlogindiscovery(auth.logindiscoverymethod,id)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Auth.sessionmanagement.finishlogindiscovery.datatype.Auth.LoginDiscoveryMethod",
            "nodeType": "datatype",
            "name": "Auth.LoginDiscoveryMethod",
            "startToken": {
              "type": "datatype.support.namespace",
              "text": "Auth",
              "textToLower": "auth",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 56
                },
                "end": {
                  "line": 0,
                  "character": 60
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_Auth_0:56"
            },
            "parentId": "Auth.sessionmanagement.finishlogindiscovery",
            "order": 0,
            "memberOrder": 0,
            "type": "Auth.LoginDiscoveryMethod"
          },
          "scope": null
        },
        "userid": {
          "id": "Auth.sessionmanagement.method.finishlogindiscovery(auth.logindiscoverymethod,id).varParam.userid",
          "nodeType": "variable",
          "name": "userId",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "userId",
            "textToLower": "userid",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 93
              },
              "end": {
                "line": 0,
                "character": 99
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_userId_0:93"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "userId",
            "textToLower": "userid",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 93
              },
              "end": {
                "line": 0,
                "character": 99
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_userId_0:93"
          },
          "parentId": "Auth.sessionmanagement.method.finishlogindiscovery(auth.logindiscoverymethod,id)",
          "order": 2,
          "memberOrder": 2,
          "datatype": {
            "id": "Auth.sessionmanagement.finishlogindiscovery.datatype.Id",
            "nodeType": "datatype",
            "name": "Id",
            "startToken": {
              "type": "datatype.primitive",
              "text": "Id",
              "textToLower": "id",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 90
                },
                "end": {
                  "line": 0,
                  "character": 92
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_Id_0:90"
            },
            "parentId": "Auth.sessionmanagement.finishlogindiscovery",
            "order": 0,
            "memberOrder": 0,
            "type": "Id"
          },
          "description": "Verification method used with My Domain Login Discovery. ID used to log in the user. The user must be active.",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "finishloginflow()": {
      "id": "Auth.sessionmanagement.method.finishloginflow()",
      "nodeType": "method",
      "name": "finishLoginFlow",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "finishLoginFlow",
        "textToLower": "finishloginflow",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_finishLoginFlow_-1:0"
      },
      "parentId": "Auth.sessionmanagement",
      "order": 2,
      "memberOrder": 2,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 7
          },
          "end": {
            "line": 0,
            "character": 13
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_static_0:7"
      },
      "signature": "public static System.PageReference finishLoginFlow()",
      "overrideSignature": "public static override System.PageReference finishLoginFlow()",
      "simplifiedSignature": "finishLoginFlow()",
      "datatype": {
        "id": "Auth.sessionmanagement.finishloginflow.datatype.System.PageReference",
        "nodeType": "datatype",
        "name": "System.PageReference",
        "startToken": {
          "type": "datatype.support.class",
          "text": "System",
          "textToLower": "system",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 14
            },
            "end": {
              "line": 0,
              "character": 20
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_System_0:14"
        },
        "parentId": "Auth.sessionmanagement.finishloginflow",
        "order": 0,
        "memberOrder": 0,
        "type": "System.PageReference"
      },
      "description": "Finish the Visualforce Page login flow process, and redirect the user to the default home page.",
      "parentName": "SessionManagement",
      "variables": {},
      "params": {},
      "queries": [],
      "exceptions": []
    },
    "finishloginflow(string)": {
      "id": "Auth.sessionmanagement.method.finishloginflow(string)",
      "nodeType": "method",
      "name": "finishLoginFlow",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "finishLoginFlow",
        "textToLower": "finishloginflow",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_finishLoginFlow_-1:0"
      },
      "parentId": "Auth.sessionmanagement",
      "order": 3,
      "memberOrder": 3,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 7
          },
          "end": {
            "line": 0,
            "character": 13
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_static_0:7"
      },
      "signature": "public static System.PageReference finishLoginFlow(String startUrl)",
      "overrideSignature": "public static override System.PageReference finishLoginFlow(String startUrl)",
      "simplifiedSignature": "finishLoginFlow(String)",
      "datatype": {
        "id": "Auth.sessionmanagement.finishloginflow.datatype.System.PageReference",
        "nodeType": "datatype",
        "name": "System.PageReference",
        "startToken": {
          "type": "datatype.support.class",
          "text": "System",
          "textToLower": "system",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 14
            },
            "end": {
              "line": 0,
              "character": 20
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_System_0:14"
        },
        "parentId": "Auth.sessionmanagement.finishloginflow",
        "order": 0,
        "memberOrder": 0,
        "type": "System.PageReference"
      },
      "description": "Finish the Visualforce Page login flow process, and redirect the user to the specified start URL.",
      "parentName": "SessionManagement",
      "variables": {},
      "params": {
        "starturl": {
          "id": "Auth.sessionmanagement.method.finishloginflow(string).varParam.starturl",
          "nodeType": "variable",
          "name": "startUrl",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "startUrl",
            "textToLower": "starturl",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 58
              },
              "end": {
                "line": 0,
                "character": 66
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_startUrl_0:58"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "startUrl",
            "textToLower": "starturl",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 58
              },
              "end": {
                "line": 0,
                "character": 66
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_startUrl_0:58"
          },
          "parentId": "Auth.sessionmanagement.method.finishloginflow(string)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Auth.sessionmanagement.finishloginflow.datatype.String",
            "nodeType": "datatype",
            "name": "String",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 51
                },
                "end": {
                  "line": 0,
                  "character": 57
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:51"
            },
            "parentId": "Auth.sessionmanagement.finishloginflow",
            "order": 0,
            "memberOrder": 0,
            "type": "String"
          },
          "description": "Path to the page that users see when they access the community.",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "generateverificationurl(auth.verificationpolicy,string,string)": {
      "id": "Auth.sessionmanagement.method.generateverificationurl(auth.verificationpolicy,string,string)",
      "nodeType": "method",
      "name": "generateVerificationUrl",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "generateVerificationUrl",
        "textToLower": "generateverificationurl",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_generateVerificationUrl_-1:0"
      },
      "parentId": "Auth.sessionmanagement",
      "order": 4,
      "memberOrder": 4,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 7
          },
          "end": {
            "line": 0,
            "character": 13
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_static_0:7"
      },
      "signature": "public static String generateVerificationUrl(Auth.VerificationPolicy policy, String description, String destinationUrl)",
      "overrideSignature": "public static override String generateVerificationUrl(Auth.VerificationPolicy policy, String description, String destinationUrl)",
      "simplifiedSignature": "generateVerificationUrl(Auth.VerificationPolicy,String,String)",
      "datatype": {
        "id": "Auth.sessionmanagement.generateverificationurl.datatype.String",
        "nodeType": "datatype",
        "name": "String",
        "startToken": {
          "type": "datatype.primitive",
          "text": "String",
          "textToLower": "string",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 14
            },
            "end": {
              "line": 0,
              "character": 20
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_String_0:14"
        },
        "parentId": "Auth.sessionmanagement.generateverificationurl",
        "order": 0,
        "memberOrder": 0,
        "type": "String"
      },
      "description": "Initiates a user identity verification flow with the verification method that the user registered with, and returns a URL to the identity verification screen. For example, if you have a custom Visualforce page that displays sensitive account details, you can prompt the user to verify identity before viewing it.",
      "parentName": "SessionManagement",
      "variables": {},
      "params": {
        "policy": {
          "id": "Auth.sessionmanagement.method.generateverificationurl(auth.verificationpolicy,string,string).varParam.policy",
          "nodeType": "variable",
          "name": "policy",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "policy",
            "textToLower": "policy",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 69
              },
              "end": {
                "line": 0,
                "character": 75
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_policy_0:69"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "policy",
            "textToLower": "policy",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 69
              },
              "end": {
                "line": 0,
                "character": 75
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_policy_0:69"
          },
          "parentId": "Auth.sessionmanagement.method.generateverificationurl(auth.verificationpolicy,string,string)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Auth.sessionmanagement.generateverificationurl.datatype.Auth.VerificationPolicy",
            "nodeType": "datatype",
            "name": "Auth.VerificationPolicy",
            "startToken": {
              "type": "datatype.support.namespace",
              "text": "Auth",
              "textToLower": "auth",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 45
                },
                "end": {
                  "line": 0,
                  "character": 49
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_Auth_0:45"
            },
            "parentId": "Auth.sessionmanagement.generateverificationurl",
            "order": 0,
            "memberOrder": 0,
            "type": "Auth.VerificationPolicy"
          },
          "scope": null
        },
        "description": {
          "id": "Auth.sessionmanagement.method.generateverificationurl(auth.verificationpolicy,string,string).varParam.description",
          "nodeType": "variable",
          "name": "description",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "description",
            "textToLower": "description",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 84
              },
              "end": {
                "line": 0,
                "character": 95
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_description_0:84"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "description",
            "textToLower": "description",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 84
              },
              "end": {
                "line": 0,
                "character": 95
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_description_0:84"
          },
          "parentId": "Auth.sessionmanagement.method.generateverificationurl(auth.verificationpolicy,string,string)",
          "order": 2,
          "memberOrder": 2,
          "datatype": {
            "id": "Auth.sessionmanagement.generateverificationurl.datatype.String",
            "nodeType": "datatype",
            "name": "String",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 77
                },
                "end": {
                  "line": 0,
                  "character": 83
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:77"
            },
            "parentId": "Auth.sessionmanagement.generateverificationurl",
            "order": 0,
            "memberOrder": 0,
            "type": "String"
          },
          "scope": null
        },
        "destinationurl": {
          "id": "Auth.sessionmanagement.method.generateverificationurl(auth.verificationpolicy,string,string).varParam.destinationurl",
          "nodeType": "variable",
          "name": "destinationUrl",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "destinationUrl",
            "textToLower": "destinationurl",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 104
              },
              "end": {
                "line": 0,
                "character": 118
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_destinationUrl_0:104"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "destinationUrl",
            "textToLower": "destinationurl",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 104
              },
              "end": {
                "line": 0,
                "character": 118
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_destinationUrl_0:104"
          },
          "parentId": "Auth.sessionmanagement.method.generateverificationurl(auth.verificationpolicy,string,string)",
          "order": 3,
          "memberOrder": 3,
          "datatype": {
            "id": "Auth.sessionmanagement.generateverificationurl.datatype.String",
            "nodeType": "datatype",
            "name": "String",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 97
                },
                "end": {
                  "line": 0,
                  "character": 103
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:97"
            },
            "parentId": "Auth.sessionmanagement.generateverificationurl",
            "order": 0,
            "memberOrder": 0,
            "type": "String"
          },
          "description": "The session security policy required to initiate identity verification for the user’s session. For example, if the policy is set to High Assurance level of session security, and the user’s current session has the standard level of session security, the user’s session is raised to high assurance after successful verification of identity. In the Setup user interface, this value is shown in the Triggered By column of Identity Verification History. The custom description that describes the activity requiring identity verification; for example, “Complete purchase and check out”. This text appears to users when they verify their identity in Salesforce and, if they use Salesforce Authenticator version 2 or later, in the Salesforce Authenticator mobile app. In addition, in the Setup user interface, this text is shown in the Activity Message column of Identity Verification History. The relative or absolute Salesforce URL that you want to redirect the user to after identity verification—for example, /apex/mypage. The user is redirected to destinationUrl when the identity verification flow is complete, regardless of success. For example, if a user chooses to not respond to the identity challenge and cancels it, the user is still redirected to destinationUrl. As a best practice, ensure that your code for this page manually checks that the security policy was satisfied (and the user didn’t just manually type the URL in the browser). For example, if the policy is High Assurance, the target page checks that the user's session is high assurance before allowing access.",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "getcurrentsession()": {
      "id": "Auth.sessionmanagement.method.getcurrentsession()",
      "nodeType": "method",
      "name": "getCurrentSession",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getCurrentSession",
        "textToLower": "getcurrentsession",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getCurrentSession_-1:0"
      },
      "parentId": "Auth.sessionmanagement",
      "order": 5,
      "memberOrder": 5,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 7
          },
          "end": {
            "line": 0,
            "character": 13
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_static_0:7"
      },
      "signature": "public static Map<String,String> getCurrentSession()",
      "overrideSignature": "public static override Map<String,String> getCurrentSession()",
      "simplifiedSignature": "getCurrentSession()",
      "datatype": {
        "id": "Auth.sessionmanagement.getcurrentsession.datatype.Map<String,String>",
        "nodeType": "datatype",
        "name": "Map<String,String>",
        "startToken": {
          "type": "datatype.collection",
          "text": "Map",
          "textToLower": "map",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 14
            },
            "end": {
              "line": 0,
              "character": 17
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Map_0:14"
        },
        "parentId": "Auth.sessionmanagement.getcurrentsession",
        "order": 0,
        "memberOrder": 0,
        "type": "Map",
        "value": {
          "id": "Auth.sessionmanagement.getcurrentsession.datatype.Map<String,String>.value.String",
          "nodeType": "datatype",
          "name": "String",
          "startToken": {
            "type": "datatype.primitive",
            "text": "String",
            "textToLower": "string",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 26
              },
              "end": {
                "line": 0,
                "character": 32
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_String_0:26"
          },
          "order": 0,
          "memberOrder": 0,
          "type": "String"
        },
        "key": {
          "id": "Auth.sessionmanagement.getcurrentsession.datatype.Map<String,String>.key.String",
          "nodeType": "datatype",
          "name": "String",
          "startToken": {
            "type": "datatype.primitive",
            "text": "String",
            "textToLower": "string",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 18
              },
              "end": {
                "line": 0,
                "character": 24
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_String_0:18"
          },
          "order": 0,
          "memberOrder": 0,
          "type": "String"
        }
      },
      "description": "Returns a map of attributes for the current session.",
      "parentName": "SessionManagement",
      "variables": {},
      "params": {},
      "queries": [],
      "exceptions": []
    },
    "getlightninglogineligibility(id)": {
      "id": "Auth.sessionmanagement.method.getlightninglogineligibility(id)",
      "nodeType": "method",
      "name": "getLightningLoginEligibility",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getLightningLoginEligibility",
        "textToLower": "getlightninglogineligibility",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getLightningLoginEligibility_-1:0"
      },
      "parentId": "Auth.sessionmanagement",
      "order": 6,
      "memberOrder": 6,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 7
          },
          "end": {
            "line": 0,
            "character": 13
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_static_0:7"
      },
      "signature": "public static Auth.LightningLoginEligibility getLightningLoginEligibility(Id userId)",
      "overrideSignature": "public static override Auth.LightningLoginEligibility getLightningLoginEligibility(Id userId)",
      "simplifiedSignature": "getLightningLoginEligibility(Id)",
      "datatype": {
        "id": "Auth.sessionmanagement.getlightninglogineligibility.datatype.Auth.LightningLoginEligibility",
        "nodeType": "datatype",
        "name": "Auth.LightningLoginEligibility",
        "startToken": {
          "type": "datatype.support.namespace",
          "text": "Auth",
          "textToLower": "auth",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 14
            },
            "end": {
              "line": 0,
              "character": 18
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Auth_0:14"
        },
        "parentId": "Auth.sessionmanagement.getlightninglogineligibility",
        "order": 0,
        "memberOrder": 0,
        "type": "Auth.LightningLoginEligibility"
      },
      "description": "Returns the eligibility status for a user who’s logging in with Lightning Login when you set up your org with My Domain and use the Login Discovery page type. Use this method to redirect the user to a custom login flow. For example, use after a login attempt to redirect the user to password flow if the user is ineligible for Lightning Login.",
      "parentName": "SessionManagement",
      "variables": {},
      "params": {
        "userid": {
          "id": "Auth.sessionmanagement.method.getlightninglogineligibility(id).varParam.userid",
          "nodeType": "variable",
          "name": "userId",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "userId",
            "textToLower": "userid",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 77
              },
              "end": {
                "line": 0,
                "character": 83
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_userId_0:77"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "userId",
            "textToLower": "userid",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 77
              },
              "end": {
                "line": 0,
                "character": 83
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_userId_0:77"
          },
          "parentId": "Auth.sessionmanagement.method.getlightninglogineligibility(id)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Auth.sessionmanagement.getlightninglogineligibility.datatype.Id",
            "nodeType": "datatype",
            "name": "Id",
            "startToken": {
              "type": "datatype.primitive",
              "text": "Id",
              "textToLower": "id",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 74
                },
                "end": {
                  "line": 0,
                  "character": 76
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_Id_0:74"
            },
            "parentId": "Auth.sessionmanagement.getlightninglogineligibility",
            "order": 0,
            "memberOrder": 0,
            "type": "Id"
          },
          "description": "ID of the user who is logging in.",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "getqrcode()": {
      "id": "Auth.sessionmanagement.method.getqrcode()",
      "nodeType": "method",
      "name": "getQrCode",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getQrCode",
        "textToLower": "getqrcode",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getQrCode_-1:0"
      },
      "parentId": "Auth.sessionmanagement",
      "order": 7,
      "memberOrder": 7,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 7
          },
          "end": {
            "line": 0,
            "character": 13
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_static_0:7"
      },
      "signature": "public static Map<String,String> getQrCode()",
      "overrideSignature": "public static override Map<String,String> getQrCode()",
      "simplifiedSignature": "getQrCode()",
      "datatype": {
        "id": "Auth.sessionmanagement.getqrcode.datatype.Map<String,String>",
        "nodeType": "datatype",
        "name": "Map<String,String>",
        "startToken": {
          "type": "datatype.collection",
          "text": "Map",
          "textToLower": "map",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 14
            },
            "end": {
              "line": 0,
              "character": 17
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Map_0:14"
        },
        "parentId": "Auth.sessionmanagement.getqrcode",
        "order": 0,
        "memberOrder": 0,
        "type": "Map",
        "value": {
          "id": "Auth.sessionmanagement.getqrcode.datatype.Map<String,String>.value.String",
          "nodeType": "datatype",
          "name": "String",
          "startToken": {
            "type": "datatype.primitive",
            "text": "String",
            "textToLower": "string",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 26
              },
              "end": {
                "line": 0,
                "character": 32
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_String_0:26"
          },
          "order": 0,
          "memberOrder": 0,
          "type": "String"
        },
        "key": {
          "id": "Auth.sessionmanagement.getqrcode.datatype.Map<String,String>.key.String",
          "nodeType": "datatype",
          "name": "String",
          "startToken": {
            "type": "datatype.primitive",
            "text": "String",
            "textToLower": "string",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 18
              },
              "end": {
                "line": 0,
                "character": 24
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_String_0:18"
          },
          "order": 0,
          "memberOrder": 0,
          "type": "String"
        }
      },
      "description": "Returns a map containing a URL to a quick response (QR) code and a time-based one-time password (TOTP) shared secret to configure two-factor authentication apps or devices.",
      "parentName": "SessionManagement",
      "variables": {},
      "params": {},
      "queries": [],
      "exceptions": []
    },
    "getrequiredsessionlevelforprofile(string)": {
      "id": "Auth.sessionmanagement.method.getrequiredsessionlevelforprofile(string)",
      "nodeType": "method",
      "name": "getRequiredSessionLevelForProfile",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getRequiredSessionLevelForProfile",
        "textToLower": "getrequiredsessionlevelforprofile",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getRequiredSessionLevelForProfile_-1:0"
      },
      "parentId": "Auth.sessionmanagement",
      "order": 8,
      "memberOrder": 8,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 7
          },
          "end": {
            "line": 0,
            "character": 13
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_static_0:7"
      },
      "signature": "public static Auth.SessionLevel getRequiredSessionLevelForProfile(String profileId)",
      "overrideSignature": "public static override Auth.SessionLevel getRequiredSessionLevelForProfile(String profileId)",
      "simplifiedSignature": "getRequiredSessionLevelForProfile(String)",
      "datatype": {
        "id": "Auth.sessionmanagement.getrequiredsessionlevelforprofile.datatype.Auth.SessionLevel",
        "nodeType": "datatype",
        "name": "Auth.SessionLevel",
        "startToken": {
          "type": "datatype.support.namespace",
          "text": "Auth",
          "textToLower": "auth",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 14
            },
            "end": {
              "line": 0,
              "character": 18
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Auth_0:14"
        },
        "parentId": "Auth.sessionmanagement.getrequiredsessionlevelforprofile",
        "order": 0,
        "memberOrder": 0,
        "type": "Auth.SessionLevel"
      },
      "description": "Indicates the required login security session level for the given profile.",
      "parentName": "SessionManagement",
      "variables": {},
      "params": {
        "profileid": {
          "id": "Auth.sessionmanagement.method.getrequiredsessionlevelforprofile(string).varParam.profileid",
          "nodeType": "variable",
          "name": "profileId",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "profileId",
            "textToLower": "profileid",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 73
              },
              "end": {
                "line": 0,
                "character": 82
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_profileId_0:73"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "profileId",
            "textToLower": "profileid",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 73
              },
              "end": {
                "line": 0,
                "character": 82
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_profileId_0:73"
          },
          "parentId": "Auth.sessionmanagement.method.getrequiredsessionlevelforprofile(string)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Auth.sessionmanagement.getrequiredsessionlevelforprofile.datatype.String",
            "nodeType": "datatype",
            "name": "String",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 66
                },
                "end": {
                  "line": 0,
                  "character": 72
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:66"
            },
            "parentId": "Auth.sessionmanagement.getrequiredsessionlevelforprofile",
            "order": 0,
            "memberOrder": 0,
            "type": "String"
          },
          "description": "The 15-character profile ID.",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "ignoreforconcurrentsessionlimit(object)": {
      "id": "Auth.sessionmanagement.method.ignoreforconcurrentsessionlimit(object)",
      "nodeType": "method",
      "name": "ignoreForConcurrentSessionLimit",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "ignoreForConcurrentSessionLimit",
        "textToLower": "ignoreforconcurrentsessionlimit",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_ignoreForConcurrentSessionLimit_-1:0"
      },
      "parentId": "Auth.sessionmanagement",
      "order": 9,
      "memberOrder": 9,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 7
          },
          "end": {
            "line": 0,
            "character": 13
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_static_0:7"
      },
      "signature": "public static Map<String,String> ignoreForConcurrentSessionLimit(Object sessions)",
      "overrideSignature": "public static override Map<String,String> ignoreForConcurrentSessionLimit(Object sessions)",
      "simplifiedSignature": "ignoreForConcurrentSessionLimit(Object)",
      "datatype": {
        "id": "Auth.sessionmanagement.ignoreforconcurrentsessionlimit.datatype.Map<String,String>",
        "nodeType": "datatype",
        "name": "Map<String,String>",
        "startToken": {
          "type": "datatype.collection",
          "text": "Map",
          "textToLower": "map",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 14
            },
            "end": {
              "line": 0,
              "character": 17
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Map_0:14"
        },
        "parentId": "Auth.sessionmanagement.ignoreforconcurrentsessionlimit",
        "order": 0,
        "memberOrder": 0,
        "type": "Map",
        "value": {
          "id": "Auth.sessionmanagement.ignoreforconcurrentsessionlimit.datatype.Map<String,String>.value.String",
          "nodeType": "datatype",
          "name": "String",
          "startToken": {
            "type": "datatype.primitive",
            "text": "String",
            "textToLower": "string",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 25
              },
              "end": {
                "line": 0,
                "character": 31
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_String_0:25"
          },
          "order": 0,
          "memberOrder": 0,
          "type": "String"
        },
        "key": {
          "id": "Auth.sessionmanagement.ignoreforconcurrentsessionlimit.datatype.Map<String,String>.key.String",
          "nodeType": "datatype",
          "name": "String",
          "startToken": {
            "type": "datatype.primitive",
            "text": "String",
            "textToLower": "string",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 18
              },
              "end": {
                "line": 0,
                "character": 24
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_String_0:18"
          },
          "order": 0,
          "memberOrder": 0,
          "type": "String"
        }
      },
      "description": "This method is reserved for internal Salesforce use.",
      "parentName": "SessionManagement",
      "variables": {},
      "params": {
        "sessions": {
          "id": "Auth.sessionmanagement.method.ignoreforconcurrentsessionlimit(object).varParam.sessions",
          "nodeType": "variable",
          "name": "sessions",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "sessions",
            "textToLower": "sessions",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 72
              },
              "end": {
                "line": 0,
                "character": 80
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_sessions_0:72"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "sessions",
            "textToLower": "sessions",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 72
              },
              "end": {
                "line": 0,
                "character": 80
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_sessions_0:72"
          },
          "parentId": "Auth.sessionmanagement.method.ignoreforconcurrentsessionlimit(object)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Auth.sessionmanagement.ignoreforconcurrentsessionlimit.datatype.Object",
            "nodeType": "datatype",
            "name": "Object",
            "startToken": {
              "type": "datatype.primitive",
              "text": "Object",
              "textToLower": "object",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 65
                },
                "end": {
                  "line": 0,
                  "character": 71
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_Object_0:65"
            },
            "parentId": "Auth.sessionmanagement.ignoreforconcurrentsessionlimit",
            "order": 0,
            "memberOrder": 0,
            "type": "Object"
          },
          "description": "",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "inorgnetworkrange(string)": {
      "id": "Auth.sessionmanagement.method.inorgnetworkrange(string)",
      "nodeType": "method",
      "name": "inOrgNetworkRange",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "inOrgNetworkRange",
        "textToLower": "inorgnetworkrange",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_inOrgNetworkRange_-1:0"
      },
      "parentId": "Auth.sessionmanagement",
      "order": 10,
      "memberOrder": 10,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 7
          },
          "end": {
            "line": 0,
            "character": 13
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_static_0:7"
      },
      "signature": "public static Boolean inOrgNetworkRange(String ipAddress)",
      "overrideSignature": "public static override Boolean inOrgNetworkRange(String ipAddress)",
      "simplifiedSignature": "inOrgNetworkRange(String)",
      "datatype": {
        "id": "Auth.sessionmanagement.inorgnetworkrange.datatype.Boolean",
        "nodeType": "datatype",
        "name": "Boolean",
        "startToken": {
          "type": "datatype.primitive",
          "text": "Boolean",
          "textToLower": "boolean",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 14
            },
            "end": {
              "line": 0,
              "character": 21
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Boolean_0:14"
        },
        "parentId": "Auth.sessionmanagement.inorgnetworkrange",
        "order": 0,
        "memberOrder": 0,
        "type": "Boolean"
      },
      "description": "Indicates whether the given IP address is within the organization's trusted IP range according to the organization's Network Access settings.",
      "parentName": "SessionManagement",
      "variables": {},
      "params": {
        "ipaddress": {
          "id": "Auth.sessionmanagement.method.inorgnetworkrange(string).varParam.ipaddress",
          "nodeType": "variable",
          "name": "ipAddress",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "ipAddress",
            "textToLower": "ipaddress",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 47
              },
              "end": {
                "line": 0,
                "character": 56
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_ipAddress_0:47"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "ipAddress",
            "textToLower": "ipaddress",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 47
              },
              "end": {
                "line": 0,
                "character": 56
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_ipAddress_0:47"
          },
          "parentId": "Auth.sessionmanagement.method.inorgnetworkrange(string)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Auth.sessionmanagement.inorgnetworkrange.datatype.String",
            "nodeType": "datatype",
            "name": "String",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 40
                },
                "end": {
                  "line": 0,
                  "character": 46
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:40"
            },
            "parentId": "Auth.sessionmanagement.inorgnetworkrange",
            "order": 0,
            "memberOrder": 0,
            "type": "String"
          },
          "description": "The IP address to validate.",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "isipallowedforprofile(string,string)": {
      "id": "Auth.sessionmanagement.method.isipallowedforprofile(string,string)",
      "nodeType": "method",
      "name": "isIpAllowedForProfile",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "isIpAllowedForProfile",
        "textToLower": "isipallowedforprofile",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_isIpAllowedForProfile_-1:0"
      },
      "parentId": "Auth.sessionmanagement",
      "order": 11,
      "memberOrder": 11,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 7
          },
          "end": {
            "line": 0,
            "character": 13
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_static_0:7"
      },
      "signature": "public static Boolean isIpAllowedForProfile(String profileId, String ipAddress)",
      "overrideSignature": "public static override Boolean isIpAllowedForProfile(String profileId, String ipAddress)",
      "simplifiedSignature": "isIpAllowedForProfile(String,String)",
      "datatype": {
        "id": "Auth.sessionmanagement.isipallowedforprofile.datatype.Boolean",
        "nodeType": "datatype",
        "name": "Boolean",
        "startToken": {
          "type": "datatype.primitive",
          "text": "Boolean",
          "textToLower": "boolean",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 14
            },
            "end": {
              "line": 0,
              "character": 21
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Boolean_0:14"
        },
        "parentId": "Auth.sessionmanagement.isipallowedforprofile",
        "order": 0,
        "memberOrder": 0,
        "type": "Boolean"
      },
      "description": "Indicates whether the given IP address is within the trusted IP range for the given profile.",
      "parentName": "SessionManagement",
      "variables": {},
      "params": {
        "profileid": {
          "id": "Auth.sessionmanagement.method.isipallowedforprofile(string,string).varParam.profileid",
          "nodeType": "variable",
          "name": "profileId",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "profileId",
            "textToLower": "profileid",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 51
              },
              "end": {
                "line": 0,
                "character": 60
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_profileId_0:51"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "profileId",
            "textToLower": "profileid",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 51
              },
              "end": {
                "line": 0,
                "character": 60
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_profileId_0:51"
          },
          "parentId": "Auth.sessionmanagement.method.isipallowedforprofile(string,string)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Auth.sessionmanagement.isipallowedforprofile.datatype.String",
            "nodeType": "datatype",
            "name": "String",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 44
                },
                "end": {
                  "line": 0,
                  "character": 50
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:44"
            },
            "parentId": "Auth.sessionmanagement.isipallowedforprofile",
            "order": 0,
            "memberOrder": 0,
            "type": "String"
          },
          "scope": null
        },
        "ipaddress": {
          "id": "Auth.sessionmanagement.method.isipallowedforprofile(string,string).varParam.ipaddress",
          "nodeType": "variable",
          "name": "ipAddress",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "ipAddress",
            "textToLower": "ipaddress",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 69
              },
              "end": {
                "line": 0,
                "character": 78
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_ipAddress_0:69"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "ipAddress",
            "textToLower": "ipaddress",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 69
              },
              "end": {
                "line": 0,
                "character": 78
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_ipAddress_0:69"
          },
          "parentId": "Auth.sessionmanagement.method.isipallowedforprofile(string,string)",
          "order": 2,
          "memberOrder": 2,
          "datatype": {
            "id": "Auth.sessionmanagement.isipallowedforprofile.datatype.String",
            "nodeType": "datatype",
            "name": "String",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 62
                },
                "end": {
                  "line": 0,
                  "character": 68
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:62"
            },
            "parentId": "Auth.sessionmanagement.isipallowedforprofile",
            "order": 0,
            "memberOrder": 0,
            "type": "String"
          },
          "description": "The 15-character alphanumeric string for the current user’s profile ID. The IP address to validate.",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "setsessionlevel(auth.sessionlevel)": {
      "id": "Auth.sessionmanagement.method.setsessionlevel(auth.sessionlevel)",
      "nodeType": "method",
      "name": "setSessionLevel",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setSessionLevel",
        "textToLower": "setsessionlevel",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setSessionLevel_-1:0"
      },
      "parentId": "Auth.sessionmanagement",
      "order": 12,
      "memberOrder": 12,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 7
          },
          "end": {
            "line": 0,
            "character": 13
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_static_0:7"
      },
      "signature": "public static Void setSessionLevel(Auth.SessionLevel level)",
      "overrideSignature": "public static override Void setSessionLevel(Auth.SessionLevel level)",
      "simplifiedSignature": "setSessionLevel(Auth.SessionLevel)",
      "datatype": {
        "id": "Auth.sessionmanagement.setsessionlevel.datatype.Void",
        "nodeType": "datatype",
        "name": "Void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "Void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 14
            },
            "end": {
              "line": 0,
              "character": 18
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Void_0:14"
        },
        "parentId": "Auth.sessionmanagement.setsessionlevel",
        "order": 0,
        "memberOrder": 0,
        "type": "Void"
      },
      "description": "Sets the user's current session security level.",
      "parentName": "SessionManagement",
      "variables": {},
      "params": {
        "level": {
          "id": "Auth.sessionmanagement.method.setsessionlevel(auth.sessionlevel).varParam.level",
          "nodeType": "variable",
          "name": "level",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "level",
            "textToLower": "level",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 53
              },
              "end": {
                "line": 0,
                "character": 58
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_level_0:53"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "level",
            "textToLower": "level",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 53
              },
              "end": {
                "line": 0,
                "character": 58
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_level_0:53"
          },
          "parentId": "Auth.sessionmanagement.method.setsessionlevel(auth.sessionlevel)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Auth.sessionmanagement.setsessionlevel.datatype.Auth.SessionLevel",
            "nodeType": "datatype",
            "name": "Auth.SessionLevel",
            "startToken": {
              "type": "datatype.support.namespace",
              "text": "Auth",
              "textToLower": "auth",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 35
                },
                "end": {
                  "line": 0,
                  "character": 39
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_Auth_0:35"
            },
            "parentId": "Auth.sessionmanagement.setsessionlevel",
            "order": 0,
            "memberOrder": 0,
            "type": "Auth.SessionLevel"
          },
          "description": "The session security level to assign to the user. The meaning of each level can be customized in the Session Settings for each organization, such as setting the High Assurance level to apply only to users who authenticated with two-factor authentication or through a specific identity provider.",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "validatetotptokenforkey(string,string)": {
      "id": "Auth.sessionmanagement.method.validatetotptokenforkey(string,string)",
      "nodeType": "method",
      "name": "validateTotpTokenForKey",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "validateTotpTokenForKey",
        "textToLower": "validatetotptokenforkey",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_validateTotpTokenForKey_-1:0"
      },
      "parentId": "Auth.sessionmanagement",
      "order": 13,
      "memberOrder": 13,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 7
          },
          "end": {
            "line": 0,
            "character": 13
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_static_0:7"
      },
      "signature": "public static Boolean validateTotpTokenForKey(String sharedKey, String totpCode)",
      "overrideSignature": "public static override Boolean validateTotpTokenForKey(String sharedKey, String totpCode)",
      "simplifiedSignature": "validateTotpTokenForKey(String,String)",
      "datatype": {
        "id": "Auth.sessionmanagement.validatetotptokenforkey.datatype.Boolean",
        "nodeType": "datatype",
        "name": "Boolean",
        "startToken": {
          "type": "datatype.primitive",
          "text": "Boolean",
          "textToLower": "boolean",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 14
            },
            "end": {
              "line": 0,
              "character": 21
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Boolean_0:14"
        },
        "parentId": "Auth.sessionmanagement.validatetotptokenforkey",
        "order": 0,
        "memberOrder": 0,
        "type": "Boolean"
      },
      "description": "Deprecated. Use validateTotpTokenForKey(totpSharedKey, totpCode, description) instead.",
      "parentName": "SessionManagement",
      "variables": {},
      "params": {
        "sharedkey": {
          "id": "Auth.sessionmanagement.method.validatetotptokenforkey(string,string).varParam.sharedkey",
          "nodeType": "variable",
          "name": "sharedKey",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "sharedKey",
            "textToLower": "sharedkey",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 53
              },
              "end": {
                "line": 0,
                "character": 62
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_sharedKey_0:53"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "sharedKey",
            "textToLower": "sharedkey",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 53
              },
              "end": {
                "line": 0,
                "character": 62
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_sharedKey_0:53"
          },
          "parentId": "Auth.sessionmanagement.method.validatetotptokenforkey(string,string)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Auth.sessionmanagement.validatetotptokenforkey.datatype.String",
            "nodeType": "datatype",
            "name": "String",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 46
                },
                "end": {
                  "line": 0,
                  "character": 52
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:46"
            },
            "parentId": "Auth.sessionmanagement.validatetotptokenforkey",
            "order": 0,
            "memberOrder": 0,
            "type": "String"
          },
          "scope": null
        },
        "totpcode": {
          "id": "Auth.sessionmanagement.method.validatetotptokenforkey(string,string).varParam.totpcode",
          "nodeType": "variable",
          "name": "totpCode",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "totpCode",
            "textToLower": "totpcode",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 71
              },
              "end": {
                "line": 0,
                "character": 79
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_totpCode_0:71"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "totpCode",
            "textToLower": "totpcode",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 71
              },
              "end": {
                "line": 0,
                "character": 79
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_totpCode_0:71"
          },
          "parentId": "Auth.sessionmanagement.method.validatetotptokenforkey(string,string)",
          "order": 2,
          "memberOrder": 2,
          "datatype": {
            "id": "Auth.sessionmanagement.validatetotptokenforkey.datatype.String",
            "nodeType": "datatype",
            "name": "String",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 64
                },
                "end": {
                  "line": 0,
                  "character": 70
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:64"
            },
            "parentId": "Auth.sessionmanagement.validatetotptokenforkey",
            "order": 0,
            "memberOrder": 0,
            "type": "String"
          },
          "description": "The shared (secret) key. The sharedKey must be a base32-encoded string of a 20-byte shared key. The time-based one-time password (TOTP) code to validate.",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "validatetotptokenforkey(string,string,string)": {
      "id": "Auth.sessionmanagement.method.validatetotptokenforkey(string,string,string)",
      "nodeType": "method",
      "name": "validateTotpTokenForKey",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "validateTotpTokenForKey",
        "textToLower": "validatetotptokenforkey",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_validateTotpTokenForKey_-1:0"
      },
      "parentId": "Auth.sessionmanagement",
      "order": 14,
      "memberOrder": 14,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 7
          },
          "end": {
            "line": 0,
            "character": 13
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_static_0:7"
      },
      "signature": "public static Boolean validateTotpTokenForKey(String totpSharedKey, String totpCode, String description)",
      "overrideSignature": "public static override Boolean validateTotpTokenForKey(String totpSharedKey, String totpCode, String description)",
      "simplifiedSignature": "validateTotpTokenForKey(String,String,String)",
      "datatype": {
        "id": "Auth.sessionmanagement.validatetotptokenforkey.datatype.Boolean",
        "nodeType": "datatype",
        "name": "Boolean",
        "startToken": {
          "type": "datatype.primitive",
          "text": "Boolean",
          "textToLower": "boolean",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 14
            },
            "end": {
              "line": 0,
              "character": 21
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Boolean_0:14"
        },
        "parentId": "Auth.sessionmanagement.validatetotptokenforkey",
        "order": 0,
        "memberOrder": 0,
        "type": "Boolean"
      },
      "description": "Indicates whether a time-based one-time password (TOTP) code (token) is valid for the given shared key.",
      "parentName": "SessionManagement",
      "variables": {},
      "params": {
        "totpsharedkey": {
          "id": "Auth.sessionmanagement.method.validatetotptokenforkey(string,string,string).varParam.totpsharedkey",
          "nodeType": "variable",
          "name": "totpSharedKey",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "totpSharedKey",
            "textToLower": "totpsharedkey",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 53
              },
              "end": {
                "line": 0,
                "character": 66
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_totpSharedKey_0:53"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "totpSharedKey",
            "textToLower": "totpsharedkey",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 53
              },
              "end": {
                "line": 0,
                "character": 66
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_totpSharedKey_0:53"
          },
          "parentId": "Auth.sessionmanagement.method.validatetotptokenforkey(string,string,string)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Auth.sessionmanagement.validatetotptokenforkey.datatype.String",
            "nodeType": "datatype",
            "name": "String",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 46
                },
                "end": {
                  "line": 0,
                  "character": 52
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:46"
            },
            "parentId": "Auth.sessionmanagement.validatetotptokenforkey",
            "order": 0,
            "memberOrder": 0,
            "type": "String"
          },
          "scope": null
        },
        "totpcode": {
          "id": "Auth.sessionmanagement.method.validatetotptokenforkey(string,string,string).varParam.totpcode",
          "nodeType": "variable",
          "name": "totpCode",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "totpCode",
            "textToLower": "totpcode",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 75
              },
              "end": {
                "line": 0,
                "character": 83
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_totpCode_0:75"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "totpCode",
            "textToLower": "totpcode",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 75
              },
              "end": {
                "line": 0,
                "character": 83
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_totpCode_0:75"
          },
          "parentId": "Auth.sessionmanagement.method.validatetotptokenforkey(string,string,string)",
          "order": 2,
          "memberOrder": 2,
          "datatype": {
            "id": "Auth.sessionmanagement.validatetotptokenforkey.datatype.String",
            "nodeType": "datatype",
            "name": "String",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 68
                },
                "end": {
                  "line": 0,
                  "character": 74
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:68"
            },
            "parentId": "Auth.sessionmanagement.validatetotptokenforkey",
            "order": 0,
            "memberOrder": 0,
            "type": "String"
          },
          "scope": null
        },
        "description": {
          "id": "Auth.sessionmanagement.method.validatetotptokenforkey(string,string,string).varParam.description",
          "nodeType": "variable",
          "name": "description",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "description",
            "textToLower": "description",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 92
              },
              "end": {
                "line": 0,
                "character": 103
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_description_0:92"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "description",
            "textToLower": "description",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 92
              },
              "end": {
                "line": 0,
                "character": 103
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_description_0:92"
          },
          "parentId": "Auth.sessionmanagement.method.validatetotptokenforkey(string,string,string)",
          "order": 3,
          "memberOrder": 3,
          "datatype": {
            "id": "Auth.sessionmanagement.validatetotptokenforkey.datatype.String",
            "nodeType": "datatype",
            "name": "String",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 85
                },
                "end": {
                  "line": 0,
                  "character": 91
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:85"
            },
            "parentId": "Auth.sessionmanagement.validatetotptokenforkey",
            "order": 0,
            "memberOrder": 0,
            "type": "String"
          },
          "description": "The shared (secret) key. The totpSharedKey must be a base32-encoded string of a 20-byte shared key. The time-based one-time password (TOTP) code to validate. The custom description that describes the activity requiring identity verification; for example, “Complete purchase and check out”. In the Setup user interface, this text is shown in the Activity Message column of Identity Verification History. The description must be 128 characters or fewer. If you provide a value that’s longer, it’s truncated to 128 characters.",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "validatetotptokenforuser(string)": {
      "id": "Auth.sessionmanagement.method.validatetotptokenforuser(string)",
      "nodeType": "method",
      "name": "validateTotpTokenForUser",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "validateTotpTokenForUser",
        "textToLower": "validatetotptokenforuser",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_validateTotpTokenForUser_-1:0"
      },
      "parentId": "Auth.sessionmanagement",
      "order": 15,
      "memberOrder": 15,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 7
          },
          "end": {
            "line": 0,
            "character": 13
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_static_0:7"
      },
      "signature": "public static Boolean validateTotpTokenForUser(String totpCode)",
      "overrideSignature": "public static override Boolean validateTotpTokenForUser(String totpCode)",
      "simplifiedSignature": "validateTotpTokenForUser(String)",
      "datatype": {
        "id": "Auth.sessionmanagement.validatetotptokenforuser.datatype.Boolean",
        "nodeType": "datatype",
        "name": "Boolean",
        "startToken": {
          "type": "datatype.primitive",
          "text": "Boolean",
          "textToLower": "boolean",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 14
            },
            "end": {
              "line": 0,
              "character": 21
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Boolean_0:14"
        },
        "parentId": "Auth.sessionmanagement.validatetotptokenforuser",
        "order": 0,
        "memberOrder": 0,
        "type": "Boolean"
      },
      "description": "Deprecated. Use validateTotpTokenForUser(totpCode, description) instead.",
      "parentName": "SessionManagement",
      "variables": {},
      "params": {
        "totpcode": {
          "id": "Auth.sessionmanagement.method.validatetotptokenforuser(string).varParam.totpcode",
          "nodeType": "variable",
          "name": "totpCode",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "totpCode",
            "textToLower": "totpcode",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 54
              },
              "end": {
                "line": 0,
                "character": 62
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_totpCode_0:54"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "totpCode",
            "textToLower": "totpcode",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 54
              },
              "end": {
                "line": 0,
                "character": 62
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_totpCode_0:54"
          },
          "parentId": "Auth.sessionmanagement.method.validatetotptokenforuser(string)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Auth.sessionmanagement.validatetotptokenforuser.datatype.String",
            "nodeType": "datatype",
            "name": "String",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 47
                },
                "end": {
                  "line": 0,
                  "character": 53
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:47"
            },
            "parentId": "Auth.sessionmanagement.validatetotptokenforuser",
            "order": 0,
            "memberOrder": 0,
            "type": "String"
          },
          "description": "The time-based one-time password (TOTP) code to validate.",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "validatetotptokenforuser(string,string)": {
      "id": "Auth.sessionmanagement.method.validatetotptokenforuser(string,string)",
      "nodeType": "method",
      "name": "validateTotpTokenForUser",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "validateTotpTokenForUser",
        "textToLower": "validatetotptokenforuser",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_validateTotpTokenForUser_-1:0"
      },
      "parentId": "Auth.sessionmanagement",
      "order": 16,
      "memberOrder": 16,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 7
          },
          "end": {
            "line": 0,
            "character": 13
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_static_0:7"
      },
      "signature": "public static Boolean validateTotpTokenForUser(String totpCode, String description)",
      "overrideSignature": "public static override Boolean validateTotpTokenForUser(String totpCode, String description)",
      "simplifiedSignature": "validateTotpTokenForUser(String,String)",
      "datatype": {
        "id": "Auth.sessionmanagement.validatetotptokenforuser.datatype.Boolean",
        "nodeType": "datatype",
        "name": "Boolean",
        "startToken": {
          "type": "datatype.primitive",
          "text": "Boolean",
          "textToLower": "boolean",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 14
            },
            "end": {
              "line": 0,
              "character": 21
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Boolean_0:14"
        },
        "parentId": "Auth.sessionmanagement.validatetotptokenforuser",
        "order": 0,
        "memberOrder": 0,
        "type": "Boolean"
      },
      "description": "Indicates whether a time-based one-time password (TOTP) code (token) is valid for the current user.",
      "parentName": "SessionManagement",
      "variables": {},
      "params": {
        "totpcode": {
          "id": "Auth.sessionmanagement.method.validatetotptokenforuser(string,string).varParam.totpcode",
          "nodeType": "variable",
          "name": "totpCode",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "totpCode",
            "textToLower": "totpcode",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 54
              },
              "end": {
                "line": 0,
                "character": 62
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_totpCode_0:54"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "totpCode",
            "textToLower": "totpcode",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 54
              },
              "end": {
                "line": 0,
                "character": 62
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_totpCode_0:54"
          },
          "parentId": "Auth.sessionmanagement.method.validatetotptokenforuser(string,string)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Auth.sessionmanagement.validatetotptokenforuser.datatype.String",
            "nodeType": "datatype",
            "name": "String",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 47
                },
                "end": {
                  "line": 0,
                  "character": 53
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:47"
            },
            "parentId": "Auth.sessionmanagement.validatetotptokenforuser",
            "order": 0,
            "memberOrder": 0,
            "type": "String"
          },
          "scope": null
        },
        "description": {
          "id": "Auth.sessionmanagement.method.validatetotptokenforuser(string,string).varParam.description",
          "nodeType": "variable",
          "name": "description",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "description",
            "textToLower": "description",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 71
              },
              "end": {
                "line": 0,
                "character": 82
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_description_0:71"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "description",
            "textToLower": "description",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 71
              },
              "end": {
                "line": 0,
                "character": 82
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_description_0:71"
          },
          "parentId": "Auth.sessionmanagement.method.validatetotptokenforuser(string,string)",
          "order": 2,
          "memberOrder": 2,
          "datatype": {
            "id": "Auth.sessionmanagement.validatetotptokenforuser.datatype.String",
            "nodeType": "datatype",
            "name": "String",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 64
                },
                "end": {
                  "line": 0,
                  "character": 70
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:64"
            },
            "parentId": "Auth.sessionmanagement.validatetotptokenforuser",
            "order": 0,
            "memberOrder": 0,
            "type": "String"
          },
          "description": "The time-based one-time password (TOTP) code to validate. The custom description that describes the activity requiring identity verification; for example, “Complete purchase and check out”. This text appears to users when they verify their identity in Salesforce and, if they use Salesforce Authenticator version 2 or later, in the Salesforce Authenticator mobile app. In addition, in the Setup user interface, this text is shown in the Activity Message column of Identity Verification History. The description must be 128 characters or fewer. If you provide a value that’s longer, it’s truncated to 128 characters.",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    }
  },
  "constructors": {},
  "extendsType": "",
  "implementTypes": [],
  "implements": {},
  "totalMembers": 16,
  "queries": []
}