{
  "id": "Auth.sessionmanagement",
  "type": "class",
  "name": "SessionManagement",
  "namespace": "Auth",
  "startToken": {
    "type": "declaration.entity.name.class",
    "text": "SessionManagement",
    "textToLower": "sessionmanagement",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "declaration.entity.name.class_SessionManagement_-1:0"
  },
  "accessModifier": {
    "type": "keyword.modifier.access",
    "text": "global",
    "textToLower": "global",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "keyword.modifier.access_global_-1:0"
  },
  "sharingModifier": {
    "type": "keyword.modifier.sharing",
    "text": "without sharing",
    "textToLower": "without sharing",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "keyword.modifier.sharing_without sharing_-1:0"
  },
  "description": "Contains methods for verifying usersâ€™ identity, creating custom login flows, customizing security levels, and defining trusted IP ranges for a current session.",
  "documentation": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_class_Auth_SessionManagement.htm",
  "classes": {},
  "interfaces": {},
  "enums": {},
  "variables": {},
  "methods": {
    "finishlogindiscovery(auth.logindiscoverymethod,id)": {
      "id": "Auth.sessionmanagement.finishlogindiscovery",
      "type": "method",
      "name": "finishLoginDiscovery",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "finishLoginDiscovery",
        "textToLower": "finishlogindiscovery",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_finishLoginDiscovery_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static System.PageReference finishLoginDiscovery(Auth.LoginDiscoveryMethod method, Id userId)",
      "simplifiedSignature": "finishLoginDiscovery(Auth.LoginDiscoveryMethod,Id)",
      "datatype": {
        "id": "Auth.sessionmanagement.finishlogindiscovery.System.PageReference",
        "type": "datatype",
        "name": "System.PageReference"
      },
      "description": "Finishes the My Domain Login Discovery login process.",
      "variables": {
        "method": {
          "id": "Auth.sessionmanagement.finishlogindiscovery.method",
          "type": "var",
          "name": "method",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "method",
            "textToLower": "method",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_method_-1:0"
          },
          "signature": "Auth.LoginDiscoveryMethod method",
          "datatype": {
            "id": "Auth.sessionmanagement.finishlogindiscovery.auth.logindiscoverymethod",
            "type": "datatype",
            "name": "Auth.LoginDiscoveryMethod"
          }
        },
        "userId": {
          "id": "Auth.sessionmanagement.finishlogindiscovery.userid",
          "type": "var",
          "name": "userId",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "userId",
            "textToLower": "userid",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_userId_-1:0"
          },
          "signature": "Id userId",
          "datatype": {
            "id": "Auth.sessionmanagement.finishlogindiscovery.id",
            "type": "datatype",
            "name": "Id"
          }
        }
      }
    },
    "finishloginflow()": {
      "id": "Auth.sessionmanagement.finishloginflow",
      "type": "method",
      "name": "finishLoginFlow",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "finishLoginFlow",
        "textToLower": "finishloginflow",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_finishLoginFlow_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static System.PageReference finishLoginFlow()",
      "simplifiedSignature": "finishLoginFlow()",
      "datatype": {
        "id": "Auth.sessionmanagement.finishloginflow.System.PageReference",
        "type": "datatype",
        "name": "System.PageReference"
      },
      "description": "Finish the Visualforce Page login flow process, and redirect the user to the default home page.",
      "variables": {}
    },
    "finishloginflow(string)": {
      "id": "Auth.sessionmanagement.finishloginflow",
      "type": "method",
      "name": "finishLoginFlow",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "finishLoginFlow",
        "textToLower": "finishloginflow",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_finishLoginFlow_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static System.PageReference finishLoginFlow(String startUrl)",
      "simplifiedSignature": "finishLoginFlow(String)",
      "datatype": {
        "id": "Auth.sessionmanagement.finishloginflow.System.PageReference",
        "type": "datatype",
        "name": "System.PageReference"
      },
      "description": "Finish the Visualforce Page login flow process, and redirect the user to the specified start URL.",
      "variables": {
        "startUrl": {
          "id": "Auth.sessionmanagement.finishloginflow.starturl",
          "type": "var",
          "name": "startUrl",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "startUrl",
            "textToLower": "starturl",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_startUrl_-1:0"
          },
          "signature": "String startUrl",
          "datatype": {
            "id": "Auth.sessionmanagement.finishloginflow.string",
            "type": "datatype",
            "name": "String"
          }
        }
      }
    },
    "generateverificationurl(auth.verificationpolicy,string,string)": {
      "id": "Auth.sessionmanagement.generateverificationurl",
      "type": "method",
      "name": "generateVerificationUrl",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "generateVerificationUrl",
        "textToLower": "generateverificationurl",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_generateVerificationUrl_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static String generateVerificationUrl(Auth.VerificationPolicy policy, String description, String destinationUrl)",
      "simplifiedSignature": "generateVerificationUrl(Auth.VerificationPolicy,String,String)",
      "datatype": {
        "id": "Auth.sessionmanagement.generateverificationurl.String",
        "type": "datatype",
        "name": "String"
      },
      "description": "Initiates a user identity verification flow with the verification method that the user registered with, and returns a URL to the identity verification screen. For example, if you have a custom Visualforce page that displays sensitive account details, you can prompt the user to verify identity before viewing it.",
      "variables": {
        "policy": {
          "id": "Auth.sessionmanagement.generateverificationurl.policy",
          "type": "var",
          "name": "policy",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "policy",
            "textToLower": "policy",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_policy_-1:0"
          },
          "signature": "Auth.VerificationPolicy policy",
          "datatype": {
            "id": "Auth.sessionmanagement.generateverificationurl.auth.verificationpolicy",
            "type": "datatype",
            "name": "Auth.VerificationPolicy"
          }
        },
        "description": {
          "id": "Auth.sessionmanagement.generateverificationurl.description",
          "type": "var",
          "name": "description",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "description",
            "textToLower": "description",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_description_-1:0"
          },
          "signature": "String description",
          "datatype": {
            "id": "Auth.sessionmanagement.generateverificationurl.string",
            "type": "datatype",
            "name": "String"
          }
        },
        "destinationUrl": {
          "id": "Auth.sessionmanagement.generateverificationurl.destinationurl",
          "type": "var",
          "name": "destinationUrl",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "destinationUrl",
            "textToLower": "destinationurl",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_destinationUrl_-1:0"
          },
          "signature": "String destinationUrl",
          "datatype": {
            "id": "Auth.sessionmanagement.generateverificationurl.string",
            "type": "datatype",
            "name": "String"
          }
        }
      }
    },
    "getcurrentsession()": {
      "id": "Auth.sessionmanagement.getcurrentsession",
      "type": "method",
      "name": "getCurrentSession",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getCurrentSession",
        "textToLower": "getcurrentsession",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getCurrentSession_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static Map<String,  String> getCurrentSession()",
      "simplifiedSignature": "getCurrentSession()",
      "datatype": {
        "id": "Auth.sessionmanagement.getcurrentsession.Map<String,  String>",
        "type": "datatype",
        "name": "Map<String,  String>"
      },
      "description": "Returns a map of attributes for the current session.",
      "variables": {}
    },
    "getlightninglogineligibility(id)": {
      "id": "Auth.sessionmanagement.getlightninglogineligibility",
      "type": "method",
      "name": "getLightningLoginEligibility",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getLightningLoginEligibility",
        "textToLower": "getlightninglogineligibility",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getLightningLoginEligibility_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static Auth.LightningLoginEligibility getLightningLoginEligibility(Id userId)",
      "simplifiedSignature": "getLightningLoginEligibility(Id)",
      "datatype": {
        "id": "Auth.sessionmanagement.getlightninglogineligibility.Auth.LightningLoginEligibility",
        "type": "datatype",
        "name": "Auth.LightningLoginEligibility"
      },
      "description": "Returns the eligibility status for a user whoâ€™s logging in with Lightning Login when you set up your org with My Domain and use the Login Discovery page type. Use this method to redirect the user to a custom login flow. For example, use after a login attempt to redirect the user to password flow if the user is ineligible for Lightning Login.",
      "variables": {
        "userId": {
          "id": "Auth.sessionmanagement.getlightninglogineligibility.userid",
          "type": "var",
          "name": "userId",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "userId",
            "textToLower": "userid",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_userId_-1:0"
          },
          "signature": "Id userId",
          "datatype": {
            "id": "Auth.sessionmanagement.getlightninglogineligibility.id",
            "type": "datatype",
            "name": "Id"
          }
        }
      }
    },
    "getqrcode()": {
      "id": "Auth.sessionmanagement.getqrcode",
      "type": "method",
      "name": "getQrCode",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getQrCode",
        "textToLower": "getqrcode",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getQrCode_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static Map<String,  String> getQrCode()",
      "simplifiedSignature": "getQrCode()",
      "datatype": {
        "id": "Auth.sessionmanagement.getqrcode.Map<String,  String>",
        "type": "datatype",
        "name": "Map<String,  String>"
      },
      "description": "Returns a map containing a URL to a quick response (QR) code and a time-based one-time password (TOTP) shared secret to configure two-factor authentication apps or devices.",
      "variables": {}
    },
    "getrequiredsessionlevelforprofile(string)": {
      "id": "Auth.sessionmanagement.getrequiredsessionlevelforprofile",
      "type": "method",
      "name": "getRequiredSessionLevelForProfile",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getRequiredSessionLevelForProfile",
        "textToLower": "getrequiredsessionlevelforprofile",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getRequiredSessionLevelForProfile_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static Auth.SessionLevel getRequiredSessionLevelForProfile(String profileId)",
      "simplifiedSignature": "getRequiredSessionLevelForProfile(String)",
      "datatype": {
        "id": "Auth.sessionmanagement.getrequiredsessionlevelforprofile.Auth.SessionLevel",
        "type": "datatype",
        "name": "Auth.SessionLevel"
      },
      "description": "Indicates the required login security session level for the given profile.",
      "variables": {
        "profileId": {
          "id": "Auth.sessionmanagement.getrequiredsessionlevelforprofile.profileid",
          "type": "var",
          "name": "profileId",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "profileId",
            "textToLower": "profileid",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_profileId_-1:0"
          },
          "signature": "String profileId",
          "datatype": {
            "id": "Auth.sessionmanagement.getrequiredsessionlevelforprofile.string",
            "type": "datatype",
            "name": "String"
          }
        }
      }
    },
    "ignoreforconcurrentsessionlimit(object)": {
      "id": "Auth.sessionmanagement.ignoreforconcurrentsessionlimit",
      "type": "method",
      "name": "ignoreForConcurrentSessionLimit",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "ignoreForConcurrentSessionLimit",
        "textToLower": "ignoreforconcurrentsessionlimit",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_ignoreForConcurrentSessionLimit_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static Map<String,  String> ignoreForConcurrentSessionLimit(Object sessions)",
      "simplifiedSignature": "ignoreForConcurrentSessionLimit(Object)",
      "datatype": {
        "id": "Auth.sessionmanagement.ignoreforconcurrentsessionlimit.Map<String,  String>",
        "type": "datatype",
        "name": "Map<String,  String>"
      },
      "description": "This method is reserved for internal Salesforce use.",
      "variables": {
        "sessions": {
          "id": "Auth.sessionmanagement.ignoreforconcurrentsessionlimit.sessions",
          "type": "var",
          "name": "sessions",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "sessions",
            "textToLower": "sessions",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_sessions_-1:0"
          },
          "signature": "Object sessions",
          "datatype": {
            "id": "Auth.sessionmanagement.ignoreforconcurrentsessionlimit.object",
            "type": "datatype",
            "name": "Object"
          }
        }
      }
    },
    "inorgnetworkrange(string)": {
      "id": "Auth.sessionmanagement.inorgnetworkrange",
      "type": "method",
      "name": "inOrgNetworkRange",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "inOrgNetworkRange",
        "textToLower": "inorgnetworkrange",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_inOrgNetworkRange_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static Boolean inOrgNetworkRange(String ipAddress)",
      "simplifiedSignature": "inOrgNetworkRange(String)",
      "datatype": {
        "id": "Auth.sessionmanagement.inorgnetworkrange.Boolean",
        "type": "datatype",
        "name": "Boolean"
      },
      "description": "Indicates whether the given IP address is within the organization's trusted IP range according to the organization's Network Access settings.",
      "variables": {
        "ipAddress": {
          "id": "Auth.sessionmanagement.inorgnetworkrange.ipaddress",
          "type": "var",
          "name": "ipAddress",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "ipAddress",
            "textToLower": "ipaddress",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_ipAddress_-1:0"
          },
          "signature": "String ipAddress",
          "datatype": {
            "id": "Auth.sessionmanagement.inorgnetworkrange.string",
            "type": "datatype",
            "name": "String"
          }
        }
      }
    },
    "isipallowedforprofile(string,string)": {
      "id": "Auth.sessionmanagement.isipallowedforprofile",
      "type": "method",
      "name": "isIpAllowedForProfile",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "isIpAllowedForProfile",
        "textToLower": "isipallowedforprofile",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_isIpAllowedForProfile_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static Boolean isIpAllowedForProfile(String profileId, String ipAddress)",
      "simplifiedSignature": "isIpAllowedForProfile(String,String)",
      "datatype": {
        "id": "Auth.sessionmanagement.isipallowedforprofile.Boolean",
        "type": "datatype",
        "name": "Boolean"
      },
      "description": "Indicates whether the given IP address is within the trusted IP range for the given profile.",
      "variables": {
        "profileId": {
          "id": "Auth.sessionmanagement.isipallowedforprofile.profileid",
          "type": "var",
          "name": "profileId",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "profileId",
            "textToLower": "profileid",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_profileId_-1:0"
          },
          "signature": "String profileId",
          "datatype": {
            "id": "Auth.sessionmanagement.isipallowedforprofile.string",
            "type": "datatype",
            "name": "String"
          }
        },
        "ipAddress": {
          "id": "Auth.sessionmanagement.isipallowedforprofile.ipaddress",
          "type": "var",
          "name": "ipAddress",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "ipAddress",
            "textToLower": "ipaddress",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_ipAddress_-1:0"
          },
          "signature": "String ipAddress",
          "datatype": {
            "id": "Auth.sessionmanagement.isipallowedforprofile.string",
            "type": "datatype",
            "name": "String"
          }
        }
      }
    },
    "setsessionlevel(auth.sessionlevel)": {
      "id": "Auth.sessionmanagement.setsessionlevel",
      "type": "method",
      "name": "setSessionLevel",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setSessionLevel",
        "textToLower": "setsessionlevel",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setSessionLevel_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static void setSessionLevel(Auth.SessionLevel level)",
      "simplifiedSignature": "setSessionLevel(Auth.SessionLevel)",
      "datatype": {
        "id": "Auth.sessionmanagement.setsessionlevel.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Sets the user's current session security level.",
      "variables": {
        "level": {
          "id": "Auth.sessionmanagement.setsessionlevel.level",
          "type": "var",
          "name": "level",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "level",
            "textToLower": "level",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_level_-1:0"
          },
          "signature": "Auth.SessionLevel level",
          "datatype": {
            "id": "Auth.sessionmanagement.setsessionlevel.auth.sessionlevel",
            "type": "datatype",
            "name": "Auth.SessionLevel"
          }
        }
      }
    },
    "validatetotptokenforkey(string,string)": {
      "id": "Auth.sessionmanagement.validatetotptokenforkey",
      "type": "method",
      "name": "validateTotpTokenForKey",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "validateTotpTokenForKey",
        "textToLower": "validatetotptokenforkey",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_validateTotpTokenForKey_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static Boolean validateTotpTokenForKey(String sharedKey, String totpCode)",
      "simplifiedSignature": "validateTotpTokenForKey(String,String)",
      "datatype": {
        "id": "Auth.sessionmanagement.validatetotptokenforkey.Boolean",
        "type": "datatype",
        "name": "Boolean"
      },
      "description": "Deprecated. Use validateTotpTokenForKey(totpSharedKey, totpCode, description) instead.",
      "variables": {
        "sharedKey": {
          "id": "Auth.sessionmanagement.validatetotptokenforkey.sharedkey",
          "type": "var",
          "name": "sharedKey",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "sharedKey",
            "textToLower": "sharedkey",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_sharedKey_-1:0"
          },
          "signature": "String sharedKey",
          "datatype": {
            "id": "Auth.sessionmanagement.validatetotptokenforkey.string",
            "type": "datatype",
            "name": "String"
          }
        },
        "totpCode": {
          "id": "Auth.sessionmanagement.validatetotptokenforkey.totpcode",
          "type": "var",
          "name": "totpCode",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "totpCode",
            "textToLower": "totpcode",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_totpCode_-1:0"
          },
          "signature": "String totpCode",
          "datatype": {
            "id": "Auth.sessionmanagement.validatetotptokenforkey.string",
            "type": "datatype",
            "name": "String"
          }
        }
      }
    },
    "validatetotptokenforkey(string,string,string)": {
      "id": "Auth.sessionmanagement.validatetotptokenforkey",
      "type": "method",
      "name": "validateTotpTokenForKey",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "validateTotpTokenForKey",
        "textToLower": "validatetotptokenforkey",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_validateTotpTokenForKey_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static Boolean validateTotpTokenForKey(String totpSharedKey, String totpCode, String description)",
      "simplifiedSignature": "validateTotpTokenForKey(String,String,String)",
      "datatype": {
        "id": "Auth.sessionmanagement.validatetotptokenforkey.Boolean",
        "type": "datatype",
        "name": "Boolean"
      },
      "description": "Indicates whether a time-based one-time password (TOTP) code (token) is valid for the given shared key.",
      "variables": {
        "totpSharedKey": {
          "id": "Auth.sessionmanagement.validatetotptokenforkey.totpsharedkey",
          "type": "var",
          "name": "totpSharedKey",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "totpSharedKey",
            "textToLower": "totpsharedkey",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_totpSharedKey_-1:0"
          },
          "signature": "String totpSharedKey",
          "datatype": {
            "id": "Auth.sessionmanagement.validatetotptokenforkey.string",
            "type": "datatype",
            "name": "String"
          }
        },
        "totpCode": {
          "id": "Auth.sessionmanagement.validatetotptokenforkey.totpcode",
          "type": "var",
          "name": "totpCode",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "totpCode",
            "textToLower": "totpcode",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_totpCode_-1:0"
          },
          "signature": "String totpCode",
          "datatype": {
            "id": "Auth.sessionmanagement.validatetotptokenforkey.string",
            "type": "datatype",
            "name": "String"
          }
        },
        "description": {
          "id": "Auth.sessionmanagement.validatetotptokenforkey.description",
          "type": "var",
          "name": "description",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "description",
            "textToLower": "description",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_description_-1:0"
          },
          "signature": "String description",
          "datatype": {
            "id": "Auth.sessionmanagement.validatetotptokenforkey.string",
            "type": "datatype",
            "name": "String"
          }
        }
      }
    },
    "validatetotptokenforuser(string)": {
      "id": "Auth.sessionmanagement.validatetotptokenforuser",
      "type": "method",
      "name": "validateTotpTokenForUser",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "validateTotpTokenForUser",
        "textToLower": "validatetotptokenforuser",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_validateTotpTokenForUser_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static Boolean validateTotpTokenForUser(String totpCode)",
      "simplifiedSignature": "validateTotpTokenForUser(String)",
      "datatype": {
        "id": "Auth.sessionmanagement.validatetotptokenforuser.Boolean",
        "type": "datatype",
        "name": "Boolean"
      },
      "description": "Deprecated. Use validateTotpTokenForUser(totpCode, description) instead.",
      "variables": {
        "totpCode": {
          "id": "Auth.sessionmanagement.validatetotptokenforuser.totpcode",
          "type": "var",
          "name": "totpCode",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "totpCode",
            "textToLower": "totpcode",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_totpCode_-1:0"
          },
          "signature": "String totpCode",
          "datatype": {
            "id": "Auth.sessionmanagement.validatetotptokenforuser.string",
            "type": "datatype",
            "name": "String"
          }
        }
      }
    },
    "validatetotptokenforuser(string,string)": {
      "id": "Auth.sessionmanagement.validatetotptokenforuser",
      "type": "method",
      "name": "validateTotpTokenForUser",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "validateTotpTokenForUser",
        "textToLower": "validatetotptokenforuser",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_validateTotpTokenForUser_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static Boolean validateTotpTokenForUser(String totpCode, String description)",
      "simplifiedSignature": "validateTotpTokenForUser(String,String)",
      "datatype": {
        "id": "Auth.sessionmanagement.validatetotptokenforuser.Boolean",
        "type": "datatype",
        "name": "Boolean"
      },
      "description": "Indicates whether a time-based one-time password (TOTP) code (token) is valid for the current user.",
      "variables": {
        "totpCode": {
          "id": "Auth.sessionmanagement.validatetotptokenforuser.totpcode",
          "type": "var",
          "name": "totpCode",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "totpCode",
            "textToLower": "totpcode",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_totpCode_-1:0"
          },
          "signature": "String totpCode",
          "datatype": {
            "id": "Auth.sessionmanagement.validatetotptokenforuser.string",
            "type": "datatype",
            "name": "String"
          }
        },
        "description": {
          "id": "Auth.sessionmanagement.validatetotptokenforuser.description",
          "type": "var",
          "name": "description",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "description",
            "textToLower": "description",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_description_-1:0"
          },
          "signature": "String description",
          "datatype": {
            "id": "Auth.sessionmanagement.validatetotptokenforuser.string",
            "type": "datatype",
            "name": "String"
          }
        }
      }
    }
  },
  "constructors": {},
  "extendsType": "",
  "implementTypes": [],
  "implements": {}
}