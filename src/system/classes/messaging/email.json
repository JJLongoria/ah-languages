{
  "id": "Messaging.email",
  "type": "class",
  "name": "Email",
  "namespace": "Messaging",
  "startToken": {
    "type": "declaration.entity.name.class",
    "text": "Email",
    "textToLower": "email",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "declaration.entity.name.class_Email_-1:0"
  },
  "accessModifier": {
    "type": "keyword.modifier.access",
    "text": "global",
    "textToLower": "global",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "keyword.modifier.access_global_-1:0"
  },
  "sharingModifier": {
    "type": "keyword.modifier.sharing",
    "text": "without sharing",
    "textToLower": "without sharing",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "keyword.modifier.sharing_without sharing_-1:0"
  },
  "description": "Contains base email methods common to both single and mass email.",
  "documentation": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_classes_email_outbound_base.htm",
  "classes": {},
  "interfaces": {},
  "enums": {},
  "variables": {},
  "methods": {
    "setbccsender(boolean)": {
      "id": "Messaging.email.setbccsender",
      "type": "method",
      "name": "setBccSender",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setBccSender",
        "textToLower": "setbccsender",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setBccSender_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setBccSender(Boolean bcc)",
      "simplifiedSignature": "setBccSender(Boolean)",
      "datatype": {
        "id": "Messaging.email.setbccsender.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Indicates whether the email sender receives a copy of the email that is sent. For a mass mail, the sender is only copied on the first email sent.",
      "variables": {
        "bcc": {
          "id": "Messaging.email.setbccsender.bcc",
          "type": "var",
          "name": "bcc",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "bcc",
            "textToLower": "bcc",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_bcc_-1:0"
          },
          "signature": "Boolean bcc",
          "datatype": {
            "id": "Messaging.email.setbccsender.boolean",
            "type": "datatype",
            "name": "Boolean"
          }
        }
      }
    },
    "setreplyto(string)": {
      "id": "Messaging.email.setreplyto",
      "type": "method",
      "name": "setReplyTo",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setReplyTo",
        "textToLower": "setreplyto",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setReplyTo_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setReplyTo(String replyAddress)",
      "simplifiedSignature": "setReplyTo(String)",
      "datatype": {
        "id": "Messaging.email.setreplyto.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Optional. The email address that receives the message when a recipient replies.",
      "variables": {
        "replyAddress": {
          "id": "Messaging.email.setreplyto.replyaddress",
          "type": "var",
          "name": "replyAddress",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "replyAddress",
            "textToLower": "replyaddress",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_replyAddress_-1:0"
          },
          "signature": "String replyAddress",
          "datatype": {
            "id": "Messaging.email.setreplyto.string",
            "type": "datatype",
            "name": "String"
          }
        }
      }
    },
    "settemplateid(id)": {
      "id": "Messaging.email.settemplateid",
      "type": "method",
      "name": "setTemplateID",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setTemplateID",
        "textToLower": "settemplateid",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setTemplateID_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setTemplateID(ID templateId)",
      "simplifiedSignature": "setTemplateID(ID)",
      "datatype": {
        "id": "Messaging.email.settemplateid.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "The ID of the template to be merged to create this email. Specify a value for setTemplateId, setHtmlBody, or setPlainTextBody. Or, you can define both setHtmlBody and setPlainTextBody.",
      "variables": {
        "templateId": {
          "id": "Messaging.email.settemplateid.templateid",
          "type": "var",
          "name": "templateId",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "templateId",
            "textToLower": "templateid",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_templateId_-1:0"
          },
          "signature": "ID templateId",
          "datatype": {
            "id": "Messaging.email.settemplateid.id",
            "type": "datatype",
            "name": "ID"
          }
        }
      }
    },
    "setsaveasactivity(boolean)": {
      "id": "Messaging.email.setsaveasactivity",
      "type": "method",
      "name": "setSaveAsActivity",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setSaveAsActivity",
        "textToLower": "setsaveasactivity",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setSaveAsActivity_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setSaveAsActivity(Boolean saveAsActivity)",
      "simplifiedSignature": "setSaveAsActivity(Boolean)",
      "datatype": {
        "id": "Messaging.email.setsaveasactivity.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Optional. The default value is true, meaning the email is saved as an activity. This argument only applies if the recipient list is based on targetObjectId or targetObjectIds. If HTML email tracking is enabled for the organization, you will be able to track open rates.",
      "variables": {
        "saveAsActivity": {
          "id": "Messaging.email.setsaveasactivity.saveasactivity",
          "type": "var",
          "name": "saveAsActivity",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "saveAsActivity",
            "textToLower": "saveasactivity",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_saveAsActivity_-1:0"
          },
          "signature": "Boolean saveAsActivity",
          "datatype": {
            "id": "Messaging.email.setsaveasactivity.boolean",
            "type": "datatype",
            "name": "Boolean"
          }
        }
      }
    },
    "setsenderdisplayname(string)": {
      "id": "Messaging.email.setsenderdisplayname",
      "type": "method",
      "name": "setSenderDisplayName",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setSenderDisplayName",
        "textToLower": "setsenderdisplayname",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setSenderDisplayName_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setSenderDisplayName(String displayName)",
      "simplifiedSignature": "setSenderDisplayName(String)",
      "datatype": {
        "id": "Messaging.email.setsenderdisplayname.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Optional. The name that appears on the From line of the email. This cannot be set if the object associated with a setOrgWideEmailAddressId for a SingleEmailMessage has defined its DisplayName field.",
      "variables": {
        "displayName": {
          "id": "Messaging.email.setsenderdisplayname.displayname",
          "type": "var",
          "name": "displayName",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "displayName",
            "textToLower": "displayname",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_displayName_-1:0"
          },
          "signature": "String displayName",
          "datatype": {
            "id": "Messaging.email.setsenderdisplayname.string",
            "type": "datatype",
            "name": "String"
          }
        }
      }
    },
    "setusesignature(boolean)": {
      "id": "Messaging.email.setusesignature",
      "type": "method",
      "name": "setUseSignature",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setUseSignature",
        "textToLower": "setusesignature",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setUseSignature_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setUseSignature(Boolean useSignature)",
      "simplifiedSignature": "setUseSignature(Boolean)",
      "datatype": {
        "id": "Messaging.email.setusesignature.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Indicates whether the email includes an email signature if the user has one configured. The default is true, meaning if the user has a signature it is included in the email unless you specify false.",
      "variables": {
        "useSignature": {
          "id": "Messaging.email.setusesignature.usesignature",
          "type": "var",
          "name": "useSignature",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "useSignature",
            "textToLower": "usesignature",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_useSignature_-1:0"
          },
          "signature": "Boolean useSignature",
          "datatype": {
            "id": "Messaging.email.setusesignature.boolean",
            "type": "datatype",
            "name": "Boolean"
          }
        }
      }
    }
  },
  "constructors": {},
  "extendsType": "",
  "implementTypes": [],
  "implements": {}
}