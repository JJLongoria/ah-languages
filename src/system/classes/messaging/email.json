{
  "id": "Messaging.email",
  "nodeType": "class",
  "name": "Email",
  "namespace": "Messaging",
  "startToken": {
    "type": "declaration.entity.name.class",
    "text": "Email",
    "textToLower": "email",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "declaration.entity.name.class_Email_-1:0"
  },
  "order": 0,
  "memberOrder": 0,
  "accessModifier": {
    "type": "keyword.modifier.access",
    "text": "global",
    "textToLower": "global",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "keyword.modifier.access_global_-1:0"
  },
  "sharingModifier": {
    "type": "keyword.modifier.sharing",
    "text": "without sharing",
    "textToLower": "without sharing",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "keyword.modifier.sharing_without sharing_-1:0"
  },
  "description": "Contains base email methods common to both single and mass email.",
  "documentation": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_classes_email_outbound_base.htm",
  "classes": {},
  "interfaces": {},
  "enums": {},
  "variables": {},
  "methods": {
    "setbccsender(boolean)": {
      "id": "Messaging.email.method.setbccsender(boolean)",
      "nodeType": "method",
      "name": "setBccSender",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setBccSender",
        "textToLower": "setbccsender",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setBccSender_-1:0"
      },
      "parentId": "Messaging.email",
      "order": 1,
      "memberOrder": 1,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public Void setBccSender(Boolean bcc)",
      "overrideSignature": "public override Void setBccSender(Boolean bcc)",
      "simplifiedSignature": "setBccSender(Boolean)",
      "datatype": {
        "id": "Messaging.email.setbccsender.datatype.Void",
        "nodeType": "datatype",
        "name": "Void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "Void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Void_0:7"
        },
        "parentId": "Messaging.email.setbccsender",
        "order": 0,
        "memberOrder": 0,
        "type": "Void"
      },
      "description": "Indicates whether the email sender receives a copy of the email that is sent. For a mass mail, the sender is only copied on the first email sent.",
      "parentName": "Email",
      "variables": {},
      "params": {
        "bcc": {
          "id": "Messaging.email.method.setbccsender(boolean).varParam.bcc",
          "nodeType": "variable",
          "name": "bcc",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "bcc",
            "textToLower": "bcc",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 33
              },
              "end": {
                "line": 0,
                "character": 36
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_bcc_0:33"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "bcc",
            "textToLower": "bcc",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 33
              },
              "end": {
                "line": 0,
                "character": 36
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_bcc_0:33"
          },
          "parentId": "Messaging.email.method.setbccsender(boolean)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Messaging.email.setbccsender.datatype.Boolean",
            "nodeType": "datatype",
            "name": "Boolean",
            "startToken": {
              "type": "datatype.primitive",
              "text": "Boolean",
              "textToLower": "boolean",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 25
                },
                "end": {
                  "line": 0,
                  "character": 32
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_Boolean_0:25"
            },
            "parentId": "Messaging.email.setbccsender",
            "order": 0,
            "memberOrder": 0,
            "type": "Boolean"
          },
          "description": "",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "setreplyto(string)": {
      "id": "Messaging.email.method.setreplyto(string)",
      "nodeType": "method",
      "name": "setReplyTo",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setReplyTo",
        "textToLower": "setreplyto",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setReplyTo_-1:0"
      },
      "parentId": "Messaging.email",
      "order": 2,
      "memberOrder": 2,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public Void setReplyTo(String replyAddress)",
      "overrideSignature": "public override Void setReplyTo(String replyAddress)",
      "simplifiedSignature": "setReplyTo(String)",
      "datatype": {
        "id": "Messaging.email.setreplyto.datatype.Void",
        "nodeType": "datatype",
        "name": "Void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "Void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Void_0:7"
        },
        "parentId": "Messaging.email.setreplyto",
        "order": 0,
        "memberOrder": 0,
        "type": "Void"
      },
      "description": "Optional. The email address that receives the message when a recipient replies.",
      "parentName": "Email",
      "variables": {},
      "params": {
        "replyaddress": {
          "id": "Messaging.email.method.setreplyto(string).varParam.replyaddress",
          "nodeType": "variable",
          "name": "replyAddress",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "replyAddress",
            "textToLower": "replyaddress",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 30
              },
              "end": {
                "line": 0,
                "character": 42
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_replyAddress_0:30"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "replyAddress",
            "textToLower": "replyaddress",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 30
              },
              "end": {
                "line": 0,
                "character": 42
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_replyAddress_0:30"
          },
          "parentId": "Messaging.email.method.setreplyto(string)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Messaging.email.setreplyto.datatype.String",
            "nodeType": "datatype",
            "name": "String",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 23
                },
                "end": {
                  "line": 0,
                  "character": 29
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:23"
            },
            "parentId": "Messaging.email.setreplyto",
            "order": 0,
            "memberOrder": 0,
            "type": "String"
          },
          "description": "",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "settemplateid(id)": {
      "id": "Messaging.email.method.settemplateid(id)",
      "nodeType": "method",
      "name": "setTemplateID",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setTemplateID",
        "textToLower": "settemplateid",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setTemplateID_-1:0"
      },
      "parentId": "Messaging.email",
      "order": 3,
      "memberOrder": 3,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public Void setTemplateID(ID templateId)",
      "overrideSignature": "public override Void setTemplateID(ID templateId)",
      "simplifiedSignature": "setTemplateID(ID)",
      "datatype": {
        "id": "Messaging.email.settemplateid.datatype.Void",
        "nodeType": "datatype",
        "name": "Void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "Void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Void_0:7"
        },
        "parentId": "Messaging.email.settemplateid",
        "order": 0,
        "memberOrder": 0,
        "type": "Void"
      },
      "description": "The ID of the template to be merged to create this email. Specify a value for setTemplateId, setHtmlBody, or setPlainTextBody. Or, you can define both setHtmlBody and setPlainTextBody.",
      "parentName": "Email",
      "variables": {},
      "params": {
        "templateid": {
          "id": "Messaging.email.method.settemplateid(id).varParam.templateid",
          "nodeType": "variable",
          "name": "templateId",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "templateId",
            "textToLower": "templateid",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 29
              },
              "end": {
                "line": 0,
                "character": 39
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_templateId_0:29"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "templateId",
            "textToLower": "templateid",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 29
              },
              "end": {
                "line": 0,
                "character": 39
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_templateId_0:29"
          },
          "parentId": "Messaging.email.method.settemplateid(id)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Messaging.email.settemplateid.datatype.ID",
            "nodeType": "datatype",
            "name": "ID",
            "startToken": {
              "type": "datatype.primitive",
              "text": "ID",
              "textToLower": "id",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 26
                },
                "end": {
                  "line": 0,
                  "character": 28
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_ID_0:26"
            },
            "parentId": "Messaging.email.settemplateid",
            "order": 0,
            "memberOrder": 0,
            "type": "ID"
          },
          "description": "",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "setsaveasactivity(boolean)": {
      "id": "Messaging.email.method.setsaveasactivity(boolean)",
      "nodeType": "method",
      "name": "setSaveAsActivity",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setSaveAsActivity",
        "textToLower": "setsaveasactivity",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setSaveAsActivity_-1:0"
      },
      "parentId": "Messaging.email",
      "order": 4,
      "memberOrder": 4,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public Void setSaveAsActivity(Boolean saveAsActivity)",
      "overrideSignature": "public override Void setSaveAsActivity(Boolean saveAsActivity)",
      "simplifiedSignature": "setSaveAsActivity(Boolean)",
      "datatype": {
        "id": "Messaging.email.setsaveasactivity.datatype.Void",
        "nodeType": "datatype",
        "name": "Void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "Void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Void_0:7"
        },
        "parentId": "Messaging.email.setsaveasactivity",
        "order": 0,
        "memberOrder": 0,
        "type": "Void"
      },
      "description": "Optional. The default value is true, meaning the email is saved as an activity. This argument only applies if the recipient list is based on targetObjectId or targetObjectIds. If HTML email tracking is enabled for the organization, you will be able to track open rates.",
      "parentName": "Email",
      "variables": {},
      "params": {
        "saveasactivity": {
          "id": "Messaging.email.method.setsaveasactivity(boolean).varParam.saveasactivity",
          "nodeType": "variable",
          "name": "saveAsActivity",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "saveAsActivity",
            "textToLower": "saveasactivity",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 38
              },
              "end": {
                "line": 0,
                "character": 52
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_saveAsActivity_0:38"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "saveAsActivity",
            "textToLower": "saveasactivity",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 38
              },
              "end": {
                "line": 0,
                "character": 52
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_saveAsActivity_0:38"
          },
          "parentId": "Messaging.email.method.setsaveasactivity(boolean)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Messaging.email.setsaveasactivity.datatype.Boolean",
            "nodeType": "datatype",
            "name": "Boolean",
            "startToken": {
              "type": "datatype.primitive",
              "text": "Boolean",
              "textToLower": "boolean",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 30
                },
                "end": {
                  "line": 0,
                  "character": 37
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_Boolean_0:30"
            },
            "parentId": "Messaging.email.setsaveasactivity",
            "order": 0,
            "memberOrder": 0,
            "type": "Boolean"
          },
          "description": "",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "setsenderdisplayname(string)": {
      "id": "Messaging.email.method.setsenderdisplayname(string)",
      "nodeType": "method",
      "name": "setSenderDisplayName",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setSenderDisplayName",
        "textToLower": "setsenderdisplayname",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setSenderDisplayName_-1:0"
      },
      "parentId": "Messaging.email",
      "order": 5,
      "memberOrder": 5,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public Void setSenderDisplayName(String displayName)",
      "overrideSignature": "public override Void setSenderDisplayName(String displayName)",
      "simplifiedSignature": "setSenderDisplayName(String)",
      "datatype": {
        "id": "Messaging.email.setsenderdisplayname.datatype.Void",
        "nodeType": "datatype",
        "name": "Void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "Void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Void_0:7"
        },
        "parentId": "Messaging.email.setsenderdisplayname",
        "order": 0,
        "memberOrder": 0,
        "type": "Void"
      },
      "description": "Optional. The name that appears on the From line of the email. This cannot be set if the object associated with a setOrgWideEmailAddressId for a SingleEmailMessage has defined its DisplayName field.",
      "parentName": "Email",
      "variables": {},
      "params": {
        "displayname": {
          "id": "Messaging.email.method.setsenderdisplayname(string).varParam.displayname",
          "nodeType": "variable",
          "name": "displayName",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "displayName",
            "textToLower": "displayname",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 40
              },
              "end": {
                "line": 0,
                "character": 51
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_displayName_0:40"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "displayName",
            "textToLower": "displayname",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 40
              },
              "end": {
                "line": 0,
                "character": 51
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_displayName_0:40"
          },
          "parentId": "Messaging.email.method.setsenderdisplayname(string)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Messaging.email.setsenderdisplayname.datatype.String",
            "nodeType": "datatype",
            "name": "String",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 33
                },
                "end": {
                  "line": 0,
                  "character": 39
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:33"
            },
            "parentId": "Messaging.email.setsenderdisplayname",
            "order": 0,
            "memberOrder": 0,
            "type": "String"
          },
          "description": "",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "setusesignature(boolean)": {
      "id": "Messaging.email.method.setusesignature(boolean)",
      "nodeType": "method",
      "name": "setUseSignature",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setUseSignature",
        "textToLower": "setusesignature",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setUseSignature_-1:0"
      },
      "parentId": "Messaging.email",
      "order": 6,
      "memberOrder": 6,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public Void setUseSignature(Boolean useSignature)",
      "overrideSignature": "public override Void setUseSignature(Boolean useSignature)",
      "simplifiedSignature": "setUseSignature(Boolean)",
      "datatype": {
        "id": "Messaging.email.setusesignature.datatype.Void",
        "nodeType": "datatype",
        "name": "Void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "Void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Void_0:7"
        },
        "parentId": "Messaging.email.setusesignature",
        "order": 0,
        "memberOrder": 0,
        "type": "Void"
      },
      "description": "Indicates whether the email includes an email signature if the user has one configured. The default is true, meaning if the user has a signature it is included in the email unless you specify false.",
      "parentName": "Email",
      "variables": {},
      "params": {
        "usesignature": {
          "id": "Messaging.email.method.setusesignature(boolean).varParam.usesignature",
          "nodeType": "variable",
          "name": "useSignature",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "useSignature",
            "textToLower": "usesignature",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 36
              },
              "end": {
                "line": 0,
                "character": 48
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_useSignature_0:36"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "useSignature",
            "textToLower": "usesignature",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 36
              },
              "end": {
                "line": 0,
                "character": 48
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_useSignature_0:36"
          },
          "parentId": "Messaging.email.method.setusesignature(boolean)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Messaging.email.setusesignature.datatype.Boolean",
            "nodeType": "datatype",
            "name": "Boolean",
            "startToken": {
              "type": "datatype.primitive",
              "text": "Boolean",
              "textToLower": "boolean",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 28
                },
                "end": {
                  "line": 0,
                  "character": 35
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_Boolean_0:28"
            },
            "parentId": "Messaging.email.setusesignature",
            "order": 0,
            "memberOrder": 0,
            "type": "Boolean"
          },
          "description": "",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    }
  },
  "constructors": {},
  "extendsType": "",
  "implementTypes": [],
  "implements": {},
  "totalMembers": 6,
  "queries": []
}