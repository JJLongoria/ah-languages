{
  "id": "Messaging.singleemailmessage",
  "nodeType": "class",
  "name": "SingleEmailMessage",
  "namespace": "Messaging",
  "startToken": {
    "type": "declaration.entity.name.class",
    "text": "SingleEmailMessage",
    "textToLower": "singleemailmessage",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "declaration.entity.name.class_SingleEmailMessage_-1:0"
  },
  "order": 0,
  "memberOrder": 0,
  "accessModifier": {
    "type": "keyword.modifier.access",
    "text": "global",
    "textToLower": "global",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "keyword.modifier.access_global_-1:0"
  },
  "sharingModifier": {
    "type": "keyword.modifier.sharing",
    "text": "without sharing",
    "textToLower": "without sharing",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "keyword.modifier.sharing_without sharing_-1:0"
  },
  "description": "Contains methods for sending single email messages.",
  "documentation": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_classes_email_outbound_single.htm",
  "classes": {},
  "interfaces": {},
  "enums": {},
  "variables": {},
  "methods": {
    "gettemplatename()": {
      "id": "Messaging.singleemailmessage.method.gettemplatename()",
      "nodeType": "method",
      "name": "getTemplateName",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getTemplateName",
        "textToLower": "gettemplatename",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getTemplateName_-1:0"
      },
      "parentId": "Messaging.singleemailmessage",
      "order": 1,
      "memberOrder": 2,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public STRING getTemplateName()",
      "overrideSignature": "public override STRING getTemplateName()",
      "simplifiedSignature": "getTemplateName()",
      "datatype": {
        "id": "Messaging.singleemailmessage.gettemplatename.datatype.STRING",
        "nodeType": "datatype",
        "name": "STRING",
        "startToken": {
          "type": "datatype.primitive",
          "text": "STRING",
          "textToLower": "string",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 13
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_STRING_0:7"
        },
        "parentId": "Messaging.singleemailmessage.gettemplatename",
        "order": 0,
        "memberOrder": 0,
        "type": "STRING"
      },
      "description": "The name of the template used to create the email.",
      "parentName": "SingleEmailMessage",
      "variables": {},
      "params": {},
      "queries": [],
      "exceptions": []
    },
    "setbccaddresses(string[])": {
      "id": "Messaging.singleemailmessage.method.setbccaddresses(string[])",
      "nodeType": "method",
      "name": "setBccAddresses",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setBccAddresses",
        "textToLower": "setbccaddresses",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setBccAddresses_-1:0"
      },
      "parentId": "Messaging.singleemailmessage",
      "order": 2,
      "memberOrder": 3,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public Void setBccAddresses(String[] bccAddresses)",
      "overrideSignature": "public override Void setBccAddresses(String[] bccAddresses)",
      "simplifiedSignature": "setBccAddresses(String[])",
      "datatype": {
        "id": "Messaging.singleemailmessage.setbccaddresses.datatype.Void",
        "nodeType": "datatype",
        "name": "Void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "Void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Void_0:7"
        },
        "parentId": "Messaging.singleemailmessage.setbccaddresses",
        "order": 0,
        "memberOrder": 0,
        "type": "Void"
      },
      "description": "Optional. A list of blind carbon copy (BCC) addresses or object IDs of the contacts, leads, and users youâ€™re sending the email to. The maximum size for this field is 4,000 bytes. The maximum total of toAddresses, ccAddresses, and bccAddresses per email is 150.",
      "parentName": "SingleEmailMessage",
      "variables": {},
      "params": {
        "bccaddresses": {
          "id": "Messaging.singleemailmessage.method.setbccaddresses(string[]).varParam.bccaddresses",
          "nodeType": "variable",
          "name": "bccAddresses",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "bccAddresses",
            "textToLower": "bccaddresses",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 37
              },
              "end": {
                "line": 0,
                "character": 49
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_bccAddresses_0:37"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "bccAddresses",
            "textToLower": "bccaddresses",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 37
              },
              "end": {
                "line": 0,
                "character": 49
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_bccAddresses_0:37"
          },
          "parentId": "Messaging.singleemailmessage.method.setbccaddresses(string[])",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Messaging.singleemailmessage.setbccaddresses.datatype.String[]",
            "nodeType": "datatype",
            "name": "String[]",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 28
                },
                "end": {
                  "line": 0,
                  "character": 34
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:28"
            },
            "parentId": "Messaging.singleemailmessage.setbccaddresses",
            "order": 0,
            "memberOrder": 0,
            "type": "String[]"
          },
          "description": "",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "setccaddresses(string[])": {
      "id": "Messaging.singleemailmessage.method.setccaddresses(string[])",
      "nodeType": "method",
      "name": "setCcAddresses",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setCcAddresses",
        "textToLower": "setccaddresses",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setCcAddresses_-1:0"
      },
      "parentId": "Messaging.singleemailmessage",
      "order": 3,
      "memberOrder": 4,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public Void setCcAddresses(String[] ccAddresses)",
      "overrideSignature": "public override Void setCcAddresses(String[] ccAddresses)",
      "simplifiedSignature": "setCcAddresses(String[])",
      "datatype": {
        "id": "Messaging.singleemailmessage.setccaddresses.datatype.Void",
        "nodeType": "datatype",
        "name": "Void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "Void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Void_0:7"
        },
        "parentId": "Messaging.singleemailmessage.setccaddresses",
        "order": 0,
        "memberOrder": 0,
        "type": "Void"
      },
      "description": "Optional. A list of carbon copy (CC) addresses or object IDs of the contacts, leads, and users youâ€™re sending the email to. The maximum size for this field is 4,000 bytes. The maximum total of toAddresses, ccAddresses, and bccAddresses per email is 150.",
      "parentName": "SingleEmailMessage",
      "variables": {},
      "params": {
        "ccaddresses": {
          "id": "Messaging.singleemailmessage.method.setccaddresses(string[]).varParam.ccaddresses",
          "nodeType": "variable",
          "name": "ccAddresses",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "ccAddresses",
            "textToLower": "ccaddresses",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 36
              },
              "end": {
                "line": 0,
                "character": 47
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_ccAddresses_0:36"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "ccAddresses",
            "textToLower": "ccaddresses",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 36
              },
              "end": {
                "line": 0,
                "character": 47
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_ccAddresses_0:36"
          },
          "parentId": "Messaging.singleemailmessage.method.setccaddresses(string[])",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Messaging.singleemailmessage.setccaddresses.datatype.String[]",
            "nodeType": "datatype",
            "name": "String[]",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 27
                },
                "end": {
                  "line": 0,
                  "character": 33
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:27"
            },
            "parentId": "Messaging.singleemailmessage.setccaddresses",
            "order": 0,
            "memberOrder": 0,
            "type": "String[]"
          },
          "description": "",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "setcharset(string)": {
      "id": "Messaging.singleemailmessage.method.setcharset(string)",
      "nodeType": "method",
      "name": "setCharset",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setCharset",
        "textToLower": "setcharset",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setCharset_-1:0"
      },
      "parentId": "Messaging.singleemailmessage",
      "order": 4,
      "memberOrder": 5,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public Void setCharset(String characterSet)",
      "overrideSignature": "public override Void setCharset(String characterSet)",
      "simplifiedSignature": "setCharset(String)",
      "datatype": {
        "id": "Messaging.singleemailmessage.setcharset.datatype.Void",
        "nodeType": "datatype",
        "name": "Void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "Void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Void_0:7"
        },
        "parentId": "Messaging.singleemailmessage.setcharset",
        "order": 0,
        "memberOrder": 0,
        "type": "Void"
      },
      "description": "Optional. The character set for the email. If this value is null, the user's default value is used.",
      "parentName": "SingleEmailMessage",
      "variables": {},
      "params": {
        "characterset": {
          "id": "Messaging.singleemailmessage.method.setcharset(string).varParam.characterset",
          "nodeType": "variable",
          "name": "characterSet",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "characterSet",
            "textToLower": "characterset",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 30
              },
              "end": {
                "line": 0,
                "character": 42
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_characterSet_0:30"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "characterSet",
            "textToLower": "characterset",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 30
              },
              "end": {
                "line": 0,
                "character": 42
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_characterSet_0:30"
          },
          "parentId": "Messaging.singleemailmessage.method.setcharset(string)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Messaging.singleemailmessage.setcharset.datatype.String",
            "nodeType": "datatype",
            "name": "String",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 23
                },
                "end": {
                  "line": 0,
                  "character": 29
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:23"
            },
            "parentId": "Messaging.singleemailmessage.setcharset",
            "order": 0,
            "memberOrder": 0,
            "type": "String"
          },
          "description": "",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "setdocumentattachments(id[])": {
      "id": "Messaging.singleemailmessage.method.setdocumentattachments(id[])",
      "nodeType": "method",
      "name": "setDocumentAttachments",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setDocumentAttachments",
        "textToLower": "setdocumentattachments",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setDocumentAttachments_-1:0"
      },
      "parentId": "Messaging.singleemailmessage",
      "order": 5,
      "memberOrder": 6,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public Void setDocumentAttachments(ID[] documentIds)",
      "overrideSignature": "public override Void setDocumentAttachments(ID[] documentIds)",
      "simplifiedSignature": "setDocumentAttachments(ID[])",
      "datatype": {
        "id": "Messaging.singleemailmessage.setdocumentattachments.datatype.Void",
        "nodeType": "datatype",
        "name": "Void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "Void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Void_0:7"
        },
        "parentId": "Messaging.singleemailmessage.setdocumentattachments",
        "order": 0,
        "memberOrder": 0,
        "type": "Void"
      },
      "description": "(Deprecated. Use setEntityAttachments() instead.) Optional. A list containing the ID of each document object you want to attach to the email.",
      "parentName": "SingleEmailMessage",
      "variables": {},
      "params": {
        "documentids": {
          "id": "Messaging.singleemailmessage.method.setdocumentattachments(id[]).varParam.documentids",
          "nodeType": "variable",
          "name": "documentIds",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "documentIds",
            "textToLower": "documentids",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 40
              },
              "end": {
                "line": 0,
                "character": 51
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_documentIds_0:40"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "documentIds",
            "textToLower": "documentids",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 40
              },
              "end": {
                "line": 0,
                "character": 51
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_documentIds_0:40"
          },
          "parentId": "Messaging.singleemailmessage.method.setdocumentattachments(id[])",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Messaging.singleemailmessage.setdocumentattachments.datatype.ID[]",
            "nodeType": "datatype",
            "name": "ID[]",
            "startToken": {
              "type": "datatype.primitive",
              "text": "ID",
              "textToLower": "id",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 35
                },
                "end": {
                  "line": 0,
                  "character": 37
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_ID_0:35"
            },
            "parentId": "Messaging.singleemailmessage.setdocumentattachments",
            "order": 0,
            "memberOrder": 0,
            "type": "ID[]"
          },
          "description": "",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "setentityattachments(list<string>)": {
      "id": "Messaging.singleemailmessage.method.setentityattachments(list<string>)",
      "nodeType": "method",
      "name": "setEntityAttachments",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setEntityAttachments",
        "textToLower": "setentityattachments",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setEntityAttachments_-1:0"
      },
      "parentId": "Messaging.singleemailmessage",
      "order": 6,
      "memberOrder": 7,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public void setEntityAttachments(List<String> ids)",
      "overrideSignature": "public override void setEntityAttachments(List<String> ids)",
      "simplifiedSignature": "setEntityAttachments(List<String>)",
      "datatype": {
        "id": "Messaging.singleemailmessage.setentityattachments.datatype.void",
        "nodeType": "datatype",
        "name": "void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_void_0:7"
        },
        "parentId": "Messaging.singleemailmessage.setentityattachments",
        "order": 0,
        "memberOrder": 0,
        "type": "void"
      },
      "description": "Optional. Array of IDs of Document, ContentVersion, or Attachment items to attach to the email.",
      "parentName": "SingleEmailMessage",
      "variables": {},
      "params": {
        "ids": {
          "id": "Messaging.singleemailmessage.method.setentityattachments(list<string>).varParam.ids",
          "nodeType": "variable",
          "name": "ids",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "ids",
            "textToLower": "ids",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 46
              },
              "end": {
                "line": 0,
                "character": 49
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_ids_0:46"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "ids",
            "textToLower": "ids",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 46
              },
              "end": {
                "line": 0,
                "character": 49
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_ids_0:46"
          },
          "parentId": "Messaging.singleemailmessage.method.setentityattachments(list<string>)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Messaging.singleemailmessage.setentityattachments.datatype.List<String>",
            "nodeType": "datatype",
            "name": "List<String>",
            "startToken": {
              "type": "datatype.collection",
              "text": "List",
              "textToLower": "list",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 33
                },
                "end": {
                  "line": 0,
                  "character": 37
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_List_0:33"
            },
            "parentId": "Messaging.singleemailmessage.setentityattachments",
            "order": 0,
            "memberOrder": 0,
            "type": "List",
            "value": {
              "id": "Messaging.singleemailmessage.setentityattachments.datatype.List<String>.value.String",
              "nodeType": "datatype",
              "name": "String",
              "startToken": {
                "type": "datatype.primitive",
                "text": "String",
                "textToLower": "string",
                "isAux": false,
                "range": {
                  "start": {
                    "line": 0,
                    "character": 38
                  },
                  "end": {
                    "line": 0,
                    "character": 44
                  },
                  "isEmpty": false,
                  "isSingleLine": true
                },
                "id": "token.type.identifier_String_0:38"
              },
              "order": 0,
              "memberOrder": 0,
              "type": "String"
            }
          },
          "description": "",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "setfileattachments(emailfileattachment[])": {
      "id": "Messaging.singleemailmessage.method.setfileattachments(emailfileattachment[])",
      "nodeType": "method",
      "name": "setFileAttachments",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setFileAttachments",
        "textToLower": "setfileattachments",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setFileAttachments_-1:0"
      },
      "parentId": "Messaging.singleemailmessage",
      "order": 7,
      "memberOrder": 8,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public Void setFileAttachments(EmailFileAttachment[] fileNames)",
      "overrideSignature": "public override Void setFileAttachments(EmailFileAttachment[] fileNames)",
      "simplifiedSignature": "setFileAttachments(EmailFileAttachment[])",
      "datatype": {
        "id": "Messaging.singleemailmessage.setfileattachments.datatype.Void",
        "nodeType": "datatype",
        "name": "Void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "Void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Void_0:7"
        },
        "parentId": "Messaging.singleemailmessage.setfileattachments",
        "order": 0,
        "memberOrder": 0,
        "type": "Void"
      },
      "description": "Optional. A list containing the file names of the binary and text files you want to attach to the email.",
      "parentName": "SingleEmailMessage",
      "variables": {},
      "params": {
        "filenames": {
          "id": "Messaging.singleemailmessage.method.setfileattachments(emailfileattachment[]).varParam.filenames",
          "nodeType": "variable",
          "name": "fileNames",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "fileNames",
            "textToLower": "filenames",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 53
              },
              "end": {
                "line": 0,
                "character": 62
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_fileNames_0:53"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "fileNames",
            "textToLower": "filenames",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 53
              },
              "end": {
                "line": 0,
                "character": 62
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_fileNames_0:53"
          },
          "parentId": "Messaging.singleemailmessage.method.setfileattachments(emailfileattachment[])",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Messaging.singleemailmessage.setfileattachments.datatype.EmailFileAttachment[]",
            "nodeType": "datatype",
            "name": "EmailFileAttachment[]",
            "startToken": {
              "type": "datatype.custom.class",
              "text": "EmailFileAttachment",
              "textToLower": "emailfileattachment",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 31
                },
                "end": {
                  "line": 0,
                  "character": 50
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_EmailFileAttachment_0:31"
            },
            "parentId": "Messaging.singleemailmessage.setfileattachments",
            "order": 0,
            "memberOrder": 0,
            "type": "EmailFileAttachment[]"
          },
          "description": "",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "sethtmlbody(string)": {
      "id": "Messaging.singleemailmessage.method.sethtmlbody(string)",
      "nodeType": "method",
      "name": "setHtmlBody",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setHtmlBody",
        "textToLower": "sethtmlbody",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setHtmlBody_-1:0"
      },
      "parentId": "Messaging.singleemailmessage",
      "order": 8,
      "memberOrder": 9,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public Void setHtmlBody(String htmlBody)",
      "overrideSignature": "public override Void setHtmlBody(String htmlBody)",
      "simplifiedSignature": "setHtmlBody(String)",
      "datatype": {
        "id": "Messaging.singleemailmessage.sethtmlbody.datatype.Void",
        "nodeType": "datatype",
        "name": "Void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "Void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Void_0:7"
        },
        "parentId": "Messaging.singleemailmessage.sethtmlbody",
        "order": 0,
        "memberOrder": 0,
        "type": "Void"
      },
      "description": "Optional. The HTML version of the email, specified by the sender. The value is encoded according to the specification associated with the organization. Specify a value for setTemplateId, setHtmlBody, or setPlainTextBody. Or, you can define both setHtmlBody and setPlainTextBody.",
      "parentName": "SingleEmailMessage",
      "variables": {},
      "params": {
        "htmlbody": {
          "id": "Messaging.singleemailmessage.method.sethtmlbody(string).varParam.htmlbody",
          "nodeType": "variable",
          "name": "htmlBody",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "htmlBody",
            "textToLower": "htmlbody",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 31
              },
              "end": {
                "line": 0,
                "character": 39
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_htmlBody_0:31"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "htmlBody",
            "textToLower": "htmlbody",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 31
              },
              "end": {
                "line": 0,
                "character": 39
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_htmlBody_0:31"
          },
          "parentId": "Messaging.singleemailmessage.method.sethtmlbody(string)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Messaging.singleemailmessage.sethtmlbody.datatype.String",
            "nodeType": "datatype",
            "name": "String",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 24
                },
                "end": {
                  "line": 0,
                  "character": 30
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:24"
            },
            "parentId": "Messaging.singleemailmessage.sethtmlbody",
            "order": 0,
            "memberOrder": 0,
            "type": "String"
          },
          "description": "",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "setinreplyto(string)": {
      "id": "Messaging.singleemailmessage.method.setinreplyto(string)",
      "nodeType": "method",
      "name": "setInReplyTo",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setInReplyTo",
        "textToLower": "setinreplyto",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setInReplyTo_-1:0"
      },
      "parentId": "Messaging.singleemailmessage",
      "order": 9,
      "memberOrder": 10,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public Void setInReplyTo(String parentMessageIds)",
      "overrideSignature": "public override Void setInReplyTo(String parentMessageIds)",
      "simplifiedSignature": "setInReplyTo(String)",
      "datatype": {
        "id": "Messaging.singleemailmessage.setinreplyto.datatype.Void",
        "nodeType": "datatype",
        "name": "Void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "Void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Void_0:7"
        },
        "parentId": "Messaging.singleemailmessage.setinreplyto",
        "order": 0,
        "memberOrder": 0,
        "type": "Void"
      },
      "description": "Sets the optional In-Reply-To field of the outgoing email. This field identifies the email or emails to which this email is a reply (parent emails).",
      "parentName": "SingleEmailMessage",
      "variables": {},
      "params": {
        "parentmessageids": {
          "id": "Messaging.singleemailmessage.method.setinreplyto(string).varParam.parentmessageids",
          "nodeType": "variable",
          "name": "parentMessageIds",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "parentMessageIds",
            "textToLower": "parentmessageids",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 32
              },
              "end": {
                "line": 0,
                "character": 48
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_parentMessageIds_0:32"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "parentMessageIds",
            "textToLower": "parentmessageids",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 32
              },
              "end": {
                "line": 0,
                "character": 48
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_parentMessageIds_0:32"
          },
          "parentId": "Messaging.singleemailmessage.method.setinreplyto(string)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Messaging.singleemailmessage.setinreplyto.datatype.String",
            "nodeType": "datatype",
            "name": "String",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 25
                },
                "end": {
                  "line": 0,
                  "character": 31
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:25"
            },
            "parentId": "Messaging.singleemailmessage.setinreplyto",
            "order": 0,
            "memberOrder": 0,
            "type": "String"
          },
          "description": "Contains one or more parent email message IDs.",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "setoptoutpolicy(string)": {
      "id": "Messaging.singleemailmessage.method.setoptoutpolicy(string)",
      "nodeType": "method",
      "name": "setOptOutPolicy",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setOptOutPolicy",
        "textToLower": "setoptoutpolicy",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setOptOutPolicy_-1:0"
      },
      "parentId": "Messaging.singleemailmessage",
      "order": 10,
      "memberOrder": 11,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public void setOptOutPolicy(String emailOptOutPolicy)",
      "overrideSignature": "public override void setOptOutPolicy(String emailOptOutPolicy)",
      "simplifiedSignature": "setOptOutPolicy(String)",
      "datatype": {
        "id": "Messaging.singleemailmessage.setoptoutpolicy.datatype.void",
        "nodeType": "datatype",
        "name": "void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_void_0:7"
        },
        "parentId": "Messaging.singleemailmessage.setoptoutpolicy",
        "order": 0,
        "memberOrder": 0,
        "type": "void"
      },
      "description": "Optional. If you added recipients by ID instead of email address and the Email Opt Out option is set, this method determines the behavior of the sendEmail() call. If you add recipients by their email addresses, the opt-out settings for those recipients arenâ€™t checked and those recipients always receive the email.",
      "parentName": "SingleEmailMessage",
      "variables": {},
      "params": {
        "emailoptoutpolicy": {
          "id": "Messaging.singleemailmessage.method.setoptoutpolicy(string).varParam.emailoptoutpolicy",
          "nodeType": "variable",
          "name": "emailOptOutPolicy",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "emailOptOutPolicy",
            "textToLower": "emailoptoutpolicy",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 35
              },
              "end": {
                "line": 0,
                "character": 52
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_emailOptOutPolicy_0:35"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "emailOptOutPolicy",
            "textToLower": "emailoptoutpolicy",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 35
              },
              "end": {
                "line": 0,
                "character": 52
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_emailOptOutPolicy_0:35"
          },
          "parentId": "Messaging.singleemailmessage.method.setoptoutpolicy(string)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Messaging.singleemailmessage.setoptoutpolicy.datatype.String",
            "nodeType": "datatype",
            "name": "String",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 28
                },
                "end": {
                  "line": 0,
                  "character": 34
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:28"
            },
            "parentId": "Messaging.singleemailmessage.setoptoutpolicy",
            "order": 0,
            "memberOrder": 0,
            "type": "String"
          },
          "description": "Possible values of the emailOptOutPolicy parameter are:  SEND (default)â€”The email is sent to all recipients. The recipientsâ€™ Email Opt Out setting is ignored. The setting Enforce email privacy settings is ignored.   FILTERâ€”No email is sent to recipients that have the Email Opt Out option set. Emails are sent to the other recipients. The setting Enforce email privacy settings is ignored.   REJECTâ€”If any of the recipients have the Email Opt Out option set, sendEmail() throws an error and no email is sent. The setting Enforce email privacy settings is respected, as are the selections in the data privacy record based on the Individual object. If any of the recipients have Donâ€™t Market, Donâ€™t Process, or Forget this Individual selected, sendEmail() throws an error and no email is sent.",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "setplaintextbody(string)": {
      "id": "Messaging.singleemailmessage.method.setplaintextbody(string)",
      "nodeType": "method",
      "name": "setPlainTextBody",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setPlainTextBody",
        "textToLower": "setplaintextbody",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setPlainTextBody_-1:0"
      },
      "parentId": "Messaging.singleemailmessage",
      "order": 11,
      "memberOrder": 12,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public Void setPlainTextBody(String plainTextBody)",
      "overrideSignature": "public override Void setPlainTextBody(String plainTextBody)",
      "simplifiedSignature": "setPlainTextBody(String)",
      "datatype": {
        "id": "Messaging.singleemailmessage.setplaintextbody.datatype.Void",
        "nodeType": "datatype",
        "name": "Void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "Void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Void_0:7"
        },
        "parentId": "Messaging.singleemailmessage.setplaintextbody",
        "order": 0,
        "memberOrder": 0,
        "type": "Void"
      },
      "description": "Optional. The text version of the email, specified by the sender. Specify a value for setTemplateId, setHtmlBody, or setPlainTextBody. Or, you can define both setHtmlBody and setPlainTextBody.",
      "parentName": "SingleEmailMessage",
      "variables": {},
      "params": {
        "plaintextbody": {
          "id": "Messaging.singleemailmessage.method.setplaintextbody(string).varParam.plaintextbody",
          "nodeType": "variable",
          "name": "plainTextBody",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "plainTextBody",
            "textToLower": "plaintextbody",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 36
              },
              "end": {
                "line": 0,
                "character": 49
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_plainTextBody_0:36"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "plainTextBody",
            "textToLower": "plaintextbody",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 36
              },
              "end": {
                "line": 0,
                "character": 49
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_plainTextBody_0:36"
          },
          "parentId": "Messaging.singleemailmessage.method.setplaintextbody(string)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Messaging.singleemailmessage.setplaintextbody.datatype.String",
            "nodeType": "datatype",
            "name": "String",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 29
                },
                "end": {
                  "line": 0,
                  "character": 35
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:29"
            },
            "parentId": "Messaging.singleemailmessage.setplaintextbody",
            "order": 0,
            "memberOrder": 0,
            "type": "String"
          },
          "description": "",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "setorgwideemailaddressid(id)": {
      "id": "Messaging.singleemailmessage.method.setorgwideemailaddressid(id)",
      "nodeType": "method",
      "name": "setOrgWideEmailAddressId",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setOrgWideEmailAddressId",
        "textToLower": "setorgwideemailaddressid",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setOrgWideEmailAddressId_-1:0"
      },
      "parentId": "Messaging.singleemailmessage",
      "order": 12,
      "memberOrder": 13,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public Void setOrgWideEmailAddressId(ID emailAddressId)",
      "overrideSignature": "public override Void setOrgWideEmailAddressId(ID emailAddressId)",
      "simplifiedSignature": "setOrgWideEmailAddressId(ID)",
      "datatype": {
        "id": "Messaging.singleemailmessage.setorgwideemailaddressid.datatype.Void",
        "nodeType": "datatype",
        "name": "Void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "Void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Void_0:7"
        },
        "parentId": "Messaging.singleemailmessage.setorgwideemailaddressid",
        "order": 0,
        "memberOrder": 0,
        "type": "Void"
      },
      "description": "Optional. The ID of the organization-wide email address associated with the outgoing email. The object's DisplayName field cannot be set if the setSenderDisplayName field is already set.",
      "parentName": "SingleEmailMessage",
      "variables": {},
      "params": {
        "emailaddressid": {
          "id": "Messaging.singleemailmessage.method.setorgwideemailaddressid(id).varParam.emailaddressid",
          "nodeType": "variable",
          "name": "emailAddressId",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "emailAddressId",
            "textToLower": "emailaddressid",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 40
              },
              "end": {
                "line": 0,
                "character": 54
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_emailAddressId_0:40"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "emailAddressId",
            "textToLower": "emailaddressid",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 40
              },
              "end": {
                "line": 0,
                "character": 54
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_emailAddressId_0:40"
          },
          "parentId": "Messaging.singleemailmessage.method.setorgwideemailaddressid(id)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Messaging.singleemailmessage.setorgwideemailaddressid.datatype.ID",
            "nodeType": "datatype",
            "name": "ID",
            "startToken": {
              "type": "datatype.primitive",
              "text": "ID",
              "textToLower": "id",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 37
                },
                "end": {
                  "line": 0,
                  "character": 39
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_ID_0:37"
            },
            "parentId": "Messaging.singleemailmessage.setorgwideemailaddressid",
            "order": 0,
            "memberOrder": 0,
            "type": "ID"
          },
          "description": "",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "setreferences(string)": {
      "id": "Messaging.singleemailmessage.method.setreferences(string)",
      "nodeType": "method",
      "name": "setReferences",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setReferences",
        "textToLower": "setreferences",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setReferences_-1:0"
      },
      "parentId": "Messaging.singleemailmessage",
      "order": 13,
      "memberOrder": 14,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public Void setReferences(String references)",
      "overrideSignature": "public override Void setReferences(String references)",
      "simplifiedSignature": "setReferences(String)",
      "datatype": {
        "id": "Messaging.singleemailmessage.setreferences.datatype.Void",
        "nodeType": "datatype",
        "name": "Void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "Void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Void_0:7"
        },
        "parentId": "Messaging.singleemailmessage.setreferences",
        "order": 0,
        "memberOrder": 0,
        "type": "Void"
      },
      "description": "Optional. The References field of the outgoing email. Identifies an email thread. Contains the parent emails' References and message IDs, and possibly the In-Reply-To fields.",
      "parentName": "SingleEmailMessage",
      "variables": {},
      "params": {
        "references": {
          "id": "Messaging.singleemailmessage.method.setreferences(string).varParam.references",
          "nodeType": "variable",
          "name": "references",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "references",
            "textToLower": "references",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 33
              },
              "end": {
                "line": 0,
                "character": 43
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_references_0:33"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "references",
            "textToLower": "references",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 33
              },
              "end": {
                "line": 0,
                "character": 43
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_references_0:33"
          },
          "parentId": "Messaging.singleemailmessage.method.setreferences(string)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Messaging.singleemailmessage.setreferences.datatype.String",
            "nodeType": "datatype",
            "name": "String",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 26
                },
                "end": {
                  "line": 0,
                  "character": 32
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:26"
            },
            "parentId": "Messaging.singleemailmessage.setreferences",
            "order": 0,
            "memberOrder": 0,
            "type": "String"
          },
          "description": "",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "setsubject(string)": {
      "id": "Messaging.singleemailmessage.method.setsubject(string)",
      "nodeType": "method",
      "name": "setSubject",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setSubject",
        "textToLower": "setsubject",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setSubject_-1:0"
      },
      "parentId": "Messaging.singleemailmessage",
      "order": 14,
      "memberOrder": 15,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public Void setSubject(String subject)",
      "overrideSignature": "public override Void setSubject(String subject)",
      "simplifiedSignature": "setSubject(String)",
      "datatype": {
        "id": "Messaging.singleemailmessage.setsubject.datatype.Void",
        "nodeType": "datatype",
        "name": "Void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "Void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Void_0:7"
        },
        "parentId": "Messaging.singleemailmessage.setsubject",
        "order": 0,
        "memberOrder": 0,
        "type": "Void"
      },
      "description": "Optional. The email subject line. If you are using an email template, the subject line of the template overrides this value.",
      "parentName": "SingleEmailMessage",
      "variables": {},
      "params": {
        "subject": {
          "id": "Messaging.singleemailmessage.method.setsubject(string).varParam.subject",
          "nodeType": "variable",
          "name": "subject",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "subject",
            "textToLower": "subject",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 30
              },
              "end": {
                "line": 0,
                "character": 37
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_subject_0:30"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "subject",
            "textToLower": "subject",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 30
              },
              "end": {
                "line": 0,
                "character": 37
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_subject_0:30"
          },
          "parentId": "Messaging.singleemailmessage.method.setsubject(string)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Messaging.singleemailmessage.setsubject.datatype.String",
            "nodeType": "datatype",
            "name": "String",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 23
                },
                "end": {
                  "line": 0,
                  "character": 29
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:23"
            },
            "parentId": "Messaging.singleemailmessage.setsubject",
            "order": 0,
            "memberOrder": 0,
            "type": "String"
          },
          "description": "",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "settargetobjectid(id)": {
      "id": "Messaging.singleemailmessage.method.settargetobjectid(id)",
      "nodeType": "method",
      "name": "setTargetObjectId",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setTargetObjectId",
        "textToLower": "settargetobjectid",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setTargetObjectId_-1:0"
      },
      "parentId": "Messaging.singleemailmessage",
      "order": 15,
      "memberOrder": 16,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public Void setTargetObjectId(ID targetObjectId)",
      "overrideSignature": "public override Void setTargetObjectId(ID targetObjectId)",
      "simplifiedSignature": "setTargetObjectId(ID)",
      "datatype": {
        "id": "Messaging.singleemailmessage.settargetobjectid.datatype.Void",
        "nodeType": "datatype",
        "name": "Void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "Void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Void_0:7"
        },
        "parentId": "Messaging.singleemailmessage.settargetobjectid",
        "order": 0,
        "memberOrder": 0,
        "type": "Void"
      },
      "description": "Required if using a template, optional otherwise. The ID of the contact, lead, or user to which the email will be sent. The ID you specify sets the context and ensures that merge fields in the template contain the correct data.",
      "parentName": "SingleEmailMessage",
      "variables": {},
      "params": {
        "targetobjectid": {
          "id": "Messaging.singleemailmessage.method.settargetobjectid(id).varParam.targetobjectid",
          "nodeType": "variable",
          "name": "targetObjectId",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "targetObjectId",
            "textToLower": "targetobjectid",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 33
              },
              "end": {
                "line": 0,
                "character": 47
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_targetObjectId_0:33"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "targetObjectId",
            "textToLower": "targetobjectid",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 33
              },
              "end": {
                "line": 0,
                "character": 47
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_targetObjectId_0:33"
          },
          "parentId": "Messaging.singleemailmessage.method.settargetobjectid(id)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Messaging.singleemailmessage.settargetobjectid.datatype.ID",
            "nodeType": "datatype",
            "name": "ID",
            "startToken": {
              "type": "datatype.primitive",
              "text": "ID",
              "textToLower": "id",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 30
                },
                "end": {
                  "line": 0,
                  "character": 32
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_ID_0:30"
            },
            "parentId": "Messaging.singleemailmessage.settargetobjectid",
            "order": 0,
            "memberOrder": 0,
            "type": "ID"
          },
          "description": "",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "settemplateid(id)": {
      "id": "Messaging.singleemailmessage.method.settemplateid(id)",
      "nodeType": "method",
      "name": "setTemplateId",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setTemplateId",
        "textToLower": "settemplateid",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setTemplateId_-1:0"
      },
      "parentId": "Messaging.singleemailmessage",
      "order": 16,
      "memberOrder": 17,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public Void setTemplateId(ID templateId)",
      "overrideSignature": "public override Void setTemplateId(ID templateId)",
      "simplifiedSignature": "setTemplateId(ID)",
      "datatype": {
        "id": "Messaging.singleemailmessage.settemplateid.datatype.Void",
        "nodeType": "datatype",
        "name": "Void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "Void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Void_0:7"
        },
        "parentId": "Messaging.singleemailmessage.settemplateid",
        "order": 0,
        "memberOrder": 0,
        "type": "Void"
      },
      "description": "Required if using a template, optional otherwise. The ID of the template used to create the email.",
      "parentName": "SingleEmailMessage",
      "variables": {},
      "params": {
        "templateid": {
          "id": "Messaging.singleemailmessage.method.settemplateid(id).varParam.templateid",
          "nodeType": "variable",
          "name": "templateId",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "templateId",
            "textToLower": "templateid",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 29
              },
              "end": {
                "line": 0,
                "character": 39
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_templateId_0:29"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "templateId",
            "textToLower": "templateid",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 29
              },
              "end": {
                "line": 0,
                "character": 39
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_templateId_0:29"
          },
          "parentId": "Messaging.singleemailmessage.method.settemplateid(id)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Messaging.singleemailmessage.settemplateid.datatype.ID",
            "nodeType": "datatype",
            "name": "ID",
            "startToken": {
              "type": "datatype.primitive",
              "text": "ID",
              "textToLower": "id",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 26
                },
                "end": {
                  "line": 0,
                  "character": 28
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_ID_0:26"
            },
            "parentId": "Messaging.singleemailmessage.settemplateid",
            "order": 0,
            "memberOrder": 0,
            "type": "ID"
          },
          "description": "",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "settoaddresses(string[])": {
      "id": "Messaging.singleemailmessage.method.settoaddresses(string[])",
      "nodeType": "method",
      "name": "setToAddresses",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setToAddresses",
        "textToLower": "settoaddresses",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setToAddresses_-1:0"
      },
      "parentId": "Messaging.singleemailmessage",
      "order": 17,
      "memberOrder": 18,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public Void setToAddresses(String[] toAddresses)",
      "overrideSignature": "public override Void setToAddresses(String[] toAddresses)",
      "simplifiedSignature": "setToAddresses(String[])",
      "datatype": {
        "id": "Messaging.singleemailmessage.settoaddresses.datatype.Void",
        "nodeType": "datatype",
        "name": "Void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "Void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Void_0:7"
        },
        "parentId": "Messaging.singleemailmessage.settoaddresses",
        "order": 0,
        "memberOrder": 0,
        "type": "Void"
      },
      "description": "Optional. A list of email addresses or object IDs of the contacts, leads, and users youâ€™re sending the email to. The maximum size for this field is 4,000 bytes. The maximum total of toAddresses, ccAddresses, and bccAddresses per email is 150.",
      "parentName": "SingleEmailMessage",
      "variables": {},
      "params": {
        "toaddresses": {
          "id": "Messaging.singleemailmessage.method.settoaddresses(string[]).varParam.toaddresses",
          "nodeType": "variable",
          "name": "toAddresses",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "toAddresses",
            "textToLower": "toaddresses",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 36
              },
              "end": {
                "line": 0,
                "character": 47
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_toAddresses_0:36"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "toAddresses",
            "textToLower": "toaddresses",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 36
              },
              "end": {
                "line": 0,
                "character": 47
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_toAddresses_0:36"
          },
          "parentId": "Messaging.singleemailmessage.method.settoaddresses(string[])",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Messaging.singleemailmessage.settoaddresses.datatype.String[]",
            "nodeType": "datatype",
            "name": "String[]",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 27
                },
                "end": {
                  "line": 0,
                  "character": 33
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:27"
            },
            "parentId": "Messaging.singleemailmessage.settoaddresses",
            "order": 0,
            "memberOrder": 0,
            "type": "String[]"
          },
          "description": "",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "settreatbodiesastemplate(boolean)": {
      "id": "Messaging.singleemailmessage.method.settreatbodiesastemplate(boolean)",
      "nodeType": "method",
      "name": "setTreatBodiesAsTemplate",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setTreatBodiesAsTemplate",
        "textToLower": "settreatbodiesastemplate",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setTreatBodiesAsTemplate_-1:0"
      },
      "parentId": "Messaging.singleemailmessage",
      "order": 18,
      "memberOrder": 19,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public void setTreatBodiesAsTemplate(Boolean treatAsTemplate)",
      "overrideSignature": "public override void setTreatBodiesAsTemplate(Boolean treatAsTemplate)",
      "simplifiedSignature": "setTreatBodiesAsTemplate(Boolean)",
      "datatype": {
        "id": "Messaging.singleemailmessage.settreatbodiesastemplate.datatype.void",
        "nodeType": "datatype",
        "name": "void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_void_0:7"
        },
        "parentId": "Messaging.singleemailmessage.settreatbodiesastemplate",
        "order": 0,
        "memberOrder": 0,
        "type": "void"
      },
      "description": "Optional. If set to true, the subject, plain text, and HTML text bodies of the email are treated as template data. The merge fields are resolved using the renderEmailTemplate method. Default is false.",
      "parentName": "SingleEmailMessage",
      "variables": {},
      "params": {
        "treatastemplate": {
          "id": "Messaging.singleemailmessage.method.settreatbodiesastemplate(boolean).varParam.treatastemplate",
          "nodeType": "variable",
          "name": "treatAsTemplate",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "treatAsTemplate",
            "textToLower": "treatastemplate",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 45
              },
              "end": {
                "line": 0,
                "character": 60
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_treatAsTemplate_0:45"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "treatAsTemplate",
            "textToLower": "treatastemplate",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 45
              },
              "end": {
                "line": 0,
                "character": 60
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_treatAsTemplate_0:45"
          },
          "parentId": "Messaging.singleemailmessage.method.settreatbodiesastemplate(boolean)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Messaging.singleemailmessage.settreatbodiesastemplate.datatype.Boolean",
            "nodeType": "datatype",
            "name": "Boolean",
            "startToken": {
              "type": "datatype.primitive",
              "text": "Boolean",
              "textToLower": "boolean",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 37
                },
                "end": {
                  "line": 0,
                  "character": 44
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_Boolean_0:37"
            },
            "parentId": "Messaging.singleemailmessage.settreatbodiesastemplate",
            "order": 0,
            "memberOrder": 0,
            "type": "Boolean"
          },
          "description": "",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "settreattargetobjectasrecipient(boolean)": {
      "id": "Messaging.singleemailmessage.method.settreattargetobjectasrecipient(boolean)",
      "nodeType": "method",
      "name": "setTreatTargetObjectAsRecipient",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setTreatTargetObjectAsRecipient",
        "textToLower": "settreattargetobjectasrecipient",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setTreatTargetObjectAsRecipient_-1:0"
      },
      "parentId": "Messaging.singleemailmessage",
      "order": 19,
      "memberOrder": 20,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public void setTreatTargetObjectAsRecipient(Boolean treatAsRecipient)",
      "overrideSignature": "public override void setTreatTargetObjectAsRecipient(Boolean treatAsRecipient)",
      "simplifiedSignature": "setTreatTargetObjectAsRecipient(Boolean)",
      "datatype": {
        "id": "Messaging.singleemailmessage.settreattargetobjectasrecipient.datatype.void",
        "nodeType": "datatype",
        "name": "void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_void_0:7"
        },
        "parentId": "Messaging.singleemailmessage.settreattargetobjectasrecipient",
        "order": 0,
        "memberOrder": 0,
        "type": "void"
      },
      "description": "Optional. If set to true, the targetObjectId (a contact, lead, or user) is the recipient of the email. If set to false, the targetObjectId is supplied as the WhoId field for template rendering but isnâ€™t a recipient of the email. The default is true.",
      "parentName": "SingleEmailMessage",
      "variables": {},
      "params": {
        "treatasrecipient": {
          "id": "Messaging.singleemailmessage.method.settreattargetobjectasrecipient(boolean).varParam.treatasrecipient",
          "nodeType": "variable",
          "name": "treatAsRecipient",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "treatAsRecipient",
            "textToLower": "treatasrecipient",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 52
              },
              "end": {
                "line": 0,
                "character": 68
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_treatAsRecipient_0:52"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "treatAsRecipient",
            "textToLower": "treatasrecipient",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 52
              },
              "end": {
                "line": 0,
                "character": 68
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_treatAsRecipient_0:52"
          },
          "parentId": "Messaging.singleemailmessage.method.settreattargetobjectasrecipient(boolean)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Messaging.singleemailmessage.settreattargetobjectasrecipient.datatype.Boolean",
            "nodeType": "datatype",
            "name": "Boolean",
            "startToken": {
              "type": "datatype.primitive",
              "text": "Boolean",
              "textToLower": "boolean",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 44
                },
                "end": {
                  "line": 0,
                  "character": 51
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_Boolean_0:44"
            },
            "parentId": "Messaging.singleemailmessage.settreattargetobjectasrecipient",
            "order": 0,
            "memberOrder": 0,
            "type": "Boolean"
          },
          "description": "",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "setwhatid(id)": {
      "id": "Messaging.singleemailmessage.method.setwhatid(id)",
      "nodeType": "method",
      "name": "setWhatId",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setWhatId",
        "textToLower": "setwhatid",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setWhatId_-1:0"
      },
      "parentId": "Messaging.singleemailmessage",
      "order": 20,
      "memberOrder": 21,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public Void setWhatId(ID whatId)",
      "overrideSignature": "public override Void setWhatId(ID whatId)",
      "simplifiedSignature": "setWhatId(ID)",
      "datatype": {
        "id": "Messaging.singleemailmessage.setwhatid.datatype.Void",
        "nodeType": "datatype",
        "name": "Void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "Void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_Void_0:7"
        },
        "parentId": "Messaging.singleemailmessage.setwhatid",
        "order": 0,
        "memberOrder": 0,
        "type": "Void"
      },
      "description": "If you specify a contact for the targetObjectId field, you can specify an optional whatId as well. This helps to further ensure that merge fields in the template contain the correct data.",
      "parentName": "SingleEmailMessage",
      "variables": {},
      "params": {
        "whatid": {
          "id": "Messaging.singleemailmessage.method.setwhatid(id).varParam.whatid",
          "nodeType": "variable",
          "name": "whatId",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "whatId",
            "textToLower": "whatid",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 25
              },
              "end": {
                "line": 0,
                "character": 31
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_whatId_0:25"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "whatId",
            "textToLower": "whatid",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 25
              },
              "end": {
                "line": 0,
                "character": 31
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_whatId_0:25"
          },
          "parentId": "Messaging.singleemailmessage.method.setwhatid(id)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Messaging.singleemailmessage.setwhatid.datatype.ID",
            "nodeType": "datatype",
            "name": "ID",
            "startToken": {
              "type": "datatype.primitive",
              "text": "ID",
              "textToLower": "id",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 22
                },
                "end": {
                  "line": 0,
                  "character": 24
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_ID_0:22"
            },
            "parentId": "Messaging.singleemailmessage.setwhatid",
            "order": 0,
            "memberOrder": 0,
            "type": "ID"
          },
          "description": "",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    }
  },
  "constructors": {
    "singleemailmessage()": {
      "id": "Messaging.singleemailmessage.method.singleemailmessage()",
      "nodeType": "constructor",
      "name": "SingleEmailMessage",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "SingleEmailMessage",
        "textToLower": "singleemailmessage",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_SingleEmailMessage_-1:0"
      },
      "parentId": "Messaging.singleemailmessage",
      "order": 1,
      "memberOrder": 1,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public SingleEmailMessage()",
      "overrideSignature": "public override SingleEmailMessage()",
      "simplifiedSignature": "SingleEmailMessage()",
      "description": "Creates a new instance of the Messaging.SingleEmailMessage class.",
      "parentName": "SingleEmailMessage",
      "variables": {},
      "params": {},
      "queries": [],
      "exceptions": []
    }
  },
  "extendsType": "",
  "implementTypes": [],
  "implements": {},
  "totalMembers": 21,
  "queries": []
}