{
  "id": "Messaging.singleemailmessage",
  "type": "class",
  "name": "SingleEmailMessage",
  "namespace": "Messaging",
  "startToken": {
    "type": "declaration.entity.name.class",
    "text": "SingleEmailMessage",
    "textToLower": "singleemailmessage",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "declaration.entity.name.class_SingleEmailMessage_-1:0"
  },
  "accessModifier": {
    "type": "keyword.modifier.access",
    "text": "global",
    "textToLower": "global",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "keyword.modifier.access_global_-1:0"
  },
  "sharingModifier": {
    "type": "keyword.modifier.sharing",
    "text": "without sharing",
    "textToLower": "without sharing",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "keyword.modifier.sharing_without sharing_-1:0"
  },
  "description": "Contains methods for sending single email messages.",
  "documentation": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_classes_email_outbound_single.htm",
  "classes": {},
  "interfaces": {},
  "enums": {},
  "variables": {},
  "methods": {
    "gettemplatename()": {
      "id": "Messaging.singleemailmessage.gettemplatename",
      "type": "method",
      "name": "getTemplateName",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getTemplateName",
        "textToLower": "gettemplatename",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getTemplateName_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public String getTemplateName()",
      "simplifiedSignature": "getTemplateName()",
      "datatype": {
        "id": "Messaging.singleemailmessage.gettemplatename.String",
        "type": "datatype",
        "name": "String"
      },
      "description": "The name of the template used to create the email.",
      "variables": {}
    },
    "setbccaddresses(string[])": {
      "id": "Messaging.singleemailmessage.setbccaddresses",
      "type": "method",
      "name": "setBccAddresses",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setBccAddresses",
        "textToLower": "setbccaddresses",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setBccAddresses_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setBccAddresses(String[] bccAddresses)",
      "simplifiedSignature": "setBccAddresses(String[])",
      "datatype": {
        "id": "Messaging.singleemailmessage.setbccaddresses.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Optional. A list of blind carbon copy (BCC) addresses or object IDs of the contacts, leads, and users you’re sending the email to. The maximum size for this field is 4,000 bytes. The maximum total of toAddresses, ccAddresses, and bccAddresses per email is 150.",
      "variables": {
        "bccAddresses": {
          "id": "Messaging.singleemailmessage.setbccaddresses.bccaddresses",
          "type": "var",
          "name": "bccAddresses",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "bccAddresses",
            "textToLower": "bccaddresses",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_bccAddresses_-1:0"
          },
          "signature": "String[] bccAddresses",
          "datatype": {
            "id": "Messaging.singleemailmessage.setbccaddresses.string[]",
            "type": "datatype",
            "name": "String[]"
          }
        }
      }
    },
    "setccaddresses(string[])": {
      "id": "Messaging.singleemailmessage.setccaddresses",
      "type": "method",
      "name": "setCcAddresses",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setCcAddresses",
        "textToLower": "setccaddresses",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setCcAddresses_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setCcAddresses(String[] ccAddresses)",
      "simplifiedSignature": "setCcAddresses(String[])",
      "datatype": {
        "id": "Messaging.singleemailmessage.setccaddresses.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Optional. A list of carbon copy (CC) addresses or object IDs of the contacts, leads, and users you’re sending the email to. The maximum size for this field is 4,000 bytes. The maximum total of toAddresses, ccAddresses, and bccAddresses per email is 150.",
      "variables": {
        "ccAddresses": {
          "id": "Messaging.singleemailmessage.setccaddresses.ccaddresses",
          "type": "var",
          "name": "ccAddresses",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "ccAddresses",
            "textToLower": "ccaddresses",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_ccAddresses_-1:0"
          },
          "signature": "String[] ccAddresses",
          "datatype": {
            "id": "Messaging.singleemailmessage.setccaddresses.string[]",
            "type": "datatype",
            "name": "String[]"
          }
        }
      }
    },
    "setcharset(string)": {
      "id": "Messaging.singleemailmessage.setcharset",
      "type": "method",
      "name": "setCharset",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setCharset",
        "textToLower": "setcharset",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setCharset_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setCharset(String characterSet)",
      "simplifiedSignature": "setCharset(String)",
      "datatype": {
        "id": "Messaging.singleemailmessage.setcharset.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Optional. The character set for the email. If this value is null, the user's default value is used.",
      "variables": {
        "characterSet": {
          "id": "Messaging.singleemailmessage.setcharset.characterset",
          "type": "var",
          "name": "characterSet",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "characterSet",
            "textToLower": "characterset",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_characterSet_-1:0"
          },
          "signature": "String characterSet",
          "datatype": {
            "id": "Messaging.singleemailmessage.setcharset.string",
            "type": "datatype",
            "name": "String"
          }
        }
      }
    },
    "setdocumentattachments(id[])": {
      "id": "Messaging.singleemailmessage.setdocumentattachments",
      "type": "method",
      "name": "setDocumentAttachments",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setDocumentAttachments",
        "textToLower": "setdocumentattachments",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setDocumentAttachments_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setDocumentAttachments(ID[] documentIds)",
      "simplifiedSignature": "setDocumentAttachments(ID[])",
      "datatype": {
        "id": "Messaging.singleemailmessage.setdocumentattachments.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "(Deprecated. Use setEntityAttachments() instead.) Optional. A list containing the ID of each document object you want to attach to the email.",
      "variables": {
        "documentIds": {
          "id": "Messaging.singleemailmessage.setdocumentattachments.documentids",
          "type": "var",
          "name": "documentIds",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "documentIds",
            "textToLower": "documentids",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_documentIds_-1:0"
          },
          "signature": "ID[] documentIds",
          "datatype": {
            "id": "Messaging.singleemailmessage.setdocumentattachments.id[]",
            "type": "datatype",
            "name": "ID[]"
          }
        }
      }
    },
    "setentityattachments(list)": {
      "id": "Messaging.singleemailmessage.setentityattachments",
      "type": "method",
      "name": "setEntityAttachments",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setEntityAttachments",
        "textToLower": "setentityattachments",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setEntityAttachments_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setEntityAttachments(List <String>)",
      "simplifiedSignature": "setEntityAttachments(List)",
      "datatype": {
        "id": "Messaging.singleemailmessage.setentityattachments.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Optional. Array of IDs of Document, ContentVersion, or Attachment items to attach to the email.",
      "variables": {
        "<String>": {
          "id": "Messaging.singleemailmessage.setentityattachments.<string>",
          "type": "var",
          "name": "<String>",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "<String>",
            "textToLower": "<string>",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_<String>_-1:0"
          },
          "signature": "List <String>",
          "datatype": {
            "id": "Messaging.singleemailmessage.setentityattachments.list",
            "type": "datatype",
            "name": "List"
          }
        }
      }
    },
    "setfileattachments(emailfileattachment[])": {
      "id": "Messaging.singleemailmessage.setfileattachments",
      "type": "method",
      "name": "setFileAttachments",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setFileAttachments",
        "textToLower": "setfileattachments",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setFileAttachments_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setFileAttachments(EmailFileAttachment[] fileNames)",
      "simplifiedSignature": "setFileAttachments(EmailFileAttachment[])",
      "datatype": {
        "id": "Messaging.singleemailmessage.setfileattachments.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Optional. A list containing the file names of the binary and text files you want to attach to the email.",
      "variables": {
        "fileNames": {
          "id": "Messaging.singleemailmessage.setfileattachments.filenames",
          "type": "var",
          "name": "fileNames",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "fileNames",
            "textToLower": "filenames",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_fileNames_-1:0"
          },
          "signature": "EmailFileAttachment[] fileNames",
          "datatype": {
            "id": "Messaging.singleemailmessage.setfileattachments.emailfileattachment[]",
            "type": "datatype",
            "name": "EmailFileAttachment[]"
          }
        }
      }
    },
    "sethtmlbody(string)": {
      "id": "Messaging.singleemailmessage.sethtmlbody",
      "type": "method",
      "name": "setHtmlBody",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setHtmlBody",
        "textToLower": "sethtmlbody",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setHtmlBody_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setHtmlBody(String htmlBody)",
      "simplifiedSignature": "setHtmlBody(String)",
      "datatype": {
        "id": "Messaging.singleemailmessage.sethtmlbody.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Optional. The HTML version of the email, specified by the sender. The value is encoded according to the specification associated with the organization. Specify a value for setTemplateId, setHtmlBody, or setPlainTextBody. Or, you can define both setHtmlBody and setPlainTextBody.",
      "variables": {
        "htmlBody": {
          "id": "Messaging.singleemailmessage.sethtmlbody.htmlbody",
          "type": "var",
          "name": "htmlBody",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "htmlBody",
            "textToLower": "htmlbody",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_htmlBody_-1:0"
          },
          "signature": "String htmlBody",
          "datatype": {
            "id": "Messaging.singleemailmessage.sethtmlbody.string",
            "type": "datatype",
            "name": "String"
          }
        }
      }
    },
    "setinreplyto(string)": {
      "id": "Messaging.singleemailmessage.setinreplyto",
      "type": "method",
      "name": "setInReplyTo",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setInReplyTo",
        "textToLower": "setinreplyto",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setInReplyTo_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setInReplyTo(String parentMessageIds)",
      "simplifiedSignature": "setInReplyTo(String)",
      "datatype": {
        "id": "Messaging.singleemailmessage.setinreplyto.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Sets the optional In-Reply-To field of the outgoing email. This field identifies the email or emails to which this email is a reply (parent emails).",
      "variables": {
        "parentMessageIds": {
          "id": "Messaging.singleemailmessage.setinreplyto.parentmessageids",
          "type": "var",
          "name": "parentMessageIds",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "parentMessageIds",
            "textToLower": "parentmessageids",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_parentMessageIds_-1:0"
          },
          "signature": "String parentMessageIds",
          "datatype": {
            "id": "Messaging.singleemailmessage.setinreplyto.string",
            "type": "datatype",
            "name": "String"
          }
        }
      }
    },
    "setoptoutpolicy(string)": {
      "id": "Messaging.singleemailmessage.setoptoutpolicy",
      "type": "method",
      "name": "setOptOutPolicy",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setOptOutPolicy",
        "textToLower": "setoptoutpolicy",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setOptOutPolicy_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setOptOutPolicy(String emailOptOutPolicy)",
      "simplifiedSignature": "setOptOutPolicy(String)",
      "datatype": {
        "id": "Messaging.singleemailmessage.setoptoutpolicy.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Optional. If you added recipients by ID instead of email address and the Email Opt Out option is set, this method determines the behavior of the sendEmail() call. If you add recipients by their email addresses, the opt-out settings for those recipients aren’t checked and those recipients always receive the email.",
      "variables": {
        "emailOptOutPolicy": {
          "id": "Messaging.singleemailmessage.setoptoutpolicy.emailoptoutpolicy",
          "type": "var",
          "name": "emailOptOutPolicy",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "emailOptOutPolicy",
            "textToLower": "emailoptoutpolicy",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_emailOptOutPolicy_-1:0"
          },
          "signature": "String emailOptOutPolicy",
          "datatype": {
            "id": "Messaging.singleemailmessage.setoptoutpolicy.string",
            "type": "datatype",
            "name": "String"
          }
        }
      }
    },
    "setplaintextbody(string)": {
      "id": "Messaging.singleemailmessage.setplaintextbody",
      "type": "method",
      "name": "setPlainTextBody",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setPlainTextBody",
        "textToLower": "setplaintextbody",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setPlainTextBody_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setPlainTextBody(String plainTextBody)",
      "simplifiedSignature": "setPlainTextBody(String)",
      "datatype": {
        "id": "Messaging.singleemailmessage.setplaintextbody.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Optional. The text version of the email, specified by the sender. Specify a value for setTemplateId, setHtmlBody, or setPlainTextBody. Or, you can define both setHtmlBody and setPlainTextBody.",
      "variables": {
        "plainTextBody": {
          "id": "Messaging.singleemailmessage.setplaintextbody.plaintextbody",
          "type": "var",
          "name": "plainTextBody",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "plainTextBody",
            "textToLower": "plaintextbody",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_plainTextBody_-1:0"
          },
          "signature": "String plainTextBody",
          "datatype": {
            "id": "Messaging.singleemailmessage.setplaintextbody.string",
            "type": "datatype",
            "name": "String"
          }
        }
      }
    },
    "setorgwideemailaddressid(id)": {
      "id": "Messaging.singleemailmessage.setorgwideemailaddressid",
      "type": "method",
      "name": "setOrgWideEmailAddressId",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setOrgWideEmailAddressId",
        "textToLower": "setorgwideemailaddressid",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setOrgWideEmailAddressId_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setOrgWideEmailAddressId(ID emailAddressId)",
      "simplifiedSignature": "setOrgWideEmailAddressId(ID)",
      "datatype": {
        "id": "Messaging.singleemailmessage.setorgwideemailaddressid.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Optional. The ID of the organization-wide email address associated with the outgoing email. The object's DisplayName field cannot be set if the setSenderDisplayName field is already set.",
      "variables": {
        "emailAddressId": {
          "id": "Messaging.singleemailmessage.setorgwideemailaddressid.emailaddressid",
          "type": "var",
          "name": "emailAddressId",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "emailAddressId",
            "textToLower": "emailaddressid",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_emailAddressId_-1:0"
          },
          "signature": "ID emailAddressId",
          "datatype": {
            "id": "Messaging.singleemailmessage.setorgwideemailaddressid.id",
            "type": "datatype",
            "name": "ID"
          }
        }
      }
    },
    "setreferences(string)": {
      "id": "Messaging.singleemailmessage.setreferences",
      "type": "method",
      "name": "setReferences",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setReferences",
        "textToLower": "setreferences",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setReferences_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setReferences(String references)",
      "simplifiedSignature": "setReferences(String)",
      "datatype": {
        "id": "Messaging.singleemailmessage.setreferences.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Optional. The References field of the outgoing email. Identifies an email thread. Contains the parent emails' References and message IDs, and possibly the In-Reply-To fields.",
      "variables": {
        "references": {
          "id": "Messaging.singleemailmessage.setreferences.references",
          "type": "var",
          "name": "references",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "references",
            "textToLower": "references",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_references_-1:0"
          },
          "signature": "String references",
          "datatype": {
            "id": "Messaging.singleemailmessage.setreferences.string",
            "type": "datatype",
            "name": "String"
          }
        }
      }
    },
    "setsubject(string)": {
      "id": "Messaging.singleemailmessage.setsubject",
      "type": "method",
      "name": "setSubject",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setSubject",
        "textToLower": "setsubject",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setSubject_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setSubject(String subject)",
      "simplifiedSignature": "setSubject(String)",
      "datatype": {
        "id": "Messaging.singleemailmessage.setsubject.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Optional. The email subject line. If you are using an email template, the subject line of the template overrides this value.",
      "variables": {
        "subject": {
          "id": "Messaging.singleemailmessage.setsubject.subject",
          "type": "var",
          "name": "subject",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "subject",
            "textToLower": "subject",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_subject_-1:0"
          },
          "signature": "String subject",
          "datatype": {
            "id": "Messaging.singleemailmessage.setsubject.string",
            "type": "datatype",
            "name": "String"
          }
        }
      }
    },
    "settargetobjectid(id)": {
      "id": "Messaging.singleemailmessage.settargetobjectid",
      "type": "method",
      "name": "setTargetObjectId",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setTargetObjectId",
        "textToLower": "settargetobjectid",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setTargetObjectId_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setTargetObjectId(ID targetObjectId)",
      "simplifiedSignature": "setTargetObjectId(ID)",
      "datatype": {
        "id": "Messaging.singleemailmessage.settargetobjectid.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Required if using a template, optional otherwise. The ID of the contact, lead, or user to which the email will be sent. The ID you specify sets the context and ensures that merge fields in the template contain the correct data.",
      "variables": {
        "targetObjectId": {
          "id": "Messaging.singleemailmessage.settargetobjectid.targetobjectid",
          "type": "var",
          "name": "targetObjectId",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "targetObjectId",
            "textToLower": "targetobjectid",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_targetObjectId_-1:0"
          },
          "signature": "ID targetObjectId",
          "datatype": {
            "id": "Messaging.singleemailmessage.settargetobjectid.id",
            "type": "datatype",
            "name": "ID"
          }
        }
      }
    },
    "settemplateid(id)": {
      "id": "Messaging.singleemailmessage.settemplateid",
      "type": "method",
      "name": "setTemplateId",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setTemplateId",
        "textToLower": "settemplateid",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setTemplateId_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setTemplateId(ID templateId)",
      "simplifiedSignature": "setTemplateId(ID)",
      "datatype": {
        "id": "Messaging.singleemailmessage.settemplateid.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Required if using a template, optional otherwise. The ID of the template used to create the email.",
      "variables": {
        "templateId": {
          "id": "Messaging.singleemailmessage.settemplateid.templateid",
          "type": "var",
          "name": "templateId",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "templateId",
            "textToLower": "templateid",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_templateId_-1:0"
          },
          "signature": "ID templateId",
          "datatype": {
            "id": "Messaging.singleemailmessage.settemplateid.id",
            "type": "datatype",
            "name": "ID"
          }
        }
      }
    },
    "settoaddresses(string[])": {
      "id": "Messaging.singleemailmessage.settoaddresses",
      "type": "method",
      "name": "setToAddresses",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setToAddresses",
        "textToLower": "settoaddresses",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setToAddresses_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setToAddresses(String[] toAddresses)",
      "simplifiedSignature": "setToAddresses(String[])",
      "datatype": {
        "id": "Messaging.singleemailmessage.settoaddresses.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Optional. A list of email addresses or object IDs of the contacts, leads, and users you’re sending the email to. The maximum size for this field is 4,000 bytes. The maximum total of toAddresses, ccAddresses, and bccAddresses per email is 150.",
      "variables": {
        "toAddresses": {
          "id": "Messaging.singleemailmessage.settoaddresses.toaddresses",
          "type": "var",
          "name": "toAddresses",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "toAddresses",
            "textToLower": "toaddresses",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_toAddresses_-1:0"
          },
          "signature": "String[] toAddresses",
          "datatype": {
            "id": "Messaging.singleemailmessage.settoaddresses.string[]",
            "type": "datatype",
            "name": "String[]"
          }
        }
      }
    },
    "settreatbodiesastemplate(boolean)": {
      "id": "Messaging.singleemailmessage.settreatbodiesastemplate",
      "type": "method",
      "name": "setTreatBodiesAsTemplate",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setTreatBodiesAsTemplate",
        "textToLower": "settreatbodiesastemplate",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setTreatBodiesAsTemplate_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setTreatBodiesAsTemplate(Boolean treatAsTemplate)",
      "simplifiedSignature": "setTreatBodiesAsTemplate(Boolean)",
      "datatype": {
        "id": "Messaging.singleemailmessage.settreatbodiesastemplate.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Optional. If set to true, the subject, plain text, and HTML text bodies of the email are treated as template data. The merge fields are resolved using the renderEmailTemplate method. Default is false.",
      "variables": {
        "treatAsTemplate": {
          "id": "Messaging.singleemailmessage.settreatbodiesastemplate.treatastemplate",
          "type": "var",
          "name": "treatAsTemplate",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "treatAsTemplate",
            "textToLower": "treatastemplate",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_treatAsTemplate_-1:0"
          },
          "signature": "Boolean treatAsTemplate",
          "datatype": {
            "id": "Messaging.singleemailmessage.settreatbodiesastemplate.boolean",
            "type": "datatype",
            "name": "Boolean"
          }
        }
      }
    },
    "settreattargetobjectasrecipient(boolean)": {
      "id": "Messaging.singleemailmessage.settreattargetobjectasrecipient",
      "type": "method",
      "name": "setTreatTargetObjectAsRecipient",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setTreatTargetObjectAsRecipient",
        "textToLower": "settreattargetobjectasrecipient",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setTreatTargetObjectAsRecipient_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setTreatTargetObjectAsRecipient(Boolean treatAsRecipient)",
      "simplifiedSignature": "setTreatTargetObjectAsRecipient(Boolean)",
      "datatype": {
        "id": "Messaging.singleemailmessage.settreattargetobjectasrecipient.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Optional. If set to true, the targetObjectId (a contact, lead, or user) is the recipient of the email. If set to false, the targetObjectId is supplied as the WhoId field for template rendering but isn’t a recipient of the email. The default is true.",
      "variables": {
        "treatAsRecipient": {
          "id": "Messaging.singleemailmessage.settreattargetobjectasrecipient.treatasrecipient",
          "type": "var",
          "name": "treatAsRecipient",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "treatAsRecipient",
            "textToLower": "treatasrecipient",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_treatAsRecipient_-1:0"
          },
          "signature": "Boolean treatAsRecipient",
          "datatype": {
            "id": "Messaging.singleemailmessage.settreattargetobjectasrecipient.boolean",
            "type": "datatype",
            "name": "Boolean"
          }
        }
      }
    },
    "setwhatid(id)": {
      "id": "Messaging.singleemailmessage.setwhatid",
      "type": "method",
      "name": "setWhatId",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setWhatId",
        "textToLower": "setwhatid",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setWhatId_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public void setWhatId(ID whatId)",
      "simplifiedSignature": "setWhatId(ID)",
      "datatype": {
        "id": "Messaging.singleemailmessage.setwhatid.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "If you specify a contact for the targetObjectId field, you can specify an optional whatId as well. This helps to further ensure that merge fields in the template contain the correct data.",
      "variables": {
        "whatId": {
          "id": "Messaging.singleemailmessage.setwhatid.whatid",
          "type": "var",
          "name": "whatId",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "whatId",
            "textToLower": "whatid",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_whatId_-1:0"
          },
          "signature": "ID whatId",
          "datatype": {
            "id": "Messaging.singleemailmessage.setwhatid.id",
            "type": "datatype",
            "name": "ID"
          }
        }
      }
    }
  },
  "constructors": {
    "singleemailmessage()": {
      "id": "Messaging.singleemailmessage.singleemailmessage",
      "type": "constructor",
      "name": "SingleEmailMessage",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "SingleEmailMessage",
        "textToLower": "singleemailmessage",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_SingleEmailMessage_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public SingleEmailMessage()",
      "simplifiedSignature": "SingleEmailMessage()",
      "datatype": {
        "id": "Messaging.singleemailmessage.singleemailmessage.constructor",
        "type": "datatype",
        "name": "SingleEmailMessage"
      },
      "description": "Creates a new instance of the Messaging.SingleEmailMessage class.",
      "variables": {}
    }
  },
  "extendsType": "",
  "implementTypes": [],
  "implements": {}
}