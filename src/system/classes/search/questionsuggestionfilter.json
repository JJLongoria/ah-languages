{
  "id": "Search.questionsuggestionfilter",
  "nodeType": "class",
  "name": "QuestionSuggestionFilter",
  "namespace": "Search",
  "startToken": {
    "type": "declaration.entity.name.class",
    "text": "QuestionSuggestionFilter",
    "textToLower": "questionsuggestionfilter",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "declaration.entity.name.class_QuestionSuggestionFilter_-1:0"
  },
  "order": 0,
  "memberOrder": 0,
  "accessModifier": {
    "type": "keyword.modifier.access",
    "text": "global",
    "textToLower": "global",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "keyword.modifier.access_global_-1:0"
  },
  "sharingModifier": {
    "type": "keyword.modifier.sharing",
    "text": "without sharing",
    "textToLower": "without sharing",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "keyword.modifier.sharing_without sharing_-1:0"
  },
  "description": "The Search.QuestionSuggestionFilter class filters results from a call to System.Search.suggest(searchQuery, sObjectType, options) when the SOSL searchQuery  contains a FeedItem object.",
  "documentation": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_class_Search_QuestionSuggestionFilter.htm",
  "classes": {},
  "interfaces": {},
  "enums": {},
  "variables": {},
  "methods": {
    "addgroupid(string)": {
      "id": "Search.questionsuggestionfilter.method.addgroupid(string)",
      "nodeType": "method",
      "name": "addGroupId",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "addGroupId",
        "textToLower": "addgroupid",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_addGroupId_-1:0"
      },
      "parentId": "Search.questionsuggestionfilter",
      "order": 1,
      "memberOrder": 1,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public void addGroupId(String groupId)",
      "overrideSignature": "public override void addGroupId(String groupId)",
      "simplifiedSignature": "addGroupId(String)",
      "datatype": {
        "id": "Search.questionsuggestionfilter.addgroupid.datatype.void",
        "nodeType": "datatype",
        "name": "void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_void_0:7"
        },
        "parentId": "Search.questionsuggestionfilter.addgroupid",
        "order": 0,
        "memberOrder": 0,
        "type": "void"
      },
      "description": "Adds a filter to display questions associated with the single specified group whose ID is passed in as an argument. This filter is optional.",
      "parentName": "QuestionSuggestionFilter",
      "variables": {},
      "params": {
        "groupid": {
          "id": "Search.questionsuggestionfilter.method.addgroupid(string).varParam.groupid",
          "nodeType": "variable",
          "name": "groupId",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "groupId",
            "textToLower": "groupid",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 30
              },
              "end": {
                "line": 0,
                "character": 37
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_groupId_0:30"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "groupId",
            "textToLower": "groupid",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 30
              },
              "end": {
                "line": 0,
                "character": 37
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_groupId_0:30"
          },
          "parentId": "Search.questionsuggestionfilter.method.addgroupid(string)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Search.questionsuggestionfilter.addgroupid.datatype.String",
            "nodeType": "datatype",
            "name": "String",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 23
                },
                "end": {
                  "line": 0,
                  "character": 29
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:23"
            },
            "parentId": "Search.questionsuggestionfilter.addgroupid",
            "order": 0,
            "memberOrder": 0,
            "type": "String"
          },
          "description": "The ID for a group.",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "addnetworkid(string)": {
      "id": "Search.questionsuggestionfilter.method.addnetworkid(string)",
      "nodeType": "method",
      "name": "addNetworkId",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "addNetworkId",
        "textToLower": "addnetworkid",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_addNetworkId_-1:0"
      },
      "parentId": "Search.questionsuggestionfilter",
      "order": 2,
      "memberOrder": 2,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public void addNetworkId(String networkId)",
      "overrideSignature": "public override void addNetworkId(String networkId)",
      "simplifiedSignature": "addNetworkId(String)",
      "datatype": {
        "id": "Search.questionsuggestionfilter.addnetworkid.datatype.void",
        "nodeType": "datatype",
        "name": "void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_void_0:7"
        },
        "parentId": "Search.questionsuggestionfilter.addnetworkid",
        "order": 0,
        "memberOrder": 0,
        "type": "void"
      },
      "description": "Adds a filter to display questions associated with the single specified network whose ID is passed in as an argument. This filter is optional.",
      "parentName": "QuestionSuggestionFilter",
      "variables": {},
      "params": {
        "networkid": {
          "id": "Search.questionsuggestionfilter.method.addnetworkid(string).varParam.networkid",
          "nodeType": "variable",
          "name": "networkId",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "networkId",
            "textToLower": "networkid",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 32
              },
              "end": {
                "line": 0,
                "character": 41
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_networkId_0:32"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "networkId",
            "textToLower": "networkid",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 32
              },
              "end": {
                "line": 0,
                "character": 41
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_networkId_0:32"
          },
          "parentId": "Search.questionsuggestionfilter.method.addnetworkid(string)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Search.questionsuggestionfilter.addnetworkid.datatype.String",
            "nodeType": "datatype",
            "name": "String",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 25
                },
                "end": {
                  "line": 0,
                  "character": 31
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:25"
            },
            "parentId": "Search.questionsuggestionfilter.addnetworkid",
            "order": 0,
            "memberOrder": 0,
            "type": "String"
          },
          "description": "The ID of the community about which you’re retrieving this information.",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "adduserid(string)": {
      "id": "Search.questionsuggestionfilter.method.adduserid(string)",
      "nodeType": "method",
      "name": "addUserId",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "addUserId",
        "textToLower": "adduserid",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_addUserId_-1:0"
      },
      "parentId": "Search.questionsuggestionfilter",
      "order": 3,
      "memberOrder": 3,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public void addUserId(String userId)",
      "overrideSignature": "public override void addUserId(String userId)",
      "simplifiedSignature": "addUserId(String)",
      "datatype": {
        "id": "Search.questionsuggestionfilter.adduserid.datatype.void",
        "nodeType": "datatype",
        "name": "void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_void_0:7"
        },
        "parentId": "Search.questionsuggestionfilter.adduserid",
        "order": 0,
        "memberOrder": 0,
        "type": "void"
      },
      "description": "Adds a filter to display questions belonging to the single specified user whose ID is passed in as an argument. This filter is optional.",
      "parentName": "QuestionSuggestionFilter",
      "variables": {},
      "params": {
        "userid": {
          "id": "Search.questionsuggestionfilter.method.adduserid(string).varParam.userid",
          "nodeType": "variable",
          "name": "userId",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "userId",
            "textToLower": "userid",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 29
              },
              "end": {
                "line": 0,
                "character": 35
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_userId_0:29"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "userId",
            "textToLower": "userid",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 29
              },
              "end": {
                "line": 0,
                "character": 35
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_userId_0:29"
          },
          "parentId": "Search.questionsuggestionfilter.method.adduserid(string)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Search.questionsuggestionfilter.adduserid.datatype.String",
            "nodeType": "datatype",
            "name": "String",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 22
                },
                "end": {
                  "line": 0,
                  "character": 28
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:22"
            },
            "parentId": "Search.questionsuggestionfilter.adduserid",
            "order": 0,
            "memberOrder": 0,
            "type": "String"
          },
          "description": "The ID for the user.",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "setgroupids(list<string>)": {
      "id": "Search.questionsuggestionfilter.method.setgroupids(list<string>)",
      "nodeType": "method",
      "name": "setGroupIds",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setGroupIds",
        "textToLower": "setgroupids",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setGroupIds_-1:0"
      },
      "parentId": "Search.questionsuggestionfilter",
      "order": 4,
      "memberOrder": 4,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public void setGroupIds(List<String> groupIds)",
      "overrideSignature": "public override void setGroupIds(List<String> groupIds)",
      "simplifiedSignature": "setGroupIds(List<String>)",
      "datatype": {
        "id": "Search.questionsuggestionfilter.setgroupids.datatype.void",
        "nodeType": "datatype",
        "name": "void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_void_0:7"
        },
        "parentId": "Search.questionsuggestionfilter.setgroupids",
        "order": 0,
        "memberOrder": 0,
        "type": "void"
      },
      "description": "Sets a new list of groups to replace the current list of groups where the group IDs are passed in as an argument. This filter is optional.",
      "parentName": "QuestionSuggestionFilter",
      "variables": {},
      "params": {
        "groupids": {
          "id": "Search.questionsuggestionfilter.method.setgroupids(list<string>).varParam.groupids",
          "nodeType": "variable",
          "name": "groupIds",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "groupIds",
            "textToLower": "groupids",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 37
              },
              "end": {
                "line": 0,
                "character": 45
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_groupIds_0:37"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "groupIds",
            "textToLower": "groupids",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 37
              },
              "end": {
                "line": 0,
                "character": 45
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_groupIds_0:37"
          },
          "parentId": "Search.questionsuggestionfilter.method.setgroupids(list<string>)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Search.questionsuggestionfilter.setgroupids.datatype.List<String>",
            "nodeType": "datatype",
            "name": "List<String>",
            "startToken": {
              "type": "datatype.collection",
              "text": "List",
              "textToLower": "list",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 24
                },
                "end": {
                  "line": 0,
                  "character": 28
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_List_0:24"
            },
            "parentId": "Search.questionsuggestionfilter.setgroupids",
            "order": 0,
            "memberOrder": 0,
            "type": "List",
            "value": {
              "id": "Search.questionsuggestionfilter.setgroupids.datatype.List<String>.value.String",
              "nodeType": "datatype",
              "name": "String",
              "startToken": {
                "type": "datatype.primitive",
                "text": "String",
                "textToLower": "string",
                "isAux": false,
                "range": {
                  "start": {
                    "line": 0,
                    "character": 29
                  },
                  "end": {
                    "line": 0,
                    "character": 35
                  },
                  "isEmpty": false,
                  "isSingleLine": true
                },
                "id": "token.type.identifier_String_0:29"
              },
              "order": 0,
              "memberOrder": 0,
              "type": "String"
            }
          },
          "description": "A list of group IDs.",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "setnetworkids(list<string>)": {
      "id": "Search.questionsuggestionfilter.method.setnetworkids(list<string>)",
      "nodeType": "method",
      "name": "setNetworkIds",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setNetworkIds",
        "textToLower": "setnetworkids",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setNetworkIds_-1:0"
      },
      "parentId": "Search.questionsuggestionfilter",
      "order": 5,
      "memberOrder": 5,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public void setNetworkIds(List<String> networkIds)",
      "overrideSignature": "public override void setNetworkIds(List<String> networkIds)",
      "simplifiedSignature": "setNetworkIds(List<String>)",
      "datatype": {
        "id": "Search.questionsuggestionfilter.setnetworkids.datatype.void",
        "nodeType": "datatype",
        "name": "void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_void_0:7"
        },
        "parentId": "Search.questionsuggestionfilter.setnetworkids",
        "order": 0,
        "memberOrder": 0,
        "type": "void"
      },
      "description": "Sets a new list of networks to replace the current list of networks where the network IDs are passed in as an argument. This filter is optional.",
      "parentName": "QuestionSuggestionFilter",
      "variables": {},
      "params": {
        "networkids": {
          "id": "Search.questionsuggestionfilter.method.setnetworkids(list<string>).varParam.networkids",
          "nodeType": "variable",
          "name": "networkIds",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "networkIds",
            "textToLower": "networkids",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 39
              },
              "end": {
                "line": 0,
                "character": 49
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_networkIds_0:39"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "networkIds",
            "textToLower": "networkids",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 39
              },
              "end": {
                "line": 0,
                "character": 49
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_networkIds_0:39"
          },
          "parentId": "Search.questionsuggestionfilter.method.setnetworkids(list<string>)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Search.questionsuggestionfilter.setnetworkids.datatype.List<String>",
            "nodeType": "datatype",
            "name": "List<String>",
            "startToken": {
              "type": "datatype.collection",
              "text": "List",
              "textToLower": "list",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 26
                },
                "end": {
                  "line": 0,
                  "character": 30
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_List_0:26"
            },
            "parentId": "Search.questionsuggestionfilter.setnetworkids",
            "order": 0,
            "memberOrder": 0,
            "type": "List",
            "value": {
              "id": "Search.questionsuggestionfilter.setnetworkids.datatype.List<String>.value.String",
              "nodeType": "datatype",
              "name": "String",
              "startToken": {
                "type": "datatype.primitive",
                "text": "String",
                "textToLower": "string",
                "isAux": false,
                "range": {
                  "start": {
                    "line": 0,
                    "character": 31
                  },
                  "end": {
                    "line": 0,
                    "character": 37
                  },
                  "isEmpty": false,
                  "isSingleLine": true
                },
                "id": "token.type.identifier_String_0:31"
              },
              "order": 0,
              "memberOrder": 0,
              "type": "String"
            }
          },
          "description": "A list of network IDs.",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "settopicid(string)": {
      "id": "Search.questionsuggestionfilter.method.settopicid(string)",
      "nodeType": "method",
      "name": "setTopicId",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setTopicId",
        "textToLower": "settopicid",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setTopicId_-1:0"
      },
      "parentId": "Search.questionsuggestionfilter",
      "order": 6,
      "memberOrder": 6,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public void setTopicId(String topicId)",
      "overrideSignature": "public override void setTopicId(String topicId)",
      "simplifiedSignature": "setTopicId(String)",
      "datatype": {
        "id": "Search.questionsuggestionfilter.settopicid.datatype.void",
        "nodeType": "datatype",
        "name": "void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_void_0:7"
        },
        "parentId": "Search.questionsuggestionfilter.settopicid",
        "order": 0,
        "memberOrder": 0,
        "type": "void"
      },
      "description": "Sets a filter to display questions associated with the single specified topic whose ID is passed in as an argument. This filter is optional.",
      "parentName": "QuestionSuggestionFilter",
      "variables": {},
      "params": {
        "topicid": {
          "id": "Search.questionsuggestionfilter.method.settopicid(string).varParam.topicid",
          "nodeType": "variable",
          "name": "topicId",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "topicId",
            "textToLower": "topicid",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 30
              },
              "end": {
                "line": 0,
                "character": 37
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_topicId_0:30"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "topicId",
            "textToLower": "topicid",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 30
              },
              "end": {
                "line": 0,
                "character": 37
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_topicId_0:30"
          },
          "parentId": "Search.questionsuggestionfilter.method.settopicid(string)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Search.questionsuggestionfilter.settopicid.datatype.String",
            "nodeType": "datatype",
            "name": "String",
            "startToken": {
              "type": "datatype.primitive",
              "text": "String",
              "textToLower": "string",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 23
                },
                "end": {
                  "line": 0,
                  "character": 29
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_String_0:23"
            },
            "parentId": "Search.questionsuggestionfilter.settopicid",
            "order": 0,
            "memberOrder": 0,
            "type": "String"
          },
          "description": "The ID for a topic.",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    },
    "setuserids(list<string>)": {
      "id": "Search.questionsuggestionfilter.method.setuserids(list<string>)",
      "nodeType": "method",
      "name": "setUserIds",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setUserIds",
        "textToLower": "setuserids",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setUserIds_-1:0"
      },
      "parentId": "Search.questionsuggestionfilter",
      "order": 7,
      "memberOrder": 7,
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 6
          },
          "isEmpty": false,
          "isSingleLine": true
        },
        "id": "token.type.identifier_public_0:0"
      },
      "signature": "public void setUserIds(List<String> userIds)",
      "overrideSignature": "public override void setUserIds(List<String> userIds)",
      "simplifiedSignature": "setUserIds(List<String>)",
      "datatype": {
        "id": "Search.questionsuggestionfilter.setuserids.datatype.void",
        "nodeType": "datatype",
        "name": "void",
        "startToken": {
          "type": "datatype.primitive",
          "text": "void",
          "textToLower": "void",
          "isAux": false,
          "range": {
            "start": {
              "line": 0,
              "character": 7
            },
            "end": {
              "line": 0,
              "character": 11
            },
            "isEmpty": false,
            "isSingleLine": true
          },
          "id": "token.type.identifier_void_0:7"
        },
        "parentId": "Search.questionsuggestionfilter.setuserids",
        "order": 0,
        "memberOrder": 0,
        "type": "void"
      },
      "description": "Sets a new list of users to replace the current list of users where the users IDs are passed in as an argument. This filter is optional.",
      "parentName": "QuestionSuggestionFilter",
      "variables": {},
      "params": {
        "userids": {
          "id": "Search.questionsuggestionfilter.method.setuserids(list<string>).varParam.userids",
          "nodeType": "variable",
          "name": "userIds",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "userIds",
            "textToLower": "userids",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 36
              },
              "end": {
                "line": 0,
                "character": 43
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_userIds_0:36"
          },
          "endToken": {
            "type": "declaration.entity.name.variable",
            "text": "userIds",
            "textToLower": "userids",
            "isAux": false,
            "range": {
              "start": {
                "line": 0,
                "character": 36
              },
              "end": {
                "line": 0,
                "character": 43
              },
              "isEmpty": false,
              "isSingleLine": true
            },
            "id": "token.type.identifier_userIds_0:36"
          },
          "parentId": "Search.questionsuggestionfilter.method.setuserids(list<string>)",
          "order": 1,
          "memberOrder": 1,
          "datatype": {
            "id": "Search.questionsuggestionfilter.setuserids.datatype.List<String>",
            "nodeType": "datatype",
            "name": "List<String>",
            "startToken": {
              "type": "datatype.collection",
              "text": "List",
              "textToLower": "list",
              "isAux": false,
              "range": {
                "start": {
                  "line": 0,
                  "character": 23
                },
                "end": {
                  "line": 0,
                  "character": 27
                },
                "isEmpty": false,
                "isSingleLine": true
              },
              "id": "token.type.identifier_List_0:23"
            },
            "parentId": "Search.questionsuggestionfilter.setuserids",
            "order": 0,
            "memberOrder": 0,
            "type": "List",
            "value": {
              "id": "Search.questionsuggestionfilter.setuserids.datatype.List<String>.value.String",
              "nodeType": "datatype",
              "name": "String",
              "startToken": {
                "type": "datatype.primitive",
                "text": "String",
                "textToLower": "string",
                "isAux": false,
                "range": {
                  "start": {
                    "line": 0,
                    "character": 28
                  },
                  "end": {
                    "line": 0,
                    "character": 34
                  },
                  "isEmpty": false,
                  "isSingleLine": true
                },
                "id": "token.type.identifier_String_0:28"
              },
              "order": 0,
              "memberOrder": 0,
              "type": "String"
            }
          },
          "description": "A list of user IDs.",
          "scope": null
        }
      },
      "queries": [],
      "exceptions": []
    }
  },
  "constructors": {},
  "extendsType": "",
  "implementTypes": [],
  "implements": {},
  "totalMembers": 7,
  "queries": []
}