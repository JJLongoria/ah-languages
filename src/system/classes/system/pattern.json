{
  "id": "System.pattern",
  "nodeType": "class",
  "name": "Pattern",
  "namespace": "System",
  "startToken": {
    "type": "declaration.entity.name.class",
    "text": "Pattern",
    "textToLower": "pattern",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "declaration.entity.name.class_Pattern_-1:0"
  },
  "accessModifier": {
    "type": "keyword.modifier.access",
    "text": "global",
    "textToLower": "global",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "keyword.modifier.access_global_-1:0"
  },
  "sharingModifier": {
    "type": "keyword.modifier.sharing",
    "text": "without sharing",
    "textToLower": "without sharing",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "keyword.modifier.sharing_without sharing_-1:0"
  },
  "description": "Represents a compiled representation of a regular expression.",
  "documentation": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_classes_pattern_and_matcher_pattern_methods.htm",
  "classes": {},
  "interfaces": {},
  "enums": {},
  "variables": {},
  "methods": {
    "compile(string)": {
      "id": "System.pattern.compile",
      "nodeType": "method",
      "name": "compile",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "compile",
        "textToLower": "compile",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_compile_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static System.Pattern compile(String regExp)",
      "simplifiedSignature": "compile(String)",
      "datatype": {
        "id": "System.pattern.compile.System.Pattern",
        "nodeType": "datatype",
        "name": "System.Pattern"
      },
      "description": "Compiles the regular expression into a Pattern object.",
      "params": {
        "regExp": {
          "id": "System.pattern.compile.regexp",
          "type": "var",
          "name": "regExp",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "regExp",
            "textToLower": "regexp",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_regExp_-1:0"
          },
          "signature": "String regExp",
          "datatype": {
            "id": "System.pattern.compile.string",
            "nodeType": "datatype",
            "name": "String"
          }
        }
      }
    },
    "matcher(string)": {
      "id": "System.pattern.matcher",
      "nodeType": "method",
      "name": "matcher",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "matcher",
        "textToLower": "matcher",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_matcher_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public Matcher matcher(String regExp)",
      "simplifiedSignature": "matcher(String)",
      "datatype": {
        "id": "System.pattern.matcher.Matcher",
        "nodeType": "datatype",
        "name": "Matcher"
      },
      "description": "Creates a Matcher object that matches the input string regExp against this Pattern object.",
      "params": {
        "regExp": {
          "id": "System.pattern.matcher.regexp",
          "type": "var",
          "name": "regExp",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "regExp",
            "textToLower": "regexp",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_regExp_-1:0"
          },
          "signature": "String regExp",
          "datatype": {
            "id": "System.pattern.matcher.string",
            "nodeType": "datatype",
            "name": "String"
          }
        }
      }
    },
    "matches(string,string)": {
      "id": "System.pattern.matches",
      "nodeType": "method",
      "name": "matches",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "matches",
        "textToLower": "matches",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_matches_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static Boolean matches(String regExp, String stringtoMatch)",
      "simplifiedSignature": "matches(String,String)",
      "datatype": {
        "id": "System.pattern.matches.Boolean",
        "nodeType": "datatype",
        "name": "Boolean"
      },
      "description": "Compiles the regular expression regExp and tries to match it against the specified string. This method returns true if the specified string matches the regular expression, false otherwise.",
      "params": {
        "regExp": {
          "id": "System.pattern.matches.regexp",
          "type": "var",
          "name": "regExp",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "regExp",
            "textToLower": "regexp",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_regExp_-1:0"
          },
          "signature": "String regExp",
          "datatype": {
            "id": "System.pattern.matches.string",
            "nodeType": "datatype",
            "name": "String"
          }
        },
        "stringtoMatch": {
          "id": "System.pattern.matches.stringtomatch",
          "type": "var",
          "name": "stringtoMatch",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "stringtoMatch",
            "textToLower": "stringtomatch",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_stringtoMatch_-1:0"
          },
          "signature": "String stringtoMatch",
          "datatype": {
            "id": "System.pattern.matches.string",
            "nodeType": "datatype",
            "name": "String"
          }
        }
      }
    },
    "pattern()": {
      "id": "System.pattern.pattern",
      "nodeType": "method",
      "name": "pattern",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "pattern",
        "textToLower": "pattern",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_pattern_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public String pattern()",
      "simplifiedSignature": "pattern()",
      "datatype": {
        "id": "System.pattern.pattern.String",
        "nodeType": "datatype",
        "name": "String"
      },
      "description": "Returns the regular expression from which this Pattern object was compiled.",
      "params": {}
    },
    "quote(string)": {
      "id": "System.pattern.quote",
      "nodeType": "method",
      "name": "quote",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "quote",
        "textToLower": "quote",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_quote_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static String quote(String yourString)",
      "simplifiedSignature": "quote(String)",
      "datatype": {
        "id": "System.pattern.quote.String",
        "nodeType": "datatype",
        "name": "String"
      },
      "description": "Returns a string that can be used to create a pattern that matches the string yourString as if it were a literal pattern.",
      "params": {
        "yourString": {
          "id": "System.pattern.quote.yourstring",
          "type": "var",
          "name": "yourString",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "yourString",
            "textToLower": "yourstring",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_yourString_-1:0"
          },
          "signature": "String yourString",
          "datatype": {
            "id": "System.pattern.quote.string",
            "nodeType": "datatype",
            "name": "String"
          }
        }
      }
    },
    "split(string)": {
      "id": "System.pattern.split",
      "nodeType": "method",
      "name": "split",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "split",
        "textToLower": "split",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_split_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public String[] split(String regExp)",
      "simplifiedSignature": "split(String)",
      "datatype": {
        "id": "System.pattern.split.String[]",
        "nodeType": "datatype",
        "name": "String[]"
      },
      "description": "Returns a list that contains each substring of the String that matches this pattern.",
      "params": {
        "regExp": {
          "id": "System.pattern.split.regexp",
          "type": "var",
          "name": "regExp",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "regExp",
            "textToLower": "regexp",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_regExp_-1:0"
          },
          "signature": "String regExp",
          "datatype": {
            "id": "System.pattern.split.string",
            "nodeType": "datatype",
            "name": "String"
          }
        }
      }
    },
    "split(string,integer)": {
      "id": "System.pattern.split",
      "nodeType": "method",
      "name": "split",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "split",
        "textToLower": "split",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_split_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "signature": "public String[] split(String regExp, Integer limit)",
      "simplifiedSignature": "split(String,Integer)",
      "datatype": {
        "id": "System.pattern.split.String[]",
        "nodeType": "datatype",
        "name": "String[]"
      },
      "description": "Returns a list that contains each substring of the String that is terminated either by the regular expression regExp that matches this pattern, or by the end of the String.",
      "params": {
        "regExp": {
          "id": "System.pattern.split.regexp",
          "type": "var",
          "name": "regExp",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "regExp",
            "textToLower": "regexp",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_regExp_-1:0"
          },
          "signature": "String regExp",
          "datatype": {
            "id": "System.pattern.split.string",
            "nodeType": "datatype",
            "name": "String"
          }
        },
        "limit": {
          "id": "System.pattern.split.limit",
          "type": "var",
          "name": "limit",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "limit",
            "textToLower": "limit",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_limit_-1:0"
          },
          "signature": "Integer limit",
          "datatype": {
            "id": "System.pattern.split.integer",
            "nodeType": "datatype",
            "name": "Integer"
          }
        }
      }
    }
  },
  "constructors": {},
  "extendsType": "",
  "implementTypes": [],
  "implements": {}
}