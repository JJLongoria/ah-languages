{
  "id": "System.test",
  "type": "class",
  "name": "Test",
  "namespace": "System",
  "startToken": {
    "type": "declaration.entity.name.class",
    "text": "Test",
    "textToLower": "test",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "declaration.entity.name.class_Test_-1:0"
  },
  "accessModifier": {
    "type": "keyword.modifier.access",
    "text": "global",
    "textToLower": "global",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "keyword.modifier.access_global_-1:0"
  },
  "sharingModifier": {
    "type": "keyword.modifier.sharing",
    "text": "without sharing",
    "textToLower": "without sharing",
    "isAux": false,
    "range": {
      "start": {
        "line": -1,
        "character": 0
      },
      "end": {
        "line": -1,
        "character": 0
      },
      "isEmpty": true,
      "isSingleLine": true
    },
    "id": "keyword.modifier.sharing_without sharing_-1:0"
  },
  "description": "Contains methods related to Apex tests.",
  "documentation": "https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_methods_system_test.htm",
  "classes": {},
  "interfaces": {},
  "enums": {},
  "variables": {},
  "methods": {
    "clearapexpagemessages()": {
      "id": "System.test.clearapexpagemessages",
      "type": "method",
      "name": "clearApexPageMessages",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "clearApexPageMessages",
        "textToLower": "clearapexpagemessages",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_clearApexPageMessages_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static void clearApexPageMessages()",
      "simplifiedSignature": "clearApexPageMessages()",
      "datatype": {
        "id": "System.test.clearapexpagemessages.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Clear the messages on a Visualforce page while executing Apex test methods.",
      "variables": {}
    },
    "createstub(system.type,system.stubprovider)": {
      "id": "System.test.createstub",
      "type": "method",
      "name": "createStub",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "createStub",
        "textToLower": "createstub",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_createStub_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static Object createStub(System.Type parentType, System.StubProvider stubProvider)",
      "simplifiedSignature": "createStub(System.Type,System.StubProvider)",
      "datatype": {
        "id": "System.test.createstub.Object",
        "type": "datatype",
        "name": "Object"
      },
      "description": "Creates a stubbed version of an Apex class that you can use for testing. This method is part of the Apex stub API. You can use it with the System.StubProvider interface to create a mocking framework.",
      "variables": {
        "parentType": {
          "id": "System.test.createstub.parenttype",
          "type": "var",
          "name": "parentType",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "parentType",
            "textToLower": "parenttype",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_parentType_-1:0"
          },
          "signature": "System.Type parentType",
          "datatype": {
            "id": "System.test.createstub.system.type",
            "type": "datatype",
            "name": "System.Type"
          }
        },
        "stubProvider": {
          "id": "System.test.createstub.stubprovider",
          "type": "var",
          "name": "stubProvider",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "stubProvider",
            "textToLower": "stubprovider",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_stubProvider_-1:0"
          },
          "signature": "System.StubProvider stubProvider",
          "datatype": {
            "id": "System.test.createstub.system.stubprovider",
            "type": "datatype",
            "name": "System.StubProvider"
          }
        }
      }
    },
    "enablechangedatacapture()": {
      "id": "System.test.enablechangedatacapture",
      "type": "method",
      "name": "enableChangeDataCapture",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "enableChangeDataCapture",
        "textToLower": "enablechangedatacapture",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_enableChangeDataCapture_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static void enableChangeDataCapture()",
      "simplifiedSignature": "enableChangeDataCapture()",
      "datatype": {
        "id": "System.test.enablechangedatacapture.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Use this method in an Apex test so that change event notifications are generated for all supported Change Data Capture entities. Call this method at the beginning of your test before performing DML operations and calling Test.getEventBus().deliver();.",
      "variables": {}
    },
    "enqueuebatchjobs(integer)": {
      "id": "System.test.enqueuebatchjobs",
      "type": "method",
      "name": "enqueueBatchJobs",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "enqueueBatchJobs",
        "textToLower": "enqueuebatchjobs",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_enqueueBatchJobs_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static List<Id> enqueueBatchJobs(Integer numberOfJobs)",
      "simplifiedSignature": "enqueueBatchJobs(Integer)",
      "datatype": {
        "id": "System.test.enqueuebatchjobs.List<Id>",
        "type": "datatype",
        "name": "List<Id>"
      },
      "description": "Adds the specified number of jobs with no-operation contents to the test-context queue. It first fills the test batch queue, up to the maximum 5 jobs, and then places jobs in the test flex queue. It throws a limit exception when the number of jobs in the test flex queue exceeds the allowed limit of 100 jobs.",
      "variables": {
        "numberOfJobs": {
          "id": "System.test.enqueuebatchjobs.numberofjobs",
          "type": "var",
          "name": "numberOfJobs",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "numberOfJobs",
            "textToLower": "numberofjobs",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_numberOfJobs_-1:0"
          },
          "signature": "Integer numberOfJobs",
          "datatype": {
            "id": "System.test.enqueuebatchjobs.integer",
            "type": "datatype",
            "name": "Integer"
          }
        }
      }
    },
    "geteventbus()": {
      "id": "System.test.geteventbus",
      "type": "method",
      "name": "getEventBus",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getEventBus",
        "textToLower": "geteventbus",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getEventBus_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static EventBus.TestBroker getEventBus()",
      "simplifiedSignature": "getEventBus()",
      "datatype": {
        "id": "System.test.geteventbus.EventBus.TestBroker",
        "type": "datatype",
        "name": "EventBus.TestBroker"
      },
      "description": "Returns an instance of the test event bus broker, which lets you operate on platform event or change event messages in an Apex test. For example, you can call Test.getEventBus().deliver() to deliver event messages.",
      "variables": {}
    },
    "getflexqueueorder()": {
      "id": "System.test.getflexqueueorder",
      "type": "method",
      "name": "getFlexQueueOrder",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getFlexQueueOrder",
        "textToLower": "getflexqueueorder",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getFlexQueueOrder_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static List<Id> getFlexQueueOrder()",
      "simplifiedSignature": "getFlexQueueOrder()",
      "datatype": {
        "id": "System.test.getflexqueueorder.List<Id>",
        "type": "datatype",
        "name": "List<Id>"
      },
      "description": "Returns an ordered list of job IDs for jobs in the test-context flex queue. The job at index 0 is the next job slated to run. This method returns only test-context results, even if it’s annotated with @IsTest(SeeAllData=true).",
      "variables": {}
    },
    "getstandardpricebookid()": {
      "id": "System.test.getstandardpricebookid",
      "type": "method",
      "name": "getStandardPricebookId",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "getStandardPricebookId",
        "textToLower": "getstandardpricebookid",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_getStandardPricebookId_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static Id getStandardPricebookId()",
      "simplifiedSignature": "getStandardPricebookId()",
      "datatype": {
        "id": "System.test.getstandardpricebookid.Id",
        "type": "datatype",
        "name": "Id"
      },
      "description": "Returns the ID of the standard price book in the organization.",
      "variables": {}
    },
    "invokecontinuationmethod(object,continuation)": {
      "id": "System.test.invokecontinuationmethod",
      "type": "method",
      "name": "invokeContinuationMethod",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "invokeContinuationMethod",
        "textToLower": "invokecontinuationmethod",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_invokeContinuationMethod_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static Object invokeContinuationMethod(Object controller, Continuation request)",
      "simplifiedSignature": "invokeContinuationMethod(Object,Continuation)",
      "datatype": {
        "id": "System.test.invokecontinuationmethod.Object",
        "type": "datatype",
        "name": "Object"
      },
      "description": "Invokes the callback method for the specified controller and continuation in a test method.",
      "variables": {
        "controller": {
          "id": "System.test.invokecontinuationmethod.controller",
          "type": "var",
          "name": "controller",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "controller",
            "textToLower": "controller",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_controller_-1:0"
          },
          "signature": "Object controller",
          "datatype": {
            "id": "System.test.invokecontinuationmethod.object",
            "type": "datatype",
            "name": "Object"
          }
        },
        "request": {
          "id": "System.test.invokecontinuationmethod.request",
          "type": "var",
          "name": "request",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "request",
            "textToLower": "request",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_request_-1:0"
          },
          "signature": "Continuation request",
          "datatype": {
            "id": "System.test.invokecontinuationmethod.continuation",
            "type": "datatype",
            "name": "Continuation"
          }
        }
      }
    },
    "isrunningtest()": {
      "id": "System.test.isrunningtest",
      "type": "method",
      "name": "isRunningTest",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "isRunningTest",
        "textToLower": "isrunningtest",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_isRunningTest_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static Boolean isRunningTest()",
      "simplifiedSignature": "isRunningTest()",
      "datatype": {
        "id": "System.test.isrunningtest.Boolean",
        "type": "datatype",
        "name": "Boolean"
      },
      "description": "Returns true if the currently executing code was called by code contained in a test method, false otherwise. Use this method if you need to run different code depending on whether it was being called  from a test.",
      "variables": {}
    },
    "loaddata(schema.sobjecttype,string)": {
      "id": "System.test.loaddata",
      "type": "method",
      "name": "loadData",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "loadData",
        "textToLower": "loaddata",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_loadData_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static List<sObject> loadData(Schema.SObjectType sObjectToken, String resourceName)",
      "simplifiedSignature": "loadData(Schema.SObjectType,String)",
      "datatype": {
        "id": "System.test.loaddata.List<sObject>",
        "type": "datatype",
        "name": "List<sObject>"
      },
      "description": "Inserts test records from the specified static resource .csv file and for the specified sObject type, and returns a list of the inserted sObjects.",
      "variables": {
        "sObjectToken": {
          "id": "System.test.loaddata.sobjecttoken",
          "type": "var",
          "name": "sObjectToken",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "sObjectToken",
            "textToLower": "sobjecttoken",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_sObjectToken_-1:0"
          },
          "signature": "Schema.SObjectType sObjectToken",
          "datatype": {
            "id": "System.test.loaddata.schema.sobjecttype",
            "type": "datatype",
            "name": "Schema.SObjectType"
          }
        },
        "resourceName": {
          "id": "System.test.loaddata.resourcename",
          "type": "var",
          "name": "resourceName",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "resourceName",
            "textToLower": "resourcename",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_resourceName_-1:0"
          },
          "signature": "String resourceName",
          "datatype": {
            "id": "System.test.loaddata.string",
            "type": "datatype",
            "name": "String"
          }
        }
      }
    },
    "newsendemailquickactiondefaults(id,id)": {
      "id": "System.test.newsendemailquickactiondefaults",
      "type": "method",
      "name": "newSendEmailQuickActionDefaults",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "newSendEmailQuickActionDefaults",
        "textToLower": "newsendemailquickactiondefaults",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_newSendEmailQuickActionDefaults_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static SendEmailQuickActionDefaults Class newSendEmailQuickActionDefaults(ID contextId, ID replyToId)",
      "simplifiedSignature": "newSendEmailQuickActionDefaults(ID,ID)",
      "datatype": {
        "id": "System.test.newsendemailquickactiondefaults.SendEmailQuickActionDefaults Class",
        "type": "datatype",
        "name": "SendEmailQuickActionDefaults Class"
      },
      "description": "Creates a new QuickAction.SendEmailQuickActionDefaults instance for testing a class implementing the QuickAction.QuickActionDefaultsHandler interface.",
      "variables": {
        "contextId": {
          "id": "System.test.newsendemailquickactiondefaults.contextid",
          "type": "var",
          "name": "contextId",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "contextId",
            "textToLower": "contextid",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_contextId_-1:0"
          },
          "signature": "ID contextId",
          "datatype": {
            "id": "System.test.newsendemailquickactiondefaults.id",
            "type": "datatype",
            "name": "ID"
          }
        },
        "replyToId": {
          "id": "System.test.newsendemailquickactiondefaults.replytoid",
          "type": "var",
          "name": "replyToId",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "replyToId",
            "textToLower": "replytoid",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_replyToId_-1:0"
          },
          "signature": "ID replyToId",
          "datatype": {
            "id": "System.test.newsendemailquickactiondefaults.id",
            "type": "datatype",
            "name": "ID"
          }
        }
      }
    },
    "setcontinuationresponse(string,system.httpresponse)": {
      "id": "System.test.setcontinuationresponse",
      "type": "method",
      "name": "setContinuationResponse",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setContinuationResponse",
        "textToLower": "setcontinuationresponse",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setContinuationResponse_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static void setContinuationResponse(String requestLabel, System.HttpResponse mockResponse)",
      "simplifiedSignature": "setContinuationResponse(String,System.HttpResponse)",
      "datatype": {
        "id": "System.test.setcontinuationresponse.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Sets a mock response for a continuation HTTP request in a test method.",
      "variables": {
        "requestLabel": {
          "id": "System.test.setcontinuationresponse.requestlabel",
          "type": "var",
          "name": "requestLabel",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "requestLabel",
            "textToLower": "requestlabel",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_requestLabel_-1:0"
          },
          "signature": "String requestLabel",
          "datatype": {
            "id": "System.test.setcontinuationresponse.string",
            "type": "datatype",
            "name": "String"
          }
        },
        "mockResponse": {
          "id": "System.test.setcontinuationresponse.mockresponse",
          "type": "var",
          "name": "mockResponse",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "mockResponse",
            "textToLower": "mockresponse",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_mockResponse_-1:0"
          },
          "signature": "System.HttpResponse mockResponse",
          "datatype": {
            "id": "System.test.setcontinuationresponse.system.httpresponse",
            "type": "datatype",
            "name": "System.HttpResponse"
          }
        }
      }
    },
    "setcreateddate(id,datetime)": {
      "id": "System.test.setcreateddate",
      "type": "method",
      "name": "setCreatedDate",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setCreatedDate",
        "textToLower": "setcreateddate",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setCreatedDate_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static void setCreatedDate(Id recordId, Datetime createdDatetime)",
      "simplifiedSignature": "setCreatedDate(Id,Datetime)",
      "datatype": {
        "id": "System.test.setcreateddate.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Sets CreatedDate for a test-context sObject.",
      "variables": {
        "recordId": {
          "id": "System.test.setcreateddate.recordid",
          "type": "var",
          "name": "recordId",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "recordId",
            "textToLower": "recordid",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_recordId_-1:0"
          },
          "signature": "Id recordId",
          "datatype": {
            "id": "System.test.setcreateddate.id",
            "type": "datatype",
            "name": "Id"
          }
        },
        "createdDatetime": {
          "id": "System.test.setcreateddate.createddatetime",
          "type": "var",
          "name": "createdDatetime",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "createdDatetime",
            "textToLower": "createddatetime",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_createdDatetime_-1:0"
          },
          "signature": "Datetime createdDatetime",
          "datatype": {
            "id": "System.test.setcreateddate.datetime",
            "type": "datatype",
            "name": "Datetime"
          }
        }
      }
    },
    "setcurrentpage(pagereference)": {
      "id": "System.test.setcurrentpage",
      "type": "method",
      "name": "setCurrentPage",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setCurrentPage",
        "textToLower": "setcurrentpage",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setCurrentPage_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static void setCurrentPage(PageReference page)",
      "simplifiedSignature": "setCurrentPage(PageReference)",
      "datatype": {
        "id": "System.test.setcurrentpage.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "A Visualforce test method that sets the current PageReference for the controller.",
      "variables": {
        "page": {
          "id": "System.test.setcurrentpage.page",
          "type": "var",
          "name": "page",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "page",
            "textToLower": "page",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_page_-1:0"
          },
          "signature": "PageReference page",
          "datatype": {
            "id": "System.test.setcurrentpage.pagereference",
            "type": "datatype",
            "name": "PageReference"
          }
        }
      }
    },
    "setcurrentpagereference(pagereference)": {
      "id": "System.test.setcurrentpagereference",
      "type": "method",
      "name": "setCurrentPageReference",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setCurrentPageReference",
        "textToLower": "setcurrentpagereference",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setCurrentPageReference_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static void setCurrentPageReference(PageReference page)",
      "simplifiedSignature": "setCurrentPageReference(PageReference)",
      "datatype": {
        "id": "System.test.setcurrentpagereference.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "A Visualforce test method that sets the current PageReference for the controller.",
      "variables": {
        "page": {
          "id": "System.test.setcurrentpagereference.page",
          "type": "var",
          "name": "page",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "page",
            "textToLower": "page",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_page_-1:0"
          },
          "signature": "PageReference page",
          "datatype": {
            "id": "System.test.setcurrentpagereference.pagereference",
            "type": "datatype",
            "name": "PageReference"
          }
        }
      }
    },
    "setfixedsearchresults(id[])": {
      "id": "System.test.setfixedsearchresults",
      "type": "method",
      "name": "setFixedSearchResults",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setFixedSearchResults",
        "textToLower": "setfixedsearchresults",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setFixedSearchResults_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static void setFixedSearchResults(ID[] fixedSearchResults)",
      "simplifiedSignature": "setFixedSearchResults(ID[])",
      "datatype": {
        "id": "System.test.setfixedsearchresults.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Defines a list of fixed search results to be returned by all subsequent SOSL statements in a test method.",
      "variables": {
        "fixedSearchResults": {
          "id": "System.test.setfixedsearchresults.fixedsearchresults",
          "type": "var",
          "name": "fixedSearchResults",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "fixedSearchResults",
            "textToLower": "fixedsearchresults",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_fixedSearchResults_-1:0"
          },
          "signature": "ID[] fixedSearchResults",
          "datatype": {
            "id": "System.test.setfixedsearchresults.id[]",
            "type": "datatype",
            "name": "ID[]"
          }
        }
      }
    },
    "setmock(type,object)": {
      "id": "System.test.setmock",
      "type": "method",
      "name": "setMock",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setMock",
        "textToLower": "setmock",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setMock_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static void setMock(Type interfaceType, Object instance)",
      "simplifiedSignature": "setMock(Type,Object)",
      "datatype": {
        "id": "System.test.setmock.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Sets the response mock mode and instructs the Apex runtime to send a mock response whenever a callout is made through the HTTP classes or the auto-generated code from WSDLs.",
      "variables": {
        "interfaceType": {
          "id": "System.test.setmock.interfacetype",
          "type": "var",
          "name": "interfaceType",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "interfaceType",
            "textToLower": "interfacetype",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_interfaceType_-1:0"
          },
          "signature": "Type interfaceType",
          "datatype": {
            "id": "System.test.setmock.type",
            "type": "datatype",
            "name": "Type"
          }
        },
        "instance": {
          "id": "System.test.setmock.instance",
          "type": "var",
          "name": "instance",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "instance",
            "textToLower": "instance",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_instance_-1:0"
          },
          "signature": "Object instance",
          "datatype": {
            "id": "System.test.setmock.object",
            "type": "datatype",
            "name": "Object"
          }
        }
      }
    },
    "setreadonlyapplicationmode(boolean)": {
      "id": "System.test.setreadonlyapplicationmode",
      "type": "method",
      "name": "setReadOnlyApplicationMode",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "setReadOnlyApplicationMode",
        "textToLower": "setreadonlyapplicationmode",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_setReadOnlyApplicationMode_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static void setReadOnlyApplicationMode(Boolean applicationMode)",
      "simplifiedSignature": "setReadOnlyApplicationMode(Boolean)",
      "datatype": {
        "id": "System.test.setreadonlyapplicationmode.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Sets the application mode for an organization to read-only in an Apex test to simulate read-only mode during Salesforce upgrades and downtimes. The application mode is reset to the default mode at the end of each Apex test run.",
      "variables": {
        "applicationMode": {
          "id": "System.test.setreadonlyapplicationmode.applicationmode",
          "type": "var",
          "name": "applicationMode",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "applicationMode",
            "textToLower": "applicationmode",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_applicationMode_-1:0"
          },
          "signature": "Boolean applicationMode",
          "datatype": {
            "id": "System.test.setreadonlyapplicationmode.boolean",
            "type": "datatype",
            "name": "Boolean"
          }
        }
      }
    },
    "starttest()": {
      "id": "System.test.starttest",
      "type": "method",
      "name": "startTest",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "startTest",
        "textToLower": "starttest",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_startTest_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static void startTest()",
      "simplifiedSignature": "startTest()",
      "datatype": {
        "id": "System.test.starttest.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Marks the point in your test code when your test actually begins.  Use this method when you are testing governor limits.",
      "variables": {}
    },
    "stoptest()": {
      "id": "System.test.stoptest",
      "type": "method",
      "name": "stopTest",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "stopTest",
        "textToLower": "stoptest",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_stopTest_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static void stopTest()",
      "simplifiedSignature": "stopTest()",
      "datatype": {
        "id": "System.test.stoptest.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Marks the point in your test code when your test ends. Use this method in conjunction with the startTest method.",
      "variables": {}
    },
    "testinstall(installhandler,version,boolean)": {
      "id": "System.test.testinstall",
      "type": "method",
      "name": "testInstall",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "testInstall",
        "textToLower": "testinstall",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_testInstall_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static void testInstall(InstallHandler installImplementation, Version version, Boolean isPush)",
      "simplifiedSignature": "testInstall(InstallHandler,Version,Boolean)",
      "datatype": {
        "id": "System.test.testinstall.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Tests the implementation of the InstallHandler interface, which is used for specifying a post install script in packages. Tests run as the test initiator in the development environment.",
      "variables": {
        "installImplementation": {
          "id": "System.test.testinstall.installimplementation",
          "type": "var",
          "name": "installImplementation",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "installImplementation",
            "textToLower": "installimplementation",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_installImplementation_-1:0"
          },
          "signature": "InstallHandler installImplementation",
          "datatype": {
            "id": "System.test.testinstall.installhandler",
            "type": "datatype",
            "name": "InstallHandler"
          }
        },
        "version": {
          "id": "System.test.testinstall.version",
          "type": "var",
          "name": "version",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "version",
            "textToLower": "version",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_version_-1:0"
          },
          "signature": "Version version",
          "datatype": {
            "id": "System.test.testinstall.version",
            "type": "datatype",
            "name": "Version"
          }
        },
        "isPush": {
          "id": "System.test.testinstall.ispush",
          "type": "var",
          "name": "isPush",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "isPush",
            "textToLower": "ispush",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_isPush_-1:0"
          },
          "signature": "Boolean isPush",
          "datatype": {
            "id": "System.test.testinstall.boolean",
            "type": "datatype",
            "name": "Boolean"
          }
        }
      }
    },
    "testuninstall(uninstallhandler)": {
      "id": "System.test.testuninstall",
      "type": "method",
      "name": "testUninstall",
      "startToken": {
        "type": "declaration.entity.name.function",
        "text": "testUninstall",
        "textToLower": "testuninstall",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "declaration.entity.name.function_testUninstall_-1:0"
      },
      "accessModifier": {
        "type": "keyword.modifier.access",
        "text": "public",
        "textToLower": "public",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.access_public_-1:0"
      },
      "static": {
        "type": "keyword.modifier.static",
        "text": "static",
        "textToLower": "static",
        "isAux": false,
        "range": {
          "start": {
            "line": -1,
            "character": 0
          },
          "end": {
            "line": -1,
            "character": 0
          },
          "isEmpty": true,
          "isSingleLine": true
        },
        "id": "keyword.modifier.static_static_-1:0"
      },
      "signature": "public static void testUninstall(UninstallHandler uninstallImplementation)",
      "simplifiedSignature": "testUninstall(UninstallHandler)",
      "datatype": {
        "id": "System.test.testuninstall.void",
        "type": "datatype",
        "name": "void"
      },
      "description": "Tests the implementation of the UninstallHandler interface, which is used for specifying an uninstall script in packages. Tests run as the test initiator in the development environment.",
      "variables": {
        "uninstallImplementation": {
          "id": "System.test.testuninstall.uninstallimplementation",
          "type": "var",
          "name": "uninstallImplementation",
          "startToken": {
            "type": "declaration.entity.name.variable",
            "text": "uninstallImplementation",
            "textToLower": "uninstallimplementation",
            "isAux": false,
            "range": {
              "start": {
                "line": -1,
                "character": 0
              },
              "end": {
                "line": -1,
                "character": 0
              },
              "isEmpty": true,
              "isSingleLine": true
            },
            "id": "declaration.entity.name.variable_uninstallImplementation_-1:0"
          },
          "signature": "UninstallHandler uninstallImplementation",
          "datatype": {
            "id": "System.test.testuninstall.uninstallhandler",
            "type": "datatype",
            "name": "UninstallHandler"
          }
        }
      }
    }
  },
  "constructors": {},
  "extendsType": "",
  "implementTypes": [],
  "implements": {}
}